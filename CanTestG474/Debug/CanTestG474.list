
CanTestG474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08007ccc  08007ccc  00008ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da8  08007da8  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007da8  08007da8  00008da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db0  08007db0  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db0  08007db0  00008db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007db4  08007db4  00008db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007db8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c08  2000006c  08007e24  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c74  08007e24  00009c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f27a  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d9e  00000000  00000000  00028316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  0002c0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c3  00000000  00000000  0002db80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005174  00000000  00000000  0002f043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c75c  00000000  00000000  000341b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d212  00000000  00000000  00050913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015db25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a20  00000000  00000000  0015db68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00165588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007cb4 	.word	0x08007cb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08007cb4 	.word	0x08007cb4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *data, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 100);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <_write+0x24>)
 80005c6:	f003 f819 	bl	80035fc <HAL_UART_Transmit>
	return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000ec 	.word	0x200000ec

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fc1b 	bl	8000e16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f81a 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f910 	bl	8000808 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80005e8:	f000 f862 	bl	80006b0 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f8c0 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f0:	f003 fef4 	bl	80043dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f4:	4a05      	ldr	r2, [pc, #20]	@ (800060c <main+0x34>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4805      	ldr	r0, [pc, #20]	@ (8000610 <main+0x38>)
 80005fa:	f003 ff39 	bl	8004470 <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <main+0x3c>)
 8000602:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000604:	f003 ff0e 	bl	8004424 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <main+0x30>
 800060c:	08007d00 	.word	0x08007d00
 8000610:	080008b5 	.word	0x080008b5
 8000614:	20000180 	.word	0x20000180

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2238      	movs	r2, #56	@ 0x38
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f006 fd1d 	bl	8007066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800063a:	2000      	movs	r0, #0
 800063c:	f001 fbe0 	bl	8001e00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2340      	movs	r3, #64	@ 0x40
 800064c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000656:	2304      	movs	r3, #4
 8000658:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800065a:	2355      	movs	r3, #85	@ 0x55
 800065c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fc7a 	bl	8001f68 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800067a:	f000 f957 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f001 ff78 	bl	800258c <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006a2:	f000 f943 	bl	800092c <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006b8:	4a2c      	ldr	r2, [pc, #176]	@ (800076c <MX_FDCAN1_Init+0xbc>)
 80006ba:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006be:	2201      	movs	r2, #1
 80006c0:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006c2:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006ce:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 283;
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006e2:	f240 121b 	movw	r2, #283	@ 0x11b
 80006e6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000702:	2201      	movs	r2, #1
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000708:	2201      	movs	r2, #1
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 800070e:	2201      	movs	r2, #1
 8000710:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 800071a:	2200      	movs	r2, #0
 800071c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000724:	4810      	ldr	r0, [pc, #64]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000726:	f000 fcaf 	bl	8001088 <HAL_FDCAN_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 8000730:	f000 f8fc 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef canFilterConfig;
  canFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIndex = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000740:	2301      	movs	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterID1 = 0x000;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterID2 = 0x010;
 8000748:	2310      	movs	r3, #16
 800074a:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &canFilterConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_FDCAN1_Init+0xb8>)
 8000752:	f000 fdf3 	bl	800133c <HAL_FDCAN_ConfigFilter>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_FDCAN1_Init+0xb0>
  {
	  Error_Handler();
 800075c:	f000 f8e6 	bl	800092c <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000088 	.word	0x20000088
 800076c:	40006400 	.word	0x40006400

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 8000776:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <MX_USART2_UART_Init+0x94>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b8:	4811      	ldr	r0, [pc, #68]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007ba:	f002 fecf 	bl	800355c <HAL_UART_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 f8b2 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007cc:	f003 fcf8 	bl	80041c0 <HAL_UARTEx_SetTxFifoThreshold>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007d6:	f000 f8a9 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007de:	f003 fd2d 	bl	800423c <HAL_UARTEx_SetRxFifoThreshold>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007e8:	f000 f8a0 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_USART2_UART_Init+0x90>)
 80007ee:	f003 fcae 	bl	800414e <HAL_UARTEx_DisableFifoMode>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f898 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000ec 	.word	0x200000ec
 8000804:	40004400 	.word	0x40004400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	@ 0x28
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a23      	ldr	r2, [pc, #140]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a1d      	ldr	r2, [pc, #116]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a11      	ldr	r2, [pc, #68]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_GPIO_Init+0xa8>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000886:	f001 fa89 	bl	8001d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800088a:	2320      	movs	r3, #32
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a4:	f001 f8f8 	bl	8001a98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	@ 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000

080008b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	@ 0x38
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	FDCAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80008bc:	4810      	ldr	r0, [pc, #64]	@ (8000900 <StartDefaultTask+0x4c>)
 80008be:	f000 fd97 	bl	80013f0 <HAL_FDCAN_Start>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <StartDefaultTask+0x18>
	{
		Error_Handler();
 80008c8:	f000 f830 	bl	800092c <Error_Handler>
	}
	/* Infinite loop */
	for(;;)
	{
//		osDelay(100);
		if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0)
 80008cc:	2140      	movs	r1, #64	@ 0x40
 80008ce:	480c      	ldr	r0, [pc, #48]	@ (8000900 <StartDefaultTask+0x4c>)
 80008d0:	f000 febe 	bl	8001650 <HAL_FDCAN_GetRxFifoFillLevel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f8      	beq.n	80008cc <StartDefaultTask+0x18>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	f107 0210 	add.w	r2, r7, #16
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	4806      	ldr	r0, [pc, #24]	@ (8000900 <StartDefaultTask+0x4c>)
 80008e6:	f000 fdab 	bl	8001440 <HAL_FDCAN_GetRxMessage>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1ed      	bne.n	80008cc <StartDefaultTask+0x18>
			{
				printf("rx data: %s\r\n", (char*)rxData);
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	4619      	mov	r1, r3
 80008f6:	4803      	ldr	r0, [pc, #12]	@ (8000904 <StartDefaultTask+0x50>)
 80008f8:	f006 fb60 	bl	8006fbc <iprintf>
		if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0)
 80008fc:	e7e6      	b.n	80008cc <StartDefaultTask+0x18>
 80008fe:	bf00      	nop
 8000900:	20000088 	.word	0x20000088
 8000904:	08007cd8 	.word	0x08007cd8

08000908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d101      	bne.n	800091e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091a:	f000 fa95 	bl	8000e48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40001000 	.word	0x40001000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000934:	2120      	movs	r1, #32
 8000936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093a:	f001 fa47 	bl	8001dcc <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800093e:	2064      	movs	r0, #100	@ 0x64
 8000940:	f000 faa0 	bl	8000e84 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000944:	bf00      	nop
 8000946:	e7f5      	b.n	8000934 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_MspInit+0x50>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000952:	4a11      	ldr	r2, [pc, #68]	@ (8000998 <HAL_MspInit+0x50>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6613      	str	r3, [r2, #96]	@ 0x60
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <HAL_MspInit+0x50>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <HAL_MspInit+0x50>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096a:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <HAL_MspInit+0x50>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	6593      	str	r3, [r2, #88]	@ 0x58
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_MspInit+0x50>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	210f      	movs	r1, #15
 8000982:	f06f 0001 	mvn.w	r0, #1
 8000986:	f000 fb57 	bl	8001038 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800098a:	f001 fadd 	bl	8001f48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09e      	sub	sp, #120	@ 0x78
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2254      	movs	r2, #84	@ 0x54
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f006 fb52 	bl	8007066 <memset>
  if(hfdcan->Instance==FDCAN1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a31      	ldr	r2, [pc, #196]	@ (8000a8c <HAL_FDCAN_MspInit+0xf0>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d15b      	bne.n	8000a84 <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80009d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 f823 	bl	8002a28 <HAL_RCCEx_PeriphCLKConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80009e8:	f7ff ffa0 	bl	800092c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009ec:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <HAL_FDCAN_MspInit+0xf4>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f0:	4a27      	ldr	r2, [pc, #156]	@ (8000a90 <HAL_FDCAN_MspInit+0xf4>)
 80009f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f8:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <HAL_FDCAN_MspInit+0xf4>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <HAL_FDCAN_MspInit+0xf4>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	4a21      	ldr	r2, [pc, #132]	@ (8000a90 <HAL_FDCAN_MspInit+0xf4>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a10:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <HAL_FDCAN_MspInit+0xf4>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a2e:	2309      	movs	r3, #9
 8000a30:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a36:	4619      	mov	r1, r3
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3c:	f001 f82c 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a44:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a52:	2309      	movs	r3, #9
 8000a54:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a60:	f001 f81a 	bl	8001a98 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2105      	movs	r1, #5
 8000a68:	2015      	movs	r0, #21
 8000a6a:	f000 fae5 	bl	8001038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a6e:	2015      	movs	r0, #21
 8000a70:	f000 fafc 	bl	800106c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2105      	movs	r1, #5
 8000a78:	2016      	movs	r0, #22
 8000a7a:	f000 fadd 	bl	8001038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000a7e:	2016      	movs	r0, #22
 8000a80:	f000 faf4 	bl	800106c <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000a84:	bf00      	nop
 8000a86:	3778      	adds	r7, #120	@ 0x78
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40006400 	.word	0x40006400
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09e      	sub	sp, #120	@ 0x78
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	2254      	movs	r2, #84	@ 0x54
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f006 fad6 	bl	8007066 <memset>
  if(huart->Instance==USART2)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b3c <HAL_UART_MspInit+0xa8>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d136      	bne.n	8000b32 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 ffa9 	bl	8002a28 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000adc:	f7ff ff26 	bl	800092c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae0:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <HAL_UART_MspInit+0xac>)
 8000ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae4:	4a16      	ldr	r2, [pc, #88]	@ (8000b40 <HAL_UART_MspInit+0xac>)
 8000ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aec:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <HAL_UART_MspInit+0xac>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <HAL_UART_MspInit+0xac>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <HAL_UART_MspInit+0xac>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b04:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_UART_MspInit+0xac>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b10:	230c      	movs	r3, #12
 8000b12:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b20:	2307      	movs	r3, #7
 8000b22:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2e:	f000 ffb3 	bl	8001a98 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b32:	bf00      	nop
 8000b34:	3778      	adds	r7, #120	@ 0x78
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40021000 	.word	0x40021000

08000b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	@ 0x30
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b54:	4b2c      	ldr	r3, [pc, #176]	@ (8000c08 <HAL_InitTick+0xc4>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b58:	4a2b      	ldr	r2, [pc, #172]	@ (8000c08 <HAL_InitTick+0xc4>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b60:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <HAL_InitTick+0xc4>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b64:	f003 0310 	and.w	r3, r3, #16
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b6c:	f107 020c 	add.w	r2, r7, #12
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fede 	bl	8002938 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b7c:	f001 feb0 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8000b80:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b84:	4a21      	ldr	r2, [pc, #132]	@ (8000c0c <HAL_InitTick+0xc8>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	0c9b      	lsrs	r3, r3, #18
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b90:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <HAL_InitTick+0xcc>)
 8000b92:	4a20      	ldr	r2, [pc, #128]	@ (8000c14 <HAL_InitTick+0xd0>)
 8000b94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b96:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <HAL_InitTick+0xcc>)
 8000b98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c10 <HAL_InitTick+0xcc>)
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <HAL_InitTick+0xcc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_InitTick+0xcc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000bb0:	4817      	ldr	r0, [pc, #92]	@ (8000c10 <HAL_InitTick+0xcc>)
 8000bb2:	f002 f987 	bl	8002ec4 <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d11b      	bne.n	8000bfc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bc4:	4812      	ldr	r0, [pc, #72]	@ (8000c10 <HAL_InitTick+0xcc>)
 8000bc6:	f002 f9df 	bl	8002f88 <HAL_TIM_Base_Start_IT>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d111      	bne.n	8000bfc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bd8:	2036      	movs	r0, #54	@ 0x36
 8000bda:	f000 fa47 	bl	800106c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d808      	bhi.n	8000bf6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2036      	movs	r0, #54	@ 0x36
 8000bea:	f000 fa25 	bl	8001038 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_InitTick+0xd4>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	e002      	b.n	8000bfc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3730      	adds	r7, #48	@ 0x30
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	20000184 	.word	0x20000184
 8000c14:	40001000 	.word	0x40001000
 8000c18:	20000004 	.word	0x20000004

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c5a:	f000 fd17 	bl	800168c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000088 	.word	0x20000088

08000c68 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <FDCAN1_IT1_IRQHandler+0x10>)
 8000c6e:	f000 fd0d 	bl	800168c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000088 	.word	0x20000088

08000c7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <TIM6_DAC_IRQHandler+0x10>)
 8000c82:	f002 f9f9 	bl	8003078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000184 	.word	0x20000184

08000c90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e00a      	b.n	8000cb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf0      	blt.n	8000ca2 <_read+0x12>
  }

  return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_isatty>:

int _isatty(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	@ (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f006 f9ce 	bl	8007104 <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20020000 	.word	0x20020000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	200001d0 	.word	0x200001d0
 8000d9c:	20001c78 	.word	0x20001c78

08000da0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc4:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc8:	f7ff ffea 	bl	8000da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df2:	f006 f98d 	bl	8007110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df6:	f7ff fbef 	bl	80005d8 <main>

08000dfa <LoopForever>:

LoopForever:
    b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   r0, =_estack
 8000dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e08:	08007db8 	.word	0x08007db8
  ldr r2, =_sbss
 8000e0c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e10:	20001c74 	.word	0x20001c74

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>

08000e16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f8fe 	bl	8001022 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e26:	200f      	movs	r0, #15
 8000e28:	f7ff fe8c 	bl	8000b44 <HAL_InitTick>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	e001      	b.n	8000e3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e38:	f7ff fd86 	bl	8000948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]

}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <HAL_IncTick+0x1c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <HAL_IncTick+0x20>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a03      	ldr	r2, [pc, #12]	@ (8000e64 <HAL_IncTick+0x1c>)
 8000e58:	6013      	str	r3, [r2, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	200001d4 	.word	0x200001d4
 8000e68:	20000008 	.word	0x20000008

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200001d4 	.word	0x200001d4

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff ffee 	bl	8000e6c <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e9c:	d004      	beq.n	8000ea8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_Delay+0x40>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea8:	bf00      	nop
 8000eaa:	f7ff ffdf 	bl	8000e6c <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d8f7      	bhi.n	8000eaa <HAL_Delay+0x26>
  {
  }
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	@ (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff4c 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001046:	f7ff ff63 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 800104a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	6978      	ldr	r0, [r7, #20]
 8001052:	f7ff ffb3 	bl	8000fbc <NVIC_EncodePriority>
 8001056:	4602      	mov	r2, r0
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff82 	bl	8000f68 <__NVIC_SetPriority>
}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff56 	bl	8000f2c <__NVIC_EnableIRQ>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e147      	b.n	800132a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d106      	bne.n	80010b4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fc74 	bl	800099c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	699a      	ldr	r2, [r3, #24]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0210 	bic.w	r2, r2, #16
 80010c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c4:	f7ff fed2 	bl	8000e6c <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ca:	e012      	b.n	80010f2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010cc:	f7ff fece 	bl	8000e6c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d90b      	bls.n	80010f2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e11b      	b.n	800132a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d0e5      	beq.n	80010cc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	699a      	ldr	r2, [r3, #24]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001110:	f7ff feac 	bl	8000e6c <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001116:	e012      	b.n	800113e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001118:	f7ff fea8 	bl	8000e6c <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d90b      	bls.n	800113e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2203      	movs	r2, #3
 8001136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0f5      	b.n	800132a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0e5      	beq.n	8001118 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	699a      	ldr	r2, [r3, #24]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0202 	orr.w	r2, r2, #2
 800115a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a74      	ldr	r2, [pc, #464]	@ (8001334 <HAL_FDCAN_Init+0x2ac>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d103      	bne.n	800116e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001166:	4a74      	ldr	r2, [pc, #464]	@ (8001338 <HAL_FDCAN_Init+0x2b0>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7c1b      	ldrb	r3, [r3, #16]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d108      	bne.n	8001188 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001184:	619a      	str	r2, [r3, #24]
 8001186:	e007      	b.n	8001198 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699a      	ldr	r2, [r3, #24]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001196:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7c5b      	ldrb	r3, [r3, #17]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d108      	bne.n	80011b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	699a      	ldr	r2, [r3, #24]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	e007      	b.n	80011c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7c9b      	ldrb	r3, [r3, #18]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d108      	bne.n	80011dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	699a      	ldr	r2, [r3, #24]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011d8:	619a      	str	r2, [r3, #24]
 80011da:	e007      	b.n	80011ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80011ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	699a      	ldr	r2, [r3, #24]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001210:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0210 	bic.w	r2, r2, #16
 8001220:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d108      	bne.n	800123c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	699a      	ldr	r2, [r3, #24]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0204 	orr.w	r2, r2, #4
 8001238:	619a      	str	r2, [r3, #24]
 800123a:	e02c      	b.n	8001296 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d028      	beq.n	8001296 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d01c      	beq.n	8001286 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800125a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0210 	orr.w	r2, r2, #16
 800126a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d110      	bne.n	8001296 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0220 	orr.w	r2, r2, #32
 8001282:	619a      	str	r2, [r3, #24]
 8001284:	e007      	b.n	8001296 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0220 	orr.w	r2, r2, #32
 8001294:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	3b01      	subs	r3, #1
 800129c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012a6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012ae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012be:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012c0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012ca:	d115      	bne.n	80012f8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d6:	3b01      	subs	r3, #1
 80012d8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012da:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	3b01      	subs	r3, #1
 80012e2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012e4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	3b01      	subs	r3, #1
 80012ee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012f4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012f6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fb56 	bl	80019c0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40006400 	.word	0x40006400
 8001338:	40006500 	.word	0x40006500

0800133c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800134c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d002      	beq.n	800135a <HAL_FDCAN_ConfigFilter+0x1e>
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d13d      	bne.n	80013d6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d119      	bne.n	8001396 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800136e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001376:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e01d      	b.n	80013d2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	075a      	lsls	r2, r3, #29
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	079a      	lsls	r2, r3, #30
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4413      	add	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3304      	adds	r3, #4
 80013ca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e006      	b.n	80013e4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013da:	f043 0202 	orr.w	r2, r3, #2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
  }
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d110      	bne.n	8001426 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e006      	b.n	8001434 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142a:	f043 0204 	orr.w	r2, r3, #4
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
  }
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001440:	b480      	push	{r7}
 8001442:	b08b      	sub	sp, #44	@ 0x2c
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001458:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800145a:	7efb      	ldrb	r3, [r7, #27]
 800145c:	2b02      	cmp	r3, #2
 800145e:	f040 80e8 	bne.w	8001632 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2b40      	cmp	r3, #64	@ 0x40
 8001466:	d137      	bne.n	80014d8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	2b00      	cmp	r3, #0
 8001476:	d107      	bne.n	8001488 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0db      	b.n	8001640 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001490:	0e1b      	lsrs	r3, r3, #24
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b01      	cmp	r3, #1
 8001498:	d10a      	bne.n	80014b0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014a2:	0a5b      	lsrs	r3, r3, #9
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	4413      	add	r3, r2
 80014c2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d6:	e036      	b.n	8001546 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d107      	bne.n	80014f8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0a3      	b.n	8001640 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001500:	0e1b      	lsrs	r3, r3, #24
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b01      	cmp	r3, #1
 8001508:	d10a      	bne.n	8001520 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800151c:	2301      	movs	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	4413      	add	r3, r2
 8001532:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d107      	bne.n	800156a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e005      	b.n	8001576 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	3304      	adds	r3, #4
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	b29a      	uxth	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	0c1b      	lsrs	r3, r3, #16
 80015a4:	f003 020f 	and.w	r2, r3, #15
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0e1b      	lsrs	r3, r3, #24
 80015ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0fda      	lsrs	r2, r3, #31
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	3304      	adds	r3, #4
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
 80015ea:	e00a      	b.n	8001602 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	441a      	add	r2, r3
 80015f2:	6839      	ldr	r1, [r7, #0]
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	440b      	add	r3, r1
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	3301      	adds	r3, #1
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	4a11      	ldr	r2, [pc, #68]	@ (800164c <HAL_FDCAN_GetRxMessage+0x20c>)
 8001608:	5cd3      	ldrb	r3, [r2, r3]
 800160a:	461a      	mov	r2, r3
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	4293      	cmp	r3, r2
 8001610:	d3ec      	bcc.n	80015ec <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2b40      	cmp	r3, #64	@ 0x40
 8001616:	d105      	bne.n	8001624 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001622:	e004      	b.n	800162e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e006      	b.n	8001640 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001636:	f043 0208 	orr.w	r2, r3, #8
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
  }
}
 8001640:	4618      	mov	r0, r3
 8001642:	372c      	adds	r7, #44	@ 0x2c
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	08007d3c 	.word	0x08007d3c

08001650 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b40      	cmp	r3, #64	@ 0x40
 800165e:	d107      	bne.n	8001670 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e006      	b.n	800167e <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	@ 0x30
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800169a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016a8:	4013      	ands	r3, r2
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016c0:	4013      	ands	r3, r2
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d8:	4013      	ands	r3, r2
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016e2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80016e6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ee:	6a3a      	ldr	r2, [r7, #32]
 80016f0:	4013      	ands	r3, r2
 80016f2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016fe:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	4013      	ands	r3, r2
 800170a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001712:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800171a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2240      	movs	r2, #64	@ 0x40
 8001736:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f921 	bl	8001980 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d019      	beq.n	800177c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d014      	beq.n	800177c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800175a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001772:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001774:	6939      	ldr	r1, [r7, #16]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f8e3 	bl	8001942 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800177c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001788:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800178a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f8a2 	bl	80018d6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800179e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80017a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f8a2 	bl	80018ec <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80017b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f8a2 	bl	8001902 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00c      	beq.n	80017e2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f89b 	bl	8001918 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d018      	beq.n	800181e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d013      	beq.n	800181e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017fe:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4013      	ands	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2280      	movs	r2, #128	@ 0x80
 8001814:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001816:	68f9      	ldr	r1, [r7, #12]
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f887 	bl	800192c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00c      	beq.n	8001842 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800183a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f88b 	bl	8001958 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00c      	beq.n	8001866 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800185e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f883 	bl	800196c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00f      	beq.n	8001890 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00a      	beq.n	8001890 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001882:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001888:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d007      	beq.n	80018a6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800189e:	69f9      	ldr	r1, [r7, #28]
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f881 	bl	80019a8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6a3a      	ldr	r2, [r7, #32]
 80018b2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f863 	bl	8001994 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80018ce:	bf00      	nop
 80018d0:	3730      	adds	r7, #48	@ 0x30
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80019c8:	4b30      	ldr	r3, [pc, #192]	@ (8001a8c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80019ca:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001a90 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d103      	bne.n	80019de <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80019dc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001a94 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d103      	bne.n	80019f0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80019ee:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019fe:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a06:	041a      	lsls	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a24:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a2c:	061a      	lsls	r2, r3, #24
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e005      	b.n	8001a72 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d3f3      	bcc.n	8001a66 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	4000a400 	.word	0x4000a400
 8001a90:	40006800 	.word	0x40006800
 8001a94:	40006c00 	.word	0x40006c00

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001aa6:	e15a      	b.n	8001d5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2101      	movs	r1, #1
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 814c 	beq.w	8001d58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d005      	beq.n	8001ad8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d130      	bne.n	8001b3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b0e:	2201      	movs	r2, #1
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	f003 0201 	and.w	r2, r3, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d017      	beq.n	8001b76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d123      	bne.n	8001bca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	08da      	lsrs	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3208      	adds	r2, #8
 8001b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	08da      	lsrs	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3208      	adds	r2, #8
 8001bc4:	6939      	ldr	r1, [r7, #16]
 8001bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0203 	and.w	r2, r3, #3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 80a6 	beq.w	8001d58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8001d7c <HAL_GPIO_Init+0x2e4>)
 8001c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c10:	4a5a      	ldr	r2, [pc, #360]	@ (8001d7c <HAL_GPIO_Init+0x2e4>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c18:	4b58      	ldr	r3, [pc, #352]	@ (8001d7c <HAL_GPIO_Init+0x2e4>)
 8001c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c24:	4a56      	ldr	r2, [pc, #344]	@ (8001d80 <HAL_GPIO_Init+0x2e8>)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c4e:	d01f      	beq.n	8001c90 <HAL_GPIO_Init+0x1f8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a4c      	ldr	r2, [pc, #304]	@ (8001d84 <HAL_GPIO_Init+0x2ec>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d019      	beq.n	8001c8c <HAL_GPIO_Init+0x1f4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d88 <HAL_GPIO_Init+0x2f0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d013      	beq.n	8001c88 <HAL_GPIO_Init+0x1f0>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a4a      	ldr	r2, [pc, #296]	@ (8001d8c <HAL_GPIO_Init+0x2f4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d00d      	beq.n	8001c84 <HAL_GPIO_Init+0x1ec>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a49      	ldr	r2, [pc, #292]	@ (8001d90 <HAL_GPIO_Init+0x2f8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d007      	beq.n	8001c80 <HAL_GPIO_Init+0x1e8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a48      	ldr	r2, [pc, #288]	@ (8001d94 <HAL_GPIO_Init+0x2fc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d101      	bne.n	8001c7c <HAL_GPIO_Init+0x1e4>
 8001c78:	2305      	movs	r3, #5
 8001c7a:	e00a      	b.n	8001c92 <HAL_GPIO_Init+0x1fa>
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	e008      	b.n	8001c92 <HAL_GPIO_Init+0x1fa>
 8001c80:	2304      	movs	r3, #4
 8001c82:	e006      	b.n	8001c92 <HAL_GPIO_Init+0x1fa>
 8001c84:	2303      	movs	r3, #3
 8001c86:	e004      	b.n	8001c92 <HAL_GPIO_Init+0x1fa>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x1fa>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_GPIO_Init+0x1fa>
 8001c90:	2300      	movs	r3, #0
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca2:	4937      	ldr	r1, [pc, #220]	@ (8001d80 <HAL_GPIO_Init+0x2e8>)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb0:	4b39      	ldr	r3, [pc, #228]	@ (8001d98 <HAL_GPIO_Init+0x300>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cd4:	4a30      	ldr	r2, [pc, #192]	@ (8001d98 <HAL_GPIO_Init+0x300>)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cda:	4b2f      	ldr	r3, [pc, #188]	@ (8001d98 <HAL_GPIO_Init+0x300>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cfe:	4a26      	ldr	r2, [pc, #152]	@ (8001d98 <HAL_GPIO_Init+0x300>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <HAL_GPIO_Init+0x300>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d28:	4a1b      	ldr	r2, [pc, #108]	@ (8001d98 <HAL_GPIO_Init+0x300>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <HAL_GPIO_Init+0x300>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d52:	4a11      	ldr	r2, [pc, #68]	@ (8001d98 <HAL_GPIO_Init+0x300>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f ae9d 	bne.w	8001aa8 <HAL_GPIO_Init+0x10>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	48000400 	.word	0x48000400
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	48000c00 	.word	0x48000c00
 8001d90:	48001000 	.word	0x48001000
 8001d94:	48001400 	.word	0x48001400
 8001d98:	40010400 	.word	0x40010400

08001d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]
 8001da8:	4613      	mov	r3, r2
 8001daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dac:	787b      	ldrb	r3, [r7, #1]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43d9      	mvns	r1, r3
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	400b      	ands	r3, r1
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d141      	bne.n	8001e92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e1a:	d131      	bne.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e1c:	4b47      	ldr	r3, [pc, #284]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e22:	4a46      	ldr	r2, [pc, #280]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e2c:	4b43      	ldr	r3, [pc, #268]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e34:	4a41      	ldr	r2, [pc, #260]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e3c:	4b40      	ldr	r3, [pc, #256]	@ (8001f40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2232      	movs	r2, #50	@ 0x32
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	4a3f      	ldr	r2, [pc, #252]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	0c9b      	lsrs	r3, r3, #18
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e52:	e002      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e5a:	4b38      	ldr	r3, [pc, #224]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e66:	d102      	bne.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f2      	bne.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e6e:	4b33      	ldr	r3, [pc, #204]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e7a:	d158      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e057      	b.n	8001f30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e80:	4b2e      	ldr	r3, [pc, #184]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e86:	4a2d      	ldr	r2, [pc, #180]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e90:	e04d      	b.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e98:	d141      	bne.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9a:	4b28      	ldr	r3, [pc, #160]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea6:	d131      	bne.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ea8:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eae:	4a23      	ldr	r2, [pc, #140]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb8:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2232      	movs	r2, #50	@ 0x32
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	0c9b      	lsrs	r3, r3, #18
 8001eda:	3301      	adds	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ede:	e002      	b.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef2:	d102      	bne.n	8001efa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f2      	bne.n	8001ee0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f06:	d112      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e011      	b.n	8001f30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f12:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f1c:	e007      	b.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f1e:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f26:	4a05      	ldr	r2, [pc, #20]	@ (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83

08001f48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f56:	6093      	str	r3, [r2, #8]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40007000 	.word	0x40007000

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e2fe      	b.n	8002578 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d075      	beq.n	8002072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f86:	4b97      	ldr	r3, [pc, #604]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f90:	4b94      	ldr	r3, [pc, #592]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d102      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3e>
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d002      	beq.n	8001fac <HAL_RCC_OscConfig+0x44>
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d10b      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	4b8d      	ldr	r3, [pc, #564]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d05b      	beq.n	8002070 <HAL_RCC_OscConfig+0x108>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d157      	bne.n	8002070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e2d9      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x74>
 8001fce:	4b85      	ldr	r3, [pc, #532]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a84      	ldr	r2, [pc, #528]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e01d      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x98>
 8001fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7e      	ldr	r2, [pc, #504]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a7b      	ldr	r2, [pc, #492]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8002000:	4b78      	ldr	r3, [pc, #480]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a77      	ldr	r2, [pc, #476]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b75      	ldr	r3, [pc, #468]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a74      	ldr	r2, [pc, #464]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d013      	beq.n	8002048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe ff24 	bl	8000e6c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002028:	f7fe ff20 	bl	8000e6c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	@ 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e29e      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203a:	4b6a      	ldr	r3, [pc, #424]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0xc0>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7fe ff10 	bl	8000e6c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7fe ff0c 	bl	8000e6c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	@ 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e28a      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002062:	4b60      	ldr	r3, [pc, #384]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0xe8>
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d075      	beq.n	800216a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207e:	4b59      	ldr	r3, [pc, #356]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002088:	4b56      	ldr	r3, [pc, #344]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b0c      	cmp	r3, #12
 8002096:	d102      	bne.n	800209e <HAL_RCC_OscConfig+0x136>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_OscConfig+0x13c>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d11f      	bne.n	80020e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a4:	4b4f      	ldr	r3, [pc, #316]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_OscConfig+0x154>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e25d      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b49      	ldr	r3, [pc, #292]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	4946      	ldr	r1, [pc, #280]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020d0:	4b45      	ldr	r3, [pc, #276]	@ (80021e8 <HAL_RCC_OscConfig+0x280>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fd35 	bl	8000b44 <HAL_InitTick>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d043      	beq.n	8002168 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e249      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d023      	beq.n	8002134 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	4b3d      	ldr	r3, [pc, #244]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a3c      	ldr	r2, [pc, #240]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe feb8 	bl	8000e6c <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002100:	f7fe feb4 	bl	8000e6c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e232      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002112:	4b34      	ldr	r3, [pc, #208]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	492d      	ldr	r1, [pc, #180]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
 8002132:	e01a      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002134:	4b2b      	ldr	r3, [pc, #172]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2a      	ldr	r2, [pc, #168]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800213a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800213e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe fe94 	bl	8000e6c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7fe fe90 	bl	8000e6c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e20e      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800215a:	4b22      	ldr	r3, [pc, #136]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1e0>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d041      	beq.n	80021fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01c      	beq.n	80021b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002184:	4a17      	ldr	r2, [pc, #92]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218e:	f7fe fe6d 	bl	8000e6c <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002196:	f7fe fe69 	bl	8000e6c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1e7      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a8:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0ef      	beq.n	8002196 <HAL_RCC_OscConfig+0x22e>
 80021b6:	e020      	b.n	80021fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b8:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80021ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021be:	4a09      	ldr	r2, [pc, #36]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7fe fe50 	bl	8000e6c <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ce:	e00d      	b.n	80021ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d0:	f7fe fe4c 	bl	8000e6c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d906      	bls.n	80021ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1ca      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ea      	bne.n	80021d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80a6 	beq.w	8002354 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800220c:	4b84      	ldr	r3, [pc, #528]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_OscConfig+0x2b4>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x2b6>
 800221c:	2300      	movs	r3, #0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00d      	beq.n	800223e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4b7f      	ldr	r3, [pc, #508]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002226:	4a7e      	ldr	r2, [pc, #504]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800222c:	6593      	str	r3, [r2, #88]	@ 0x58
 800222e:	4b7c      	ldr	r3, [pc, #496]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800223a:	2301      	movs	r3, #1
 800223c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223e:	4b79      	ldr	r3, [pc, #484]	@ (8002424 <HAL_RCC_OscConfig+0x4bc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d118      	bne.n	800227c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800224a:	4b76      	ldr	r3, [pc, #472]	@ (8002424 <HAL_RCC_OscConfig+0x4bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a75      	ldr	r2, [pc, #468]	@ (8002424 <HAL_RCC_OscConfig+0x4bc>)
 8002250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002256:	f7fe fe09 	bl	8000e6c <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7fe fe05 	bl	8000e6c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e183      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002270:	4b6c      	ldr	r3, [pc, #432]	@ (8002424 <HAL_RCC_OscConfig+0x4bc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d108      	bne.n	8002296 <HAL_RCC_OscConfig+0x32e>
 8002284:	4b66      	ldr	r3, [pc, #408]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228a:	4a65      	ldr	r2, [pc, #404]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002294:	e024      	b.n	80022e0 <HAL_RCC_OscConfig+0x378>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b05      	cmp	r3, #5
 800229c:	d110      	bne.n	80022c0 <HAL_RCC_OscConfig+0x358>
 800229e:	4b60      	ldr	r3, [pc, #384]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a4:	4a5e      	ldr	r2, [pc, #376]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022be:	e00f      	b.n	80022e0 <HAL_RCC_OscConfig+0x378>
 80022c0:	4b57      	ldr	r3, [pc, #348]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c6:	4a56      	ldr	r2, [pc, #344]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022d0:	4b53      	ldr	r3, [pc, #332]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d6:	4a52      	ldr	r2, [pc, #328]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d016      	beq.n	8002316 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7fe fdc0 	bl	8000e6c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7fe fdbc 	bl	8000e6c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e138      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002306:	4b46      	ldr	r3, [pc, #280]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ed      	beq.n	80022f0 <HAL_RCC_OscConfig+0x388>
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe fda9 	bl	8000e6c <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fda5 	bl	8000e6c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e121      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002334:	4b3a      	ldr	r3, [pc, #232]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ed      	bne.n	800231e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002342:	7ffb      	ldrb	r3, [r7, #31]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d105      	bne.n	8002354 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002348:	4b35      	ldr	r3, [pc, #212]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234c:	4a34      	ldr	r2, [pc, #208]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 800234e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002352:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d03c      	beq.n	80023da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002368:	4b2d      	ldr	r3, [pc, #180]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 800236a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800236e:	4a2c      	ldr	r2, [pc, #176]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fd78 	bl	8000e6c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002380:	f7fe fd74 	bl	8000e6c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e0f2      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002392:	4b23      	ldr	r3, [pc, #140]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002394:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ef      	beq.n	8002380 <HAL_RCC_OscConfig+0x418>
 80023a0:	e01b      	b.n	80023da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80023a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe fd5b 	bl	8000e6c <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ba:	f7fe fd57 	bl	8000e6c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e0d5      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023cc:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80023ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ef      	bne.n	80023ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80c9 	beq.w	8002576 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	f000 8083 	beq.w	80024f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d15e      	bne.n	80024b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fa:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a08      	ldr	r2, [pc, #32]	@ (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002400:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fd31 	bl	8000e6c <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240c:	e00c      	b.n	8002428 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240e:	f7fe fd2d 	bl	8000e6c <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d905      	bls.n	8002428 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0ab      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002428:	4b55      	ldr	r3, [pc, #340]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ec      	bne.n	800240e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002434:	4b52      	ldr	r3, [pc, #328]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	4b52      	ldr	r3, [pc, #328]	@ (8002584 <HAL_RCC_OscConfig+0x61c>)
 800243a:	4013      	ands	r3, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6a11      	ldr	r1, [r2, #32]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002444:	3a01      	subs	r2, #1
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	4311      	orrs	r1, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800244e:	0212      	lsls	r2, r2, #8
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002456:	0852      	lsrs	r2, r2, #1
 8002458:	3a01      	subs	r2, #1
 800245a:	0552      	lsls	r2, r2, #21
 800245c:	4311      	orrs	r1, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002462:	0852      	lsrs	r2, r2, #1
 8002464:	3a01      	subs	r2, #1
 8002466:	0652      	lsls	r2, r2, #25
 8002468:	4311      	orrs	r1, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800246e:	06d2      	lsls	r2, r2, #27
 8002470:	430a      	orrs	r2, r1
 8002472:	4943      	ldr	r1, [pc, #268]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 8002474:	4313      	orrs	r3, r2
 8002476:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002478:	4b41      	ldr	r3, [pc, #260]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a40      	ldr	r2, [pc, #256]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 800247e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002482:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002484:	4b3e      	ldr	r3, [pc, #248]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a3d      	ldr	r2, [pc, #244]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800248e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fcec 	bl	8000e6c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fce8 	bl	8000e6c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e066      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024aa:	4b35      	ldr	r3, [pc, #212]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x530>
 80024b6:	e05e      	b.n	8002576 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b31      	ldr	r3, [pc, #196]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a30      	ldr	r2, [pc, #192]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 80024be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fcd2 	bl	8000e6c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe fcce 	bl	8000e6c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e04c      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024de:	4b28      	ldr	r3, [pc, #160]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024ea:	4b25      	ldr	r3, [pc, #148]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	4924      	ldr	r1, [pc, #144]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 80024f0:	4b25      	ldr	r3, [pc, #148]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	60cb      	str	r3, [r1, #12]
 80024f6:	e03e      	b.n	8002576 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e039      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002504:	4b1e      	ldr	r3, [pc, #120]	@ (8002580 <HAL_RCC_OscConfig+0x618>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	429a      	cmp	r2, r3
 8002516:	d12c      	bne.n	8002572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	3b01      	subs	r3, #1
 8002524:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d123      	bne.n	8002572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d11b      	bne.n	8002572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d113      	bne.n	8002572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	3b01      	subs	r3, #1
 8002558:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d109      	bne.n	8002572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	3b01      	subs	r3, #1
 800256c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	019f800c 	.word	0x019f800c
 8002588:	feeefffc 	.word	0xfeeefffc

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e11e      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b91      	ldr	r3, [pc, #580]	@ (80027ec <HAL_RCC_ClockConfig+0x260>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d910      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b8e      	ldr	r3, [pc, #568]	@ (80027ec <HAL_RCC_ClockConfig+0x260>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 020f 	bic.w	r2, r3, #15
 80025ba:	498c      	ldr	r1, [pc, #560]	@ (80027ec <HAL_RCC_ClockConfig+0x260>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b8a      	ldr	r3, [pc, #552]	@ (80027ec <HAL_RCC_ClockConfig+0x260>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e106      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d073      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d129      	bne.n	800263c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e8:	4b81      	ldr	r3, [pc, #516]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0f4      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025f8:	f000 f9d0 	bl	800299c <RCC_GetSysClockFreqFromPLLSource>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4a7c      	ldr	r2, [pc, #496]	@ (80027f4 <HAL_RCC_ClockConfig+0x268>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d93f      	bls.n	8002686 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002606:	4b7a      	ldr	r3, [pc, #488]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800261a:	2b00      	cmp	r3, #0
 800261c:	d033      	beq.n	8002686 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002622:	2b00      	cmp	r3, #0
 8002624:	d12f      	bne.n	8002686 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002626:	4b72      	ldr	r3, [pc, #456]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800262e:	4a70      	ldr	r2, [pc, #448]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002634:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002636:	2380      	movs	r3, #128	@ 0x80
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e024      	b.n	8002686 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d107      	bne.n	8002654 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002644:	4b6a      	ldr	r3, [pc, #424]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0c6      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002654:	4b66      	ldr	r3, [pc, #408]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0be      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002664:	f000 f8ce 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 8002668:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4a61      	ldr	r2, [pc, #388]	@ (80027f4 <HAL_RCC_ClockConfig+0x268>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d909      	bls.n	8002686 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002672:	4b5f      	ldr	r3, [pc, #380]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800267a:	4a5d      	ldr	r2, [pc, #372]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 800267c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002680:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002682:	2380      	movs	r3, #128	@ 0x80
 8002684:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b5a      	ldr	r3, [pc, #360]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4957      	ldr	r1, [pc, #348]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002698:	f7fe fbe8 	bl	8000e6c <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fbe4 	bl	8000e6c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e095      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b4e      	ldr	r3, [pc, #312]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d023      	beq.n	800271c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e0:	4b43      	ldr	r3, [pc, #268]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a42      	ldr	r2, [pc, #264]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80026e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026f8:	4b3d      	ldr	r3, [pc, #244]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002700:	4a3b      	ldr	r2, [pc, #236]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002702:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002706:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b39      	ldr	r3, [pc, #228]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4936      	ldr	r1, [pc, #216]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
 800271a:	e008      	b.n	800272e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b80      	cmp	r3, #128	@ 0x80
 8002720:	d105      	bne.n	800272e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002722:	4b33      	ldr	r3, [pc, #204]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4a32      	ldr	r2, [pc, #200]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002728:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800272c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800272e:	4b2f      	ldr	r3, [pc, #188]	@ (80027ec <HAL_RCC_ClockConfig+0x260>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d21d      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273c:	4b2b      	ldr	r3, [pc, #172]	@ (80027ec <HAL_RCC_ClockConfig+0x260>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 020f 	bic.w	r2, r3, #15
 8002744:	4929      	ldr	r1, [pc, #164]	@ (80027ec <HAL_RCC_ClockConfig+0x260>)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800274c:	f7fe fb8e 	bl	8000e6c <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe fb8a 	bl	8000e6c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e03b      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b20      	ldr	r3, [pc, #128]	@ (80027ec <HAL_RCC_ClockConfig+0x260>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d1ed      	bne.n	8002754 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4917      	ldr	r1, [pc, #92]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	490f      	ldr	r1, [pc, #60]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027b6:	f000 f825 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	490c      	ldr	r1, [pc, #48]	@ (80027f8 <HAL_RCC_ClockConfig+0x26c>)
 80027c8:	5ccb      	ldrb	r3, [r1, r3]
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	fa22 f303 	lsr.w	r3, r2, r3
 80027d2:	4a0a      	ldr	r2, [pc, #40]	@ (80027fc <HAL_RCC_ClockConfig+0x270>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <HAL_RCC_ClockConfig+0x274>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe f9b2 	bl	8000b44 <HAL_InitTick>
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40021000 	.word	0x40021000
 80027f4:	04c4b400 	.word	0x04c4b400
 80027f8:	08007d24 	.word	0x08007d24
 80027fc:	20000000 	.word	0x20000000
 8002800:	20000004 	.word	0x20000004

08002804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800280a:	4b2c      	ldr	r3, [pc, #176]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d102      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002816:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	e047      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800281c:	4b27      	ldr	r3, [pc, #156]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b08      	cmp	r3, #8
 8002826:	d102      	bne.n	800282e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002828:	4b26      	ldr	r3, [pc, #152]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	e03e      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800282e:	4b23      	ldr	r3, [pc, #140]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d136      	bne.n	80028a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800283a:	4b20      	ldr	r3, [pc, #128]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002844:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3301      	adds	r3, #1
 8002850:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d10c      	bne.n	8002872 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002858:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	4a16      	ldr	r2, [pc, #88]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002862:	68d2      	ldr	r2, [r2, #12]
 8002864:	0a12      	lsrs	r2, r2, #8
 8002866:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
      break;
 8002870:	e00c      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002872:	4a13      	ldr	r2, [pc, #76]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	4a10      	ldr	r2, [pc, #64]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800287c:	68d2      	ldr	r2, [r2, #12]
 800287e:	0a12      	lsrs	r2, r2, #8
 8002880:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002884:	fb02 f303 	mul.w	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
      break;
 800288a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0e5b      	lsrs	r3, r3, #25
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	3301      	adds	r3, #1
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	e001      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028ac:	693b      	ldr	r3, [r7, #16]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	00f42400 	.word	0x00f42400
 80028c4:	016e3600 	.word	0x016e3600

080028c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028cc:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000000 	.word	0x20000000

080028e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028e4:	f7ff fff0 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4904      	ldr	r1, [pc, #16]	@ (8002908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	08007d34 	.word	0x08007d34

0800290c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002910:	f7ff ffda 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	0adb      	lsrs	r3, r3, #11
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	4904      	ldr	r1, [pc, #16]	@ (8002934 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002922:	5ccb      	ldrb	r3, [r1, r3]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	08007d34 	.word	0x08007d34

08002938 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	220f      	movs	r2, #15
 8002946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002948:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002954:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800296c:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800297a:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <HAL_RCC_GetClockConfig+0x60>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 020f 	and.w	r2, r3, #15
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	601a      	str	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	40022000 	.word	0x40022000

0800299c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029a2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3301      	adds	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d10c      	bne.n	80029da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029c0:	4a17      	ldr	r2, [pc, #92]	@ (8002a20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	4a14      	ldr	r2, [pc, #80]	@ (8002a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029ca:	68d2      	ldr	r2, [r2, #12]
 80029cc:	0a12      	lsrs	r2, r2, #8
 80029ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	617b      	str	r3, [r7, #20]
    break;
 80029d8:	e00c      	b.n	80029f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029da:	4a12      	ldr	r2, [pc, #72]	@ (8002a24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4a0e      	ldr	r2, [pc, #56]	@ (8002a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029e4:	68d2      	ldr	r2, [r2, #12]
 80029e6:	0a12      	lsrs	r2, r2, #8
 80029e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
    break;
 80029f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029f4:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	0e5b      	lsrs	r3, r3, #25
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a0e:	687b      	ldr	r3, [r7, #4]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	016e3600 	.word	0x016e3600
 8002a24:	00f42400 	.word	0x00f42400

08002a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a30:	2300      	movs	r3, #0
 8002a32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a34:	2300      	movs	r3, #0
 8002a36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8098 	beq.w	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4a:	4b43      	ldr	r3, [pc, #268]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10d      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	4b40      	ldr	r3, [pc, #256]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a62:	4b3d      	ldr	r3, [pc, #244]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a72:	4b3a      	ldr	r3, [pc, #232]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a39      	ldr	r2, [pc, #228]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a7e:	f7fe f9f5 	bl	8000e6c <HAL_GetTick>
 8002a82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a84:	e009      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a86:	f7fe f9f1 	bl	8000e6c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d902      	bls.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	74fb      	strb	r3, [r7, #19]
        break;
 8002a98:	e005      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a9a:	4b30      	ldr	r3, [pc, #192]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0ef      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d159      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aac:	4b2a      	ldr	r3, [pc, #168]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01e      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d019      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ac8:	4b23      	ldr	r3, [pc, #140]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ad2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ad4:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ada:	4a1f      	ldr	r2, [pc, #124]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aea:	4a1b      	ldr	r2, [pc, #108]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002af4:	4a18      	ldr	r2, [pc, #96]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe f9b1 	bl	8000e6c <HAL_GetTick>
 8002b0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0c:	e00b      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe f9ad 	bl	8000e6c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d902      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	74fb      	strb	r3, [r7, #19]
            break;
 8002b24:	e006      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b26:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ec      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10b      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b3a:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b48:	4903      	ldr	r1, [pc, #12]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b50:	e008      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b52:	7cfb      	ldrb	r3, [r7, #19]
 8002b54:	74bb      	strb	r3, [r7, #18]
 8002b56:	e005      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b64:	7c7b      	ldrb	r3, [r7, #17]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4ba7      	ldr	r3, [pc, #668]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6e:	4aa6      	ldr	r2, [pc, #664]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b82:	4ba1      	ldr	r3, [pc, #644]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b88:	f023 0203 	bic.w	r2, r3, #3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	499d      	ldr	r1, [pc, #628]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ba4:	4b98      	ldr	r3, [pc, #608]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002baa:	f023 020c 	bic.w	r2, r3, #12
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	4995      	ldr	r1, [pc, #596]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bc6:	4b90      	ldr	r3, [pc, #576]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bcc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	498c      	ldr	r1, [pc, #560]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002be8:	4b87      	ldr	r3, [pc, #540]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	4984      	ldr	r1, [pc, #528]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	497b      	ldr	r1, [pc, #492]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c2c:	4b76      	ldr	r3, [pc, #472]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	4973      	ldr	r1, [pc, #460]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c4e:	4b6e      	ldr	r3, [pc, #440]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	496a      	ldr	r1, [pc, #424]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c70:	4b65      	ldr	r3, [pc, #404]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4962      	ldr	r1, [pc, #392]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c92:	4b5d      	ldr	r3, [pc, #372]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	4959      	ldr	r1, [pc, #356]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cb4:	4b54      	ldr	r3, [pc, #336]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	4951      	ldr	r1, [pc, #324]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	4948      	ldr	r1, [pc, #288]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cf8:	4b43      	ldr	r3, [pc, #268]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	4940      	ldr	r1, [pc, #256]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d16:	d105      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d18:	4b3b      	ldr	r3, [pc, #236]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d22:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d30:	4b35      	ldr	r3, [pc, #212]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3e:	4932      	ldr	r1, [pc, #200]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d50:	4b2d      	ldr	r3, [pc, #180]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a2c      	ldr	r2, [pc, #176]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d5a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d015      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d68:	4b27      	ldr	r3, [pc, #156]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	4924      	ldr	r1, [pc, #144]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d86:	d105      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d88:	4b1f      	ldr	r3, [pc, #124]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da0:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dae:	4916      	ldr	r1, [pc, #88]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a10      	ldr	r2, [pc, #64]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d019      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	4908      	ldr	r1, [pc, #32]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002df6:	d109      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df8:	4b03      	ldr	r3, [pc, #12]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a02      	ldr	r2, [pc, #8]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e02:	60d3      	str	r3, [r2, #12]
 8002e04:	e002      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e18:	4b29      	ldr	r3, [pc, #164]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e26:	4926      	ldr	r1, [pc, #152]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e36:	d105      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e38:	4b21      	ldr	r3, [pc, #132]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a20      	ldr	r2, [pc, #128]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e42:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d015      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e50:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e5e:	4918      	ldr	r1, [pc, #96]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e70:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a12      	ldr	r2, [pc, #72]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d015      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e88:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e96:	490a      	ldr	r1, [pc, #40]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a04      	ldr	r2, [pc, #16]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002eb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e049      	b.n	8002f6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f841 	bl	8002f72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3304      	adds	r3, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f000 fa30 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d001      	beq.n	8002fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e054      	b.n	800304a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a26      	ldr	r2, [pc, #152]	@ (8003058 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d022      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fca:	d01d      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	@ (800305c <HAL_TIM_Base_Start_IT+0xd4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d018      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a21      	ldr	r2, [pc, #132]	@ (8003060 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d013      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00e      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1e      	ldr	r2, [pc, #120]	@ (8003068 <HAL_TIM_Base_Start_IT+0xe0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d009      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800306c <HAL_TIM_Base_Start_IT+0xe4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d004      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1b      	ldr	r2, [pc, #108]	@ (8003070 <HAL_TIM_Base_Start_IT+0xe8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d115      	bne.n	8003034 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <HAL_TIM_Base_Start_IT+0xec>)
 8003010:	4013      	ands	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b06      	cmp	r3, #6
 8003018:	d015      	beq.n	8003046 <HAL_TIM_Base_Start_IT+0xbe>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003020:	d011      	beq.n	8003046 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003032:	e008      	b.n	8003046 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e000      	b.n	8003048 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003046:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40013400 	.word	0x40013400
 800306c:	40014000 	.word	0x40014000
 8003070:	40015000 	.word	0x40015000
 8003074:	00010007 	.word	0x00010007

08003078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d020      	beq.n	80030dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01b      	beq.n	80030dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0202 	mvn.w	r2, #2
 80030ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f931 	bl	800332a <HAL_TIM_IC_CaptureCallback>
 80030c8:	e005      	b.n	80030d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f923 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f934 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d020      	beq.n	8003128 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01b      	beq.n	8003128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0204 	mvn.w	r2, #4
 80030f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f90b 	bl	800332a <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f8fd 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f90e 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d020      	beq.n	8003174 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01b      	beq.n	8003174 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0208 	mvn.w	r2, #8
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2204      	movs	r2, #4
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8e5 	bl	800332a <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8d7 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f8e8 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b00      	cmp	r3, #0
 800317c:	d020      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0210 	mvn.w	r2, #16
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2208      	movs	r2, #8
 8003196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8bf 	bl	800332a <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8b1 	bl	8003316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f8c2 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00c      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0201 	mvn.w	r2, #1
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fb92 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d104      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00c      	beq.n	8003212 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800320a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f969 	bl	80034e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00c      	beq.n	8003236 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800322e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f961 	bl	80034f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00c      	beq.n	800325a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f87c 	bl	8003352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00c      	beq.n	800327e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f06f 0220 	mvn.w	r2, #32
 8003276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f929 	bl	80034d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00c      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800329a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f935 	bl	800350c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00c      	beq.n	80032c6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80032be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f92d 	bl	8003520 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00c      	beq.n	80032ea <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80032e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f925 	bl	8003534 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00c      	beq.n	800330e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f91d 	bl	8003548 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a4c      	ldr	r2, [pc, #304]	@ (80034ac <TIM_Base_SetConfig+0x144>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d017      	beq.n	80033b0 <TIM_Base_SetConfig+0x48>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003386:	d013      	beq.n	80033b0 <TIM_Base_SetConfig+0x48>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a49      	ldr	r2, [pc, #292]	@ (80034b0 <TIM_Base_SetConfig+0x148>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00f      	beq.n	80033b0 <TIM_Base_SetConfig+0x48>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a48      	ldr	r2, [pc, #288]	@ (80034b4 <TIM_Base_SetConfig+0x14c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00b      	beq.n	80033b0 <TIM_Base_SetConfig+0x48>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a47      	ldr	r2, [pc, #284]	@ (80034b8 <TIM_Base_SetConfig+0x150>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d007      	beq.n	80033b0 <TIM_Base_SetConfig+0x48>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a46      	ldr	r2, [pc, #280]	@ (80034bc <TIM_Base_SetConfig+0x154>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_Base_SetConfig+0x48>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a45      	ldr	r2, [pc, #276]	@ (80034c0 <TIM_Base_SetConfig+0x158>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d108      	bne.n	80033c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a39      	ldr	r2, [pc, #228]	@ (80034ac <TIM_Base_SetConfig+0x144>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d023      	beq.n	8003412 <TIM_Base_SetConfig+0xaa>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d0:	d01f      	beq.n	8003412 <TIM_Base_SetConfig+0xaa>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a36      	ldr	r2, [pc, #216]	@ (80034b0 <TIM_Base_SetConfig+0x148>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01b      	beq.n	8003412 <TIM_Base_SetConfig+0xaa>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a35      	ldr	r2, [pc, #212]	@ (80034b4 <TIM_Base_SetConfig+0x14c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d017      	beq.n	8003412 <TIM_Base_SetConfig+0xaa>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a34      	ldr	r2, [pc, #208]	@ (80034b8 <TIM_Base_SetConfig+0x150>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <TIM_Base_SetConfig+0xaa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a33      	ldr	r2, [pc, #204]	@ (80034bc <TIM_Base_SetConfig+0x154>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00f      	beq.n	8003412 <TIM_Base_SetConfig+0xaa>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a33      	ldr	r2, [pc, #204]	@ (80034c4 <TIM_Base_SetConfig+0x15c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00b      	beq.n	8003412 <TIM_Base_SetConfig+0xaa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a32      	ldr	r2, [pc, #200]	@ (80034c8 <TIM_Base_SetConfig+0x160>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d007      	beq.n	8003412 <TIM_Base_SetConfig+0xaa>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a31      	ldr	r2, [pc, #196]	@ (80034cc <TIM_Base_SetConfig+0x164>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <TIM_Base_SetConfig+0xaa>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a2c      	ldr	r2, [pc, #176]	@ (80034c0 <TIM_Base_SetConfig+0x158>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d108      	bne.n	8003424 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a18      	ldr	r2, [pc, #96]	@ (80034ac <TIM_Base_SetConfig+0x144>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <TIM_Base_SetConfig+0x110>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a1a      	ldr	r2, [pc, #104]	@ (80034bc <TIM_Base_SetConfig+0x154>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00f      	beq.n	8003478 <TIM_Base_SetConfig+0x110>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a1a      	ldr	r2, [pc, #104]	@ (80034c4 <TIM_Base_SetConfig+0x15c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00b      	beq.n	8003478 <TIM_Base_SetConfig+0x110>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <TIM_Base_SetConfig+0x160>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d007      	beq.n	8003478 <TIM_Base_SetConfig+0x110>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <TIM_Base_SetConfig+0x164>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d003      	beq.n	8003478 <TIM_Base_SetConfig+0x110>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a13      	ldr	r2, [pc, #76]	@ (80034c0 <TIM_Base_SetConfig+0x158>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d103      	bne.n	8003480 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f023 0201 	bic.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]
  }
}
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40000400 	.word	0x40000400
 80034b4:	40000800 	.word	0x40000800
 80034b8:	40000c00 	.word	0x40000c00
 80034bc:	40013400 	.word	0x40013400
 80034c0:	40015000 	.word	0x40015000
 80034c4:	40014000 	.word	0x40014000
 80034c8:	40014400 	.word	0x40014400
 80034cc:	40014800 	.word	0x40014800

080034d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e042      	b.n	80035f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7fd fa87 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2224      	movs	r2, #36	@ 0x24
 800358a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0201 	bic.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fbb2 	bl	8003d10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f8b3 	bl	8003718 <UART_SetConfig>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e01b      	b.n	80035f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fc31 	bl	8003e54 <UART_CheckIdleState>
 80035f2:	4603      	mov	r3, r0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	@ 0x28
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	2b20      	cmp	r3, #32
 8003614:	d17b      	bne.n	800370e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_UART_Transmit+0x26>
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e074      	b.n	8003710 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2221      	movs	r2, #33	@ 0x21
 8003632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003636:	f7fd fc19 	bl	8000e6c <HAL_GetTick>
 800363a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	88fa      	ldrh	r2, [r7, #6]
 8003648:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003654:	d108      	bne.n	8003668 <HAL_UART_Transmit+0x6c>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e003      	b.n	8003670 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003670:	e030      	b.n	80036d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	2180      	movs	r1, #128	@ 0x80
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fc93 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e03d      	b.n	8003710 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	3302      	adds	r3, #2
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	e007      	b.n	80036c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	3301      	adds	r3, #1
 80036c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1c8      	bne.n	8003672 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2200      	movs	r2, #0
 80036e8:	2140      	movs	r1, #64	@ 0x40
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fc5c 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e006      	b.n	8003710 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	e000      	b.n	8003710 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
  }
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800371c:	b08c      	sub	sp, #48	@ 0x30
 800371e:	af00      	add	r7, sp, #0
 8003720:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	431a      	orrs	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	431a      	orrs	r2, r3
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4313      	orrs	r3, r2
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4baa      	ldr	r3, [pc, #680]	@ (80039f0 <UART_SetConfig+0x2d8>)
 8003748:	4013      	ands	r3, r2
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003750:	430b      	orrs	r3, r1
 8003752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a9f      	ldr	r2, [pc, #636]	@ (80039f4 <UART_SetConfig+0x2dc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003780:	4313      	orrs	r3, r2
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800378e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003798:	430b      	orrs	r3, r1
 800379a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a2:	f023 010f 	bic.w	r1, r3, #15
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a90      	ldr	r2, [pc, #576]	@ (80039f8 <UART_SetConfig+0x2e0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d125      	bne.n	8003808 <UART_SetConfig+0xf0>
 80037bc:	4b8f      	ldr	r3, [pc, #572]	@ (80039fc <UART_SetConfig+0x2e4>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d81a      	bhi.n	8003800 <UART_SetConfig+0xe8>
 80037ca:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <UART_SetConfig+0xb8>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037f1 	.word	0x080037f1
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	080037f9 	.word	0x080037f9
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037e6:	e116      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80037e8:	2302      	movs	r3, #2
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ee:	e112      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80037f0:	2304      	movs	r3, #4
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037f6:	e10e      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80037f8:	2308      	movs	r3, #8
 80037fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037fe:	e10a      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003800:	2310      	movs	r3, #16
 8003802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003806:	e106      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a7c      	ldr	r2, [pc, #496]	@ (8003a00 <UART_SetConfig+0x2e8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d138      	bne.n	8003884 <UART_SetConfig+0x16c>
 8003812:	4b7a      	ldr	r3, [pc, #488]	@ (80039fc <UART_SetConfig+0x2e4>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b0c      	cmp	r3, #12
 800381e:	d82d      	bhi.n	800387c <UART_SetConfig+0x164>
 8003820:	a201      	add	r2, pc, #4	@ (adr r2, 8003828 <UART_SetConfig+0x110>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	0800385d 	.word	0x0800385d
 800382c:	0800387d 	.word	0x0800387d
 8003830:	0800387d 	.word	0x0800387d
 8003834:	0800387d 	.word	0x0800387d
 8003838:	0800386d 	.word	0x0800386d
 800383c:	0800387d 	.word	0x0800387d
 8003840:	0800387d 	.word	0x0800387d
 8003844:	0800387d 	.word	0x0800387d
 8003848:	08003865 	.word	0x08003865
 800384c:	0800387d 	.word	0x0800387d
 8003850:	0800387d 	.word	0x0800387d
 8003854:	0800387d 	.word	0x0800387d
 8003858:	08003875 	.word	0x08003875
 800385c:	2300      	movs	r3, #0
 800385e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003862:	e0d8      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003864:	2302      	movs	r3, #2
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800386a:	e0d4      	b.n	8003a16 <UART_SetConfig+0x2fe>
 800386c:	2304      	movs	r3, #4
 800386e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003872:	e0d0      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003874:	2308      	movs	r3, #8
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387a:	e0cc      	b.n	8003a16 <UART_SetConfig+0x2fe>
 800387c:	2310      	movs	r3, #16
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003882:	e0c8      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a5e      	ldr	r2, [pc, #376]	@ (8003a04 <UART_SetConfig+0x2ec>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d125      	bne.n	80038da <UART_SetConfig+0x1c2>
 800388e:	4b5b      	ldr	r3, [pc, #364]	@ (80039fc <UART_SetConfig+0x2e4>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003894:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003898:	2b30      	cmp	r3, #48	@ 0x30
 800389a:	d016      	beq.n	80038ca <UART_SetConfig+0x1b2>
 800389c:	2b30      	cmp	r3, #48	@ 0x30
 800389e:	d818      	bhi.n	80038d2 <UART_SetConfig+0x1ba>
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d00a      	beq.n	80038ba <UART_SetConfig+0x1a2>
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d814      	bhi.n	80038d2 <UART_SetConfig+0x1ba>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <UART_SetConfig+0x19a>
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d008      	beq.n	80038c2 <UART_SetConfig+0x1aa>
 80038b0:	e00f      	b.n	80038d2 <UART_SetConfig+0x1ba>
 80038b2:	2300      	movs	r3, #0
 80038b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038b8:	e0ad      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80038ba:	2302      	movs	r3, #2
 80038bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038c0:	e0a9      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80038c2:	2304      	movs	r3, #4
 80038c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038c8:	e0a5      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80038ca:	2308      	movs	r3, #8
 80038cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d0:	e0a1      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80038d2:	2310      	movs	r3, #16
 80038d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d8:	e09d      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a4a      	ldr	r2, [pc, #296]	@ (8003a08 <UART_SetConfig+0x2f0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d125      	bne.n	8003930 <UART_SetConfig+0x218>
 80038e4:	4b45      	ldr	r3, [pc, #276]	@ (80039fc <UART_SetConfig+0x2e4>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80038f0:	d016      	beq.n	8003920 <UART_SetConfig+0x208>
 80038f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80038f4:	d818      	bhi.n	8003928 <UART_SetConfig+0x210>
 80038f6:	2b80      	cmp	r3, #128	@ 0x80
 80038f8:	d00a      	beq.n	8003910 <UART_SetConfig+0x1f8>
 80038fa:	2b80      	cmp	r3, #128	@ 0x80
 80038fc:	d814      	bhi.n	8003928 <UART_SetConfig+0x210>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <UART_SetConfig+0x1f0>
 8003902:	2b40      	cmp	r3, #64	@ 0x40
 8003904:	d008      	beq.n	8003918 <UART_SetConfig+0x200>
 8003906:	e00f      	b.n	8003928 <UART_SetConfig+0x210>
 8003908:	2300      	movs	r3, #0
 800390a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800390e:	e082      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003910:	2302      	movs	r3, #2
 8003912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003916:	e07e      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003918:	2304      	movs	r3, #4
 800391a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800391e:	e07a      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003920:	2308      	movs	r3, #8
 8003922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003926:	e076      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003928:	2310      	movs	r3, #16
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800392e:	e072      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a35      	ldr	r2, [pc, #212]	@ (8003a0c <UART_SetConfig+0x2f4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d12a      	bne.n	8003990 <UART_SetConfig+0x278>
 800393a:	4b30      	ldr	r3, [pc, #192]	@ (80039fc <UART_SetConfig+0x2e4>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003940:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003944:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003948:	d01a      	beq.n	8003980 <UART_SetConfig+0x268>
 800394a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800394e:	d81b      	bhi.n	8003988 <UART_SetConfig+0x270>
 8003950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003954:	d00c      	beq.n	8003970 <UART_SetConfig+0x258>
 8003956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800395a:	d815      	bhi.n	8003988 <UART_SetConfig+0x270>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <UART_SetConfig+0x250>
 8003960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003964:	d008      	beq.n	8003978 <UART_SetConfig+0x260>
 8003966:	e00f      	b.n	8003988 <UART_SetConfig+0x270>
 8003968:	2300      	movs	r3, #0
 800396a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800396e:	e052      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003970:	2302      	movs	r3, #2
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003976:	e04e      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003978:	2304      	movs	r3, #4
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800397e:	e04a      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003980:	2308      	movs	r3, #8
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003986:	e046      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003988:	2310      	movs	r3, #16
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800398e:	e042      	b.n	8003a16 <UART_SetConfig+0x2fe>
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a17      	ldr	r2, [pc, #92]	@ (80039f4 <UART_SetConfig+0x2dc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d13a      	bne.n	8003a10 <UART_SetConfig+0x2f8>
 800399a:	4b18      	ldr	r3, [pc, #96]	@ (80039fc <UART_SetConfig+0x2e4>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039a8:	d01a      	beq.n	80039e0 <UART_SetConfig+0x2c8>
 80039aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039ae:	d81b      	bhi.n	80039e8 <UART_SetConfig+0x2d0>
 80039b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039b4:	d00c      	beq.n	80039d0 <UART_SetConfig+0x2b8>
 80039b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ba:	d815      	bhi.n	80039e8 <UART_SetConfig+0x2d0>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <UART_SetConfig+0x2b0>
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c4:	d008      	beq.n	80039d8 <UART_SetConfig+0x2c0>
 80039c6:	e00f      	b.n	80039e8 <UART_SetConfig+0x2d0>
 80039c8:	2300      	movs	r3, #0
 80039ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ce:	e022      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80039d0:	2302      	movs	r3, #2
 80039d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039d6:	e01e      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80039d8:	2304      	movs	r3, #4
 80039da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039de:	e01a      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80039e0:	2308      	movs	r3, #8
 80039e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039e6:	e016      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80039e8:	2310      	movs	r3, #16
 80039ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ee:	e012      	b.n	8003a16 <UART_SetConfig+0x2fe>
 80039f0:	cfff69f3 	.word	0xcfff69f3
 80039f4:	40008000 	.word	0x40008000
 80039f8:	40013800 	.word	0x40013800
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40004400 	.word	0x40004400
 8003a04:	40004800 	.word	0x40004800
 8003a08:	40004c00 	.word	0x40004c00
 8003a0c:	40005000 	.word	0x40005000
 8003a10:	2310      	movs	r3, #16
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4aae      	ldr	r2, [pc, #696]	@ (8003cd4 <UART_SetConfig+0x5bc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	f040 8097 	bne.w	8003b50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d823      	bhi.n	8003a72 <UART_SetConfig+0x35a>
 8003a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a30 <UART_SetConfig+0x318>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a55 	.word	0x08003a55
 8003a34:	08003a73 	.word	0x08003a73
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003a73 	.word	0x08003a73
 8003a40:	08003a63 	.word	0x08003a63
 8003a44:	08003a73 	.word	0x08003a73
 8003a48:	08003a73 	.word	0x08003a73
 8003a4c:	08003a73 	.word	0x08003a73
 8003a50:	08003a6b 	.word	0x08003a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a54:	f7fe ff44 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8003a58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a5a:	e010      	b.n	8003a7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a5c:	4b9e      	ldr	r3, [pc, #632]	@ (8003cd8 <UART_SetConfig+0x5c0>)
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a60:	e00d      	b.n	8003a7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a62:	f7fe fecf 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 8003a66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a68:	e009      	b.n	8003a7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a70:	e005      	b.n	8003a7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8130 	beq.w	8003ce6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	4a94      	ldr	r2, [pc, #592]	@ (8003cdc <UART_SetConfig+0x5c4>)
 8003a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a90:	461a      	mov	r2, r3
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4413      	add	r3, r2
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d305      	bcc.n	8003ab6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d903      	bls.n	8003abe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003abc:	e113      	b.n	8003ce6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	60fa      	str	r2, [r7, #12]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	4a84      	ldr	r2, [pc, #528]	@ (8003cdc <UART_SetConfig+0x5c4>)
 8003acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003adc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ae0:	f7fc fbee 	bl	80002c0 <__aeabi_uldivmod>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	020b      	lsls	r3, r1, #8
 8003af6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003afa:	0202      	lsls	r2, r0, #8
 8003afc:	6979      	ldr	r1, [r7, #20]
 8003afe:	6849      	ldr	r1, [r1, #4]
 8003b00:	0849      	lsrs	r1, r1, #1
 8003b02:	2000      	movs	r0, #0
 8003b04:	460c      	mov	r4, r1
 8003b06:	4605      	mov	r5, r0
 8003b08:	eb12 0804 	adds.w	r8, r2, r4
 8003b0c:	eb43 0905 	adc.w	r9, r3, r5
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	469a      	mov	sl, r3
 8003b18:	4693      	mov	fp, r2
 8003b1a:	4652      	mov	r2, sl
 8003b1c:	465b      	mov	r3, fp
 8003b1e:	4640      	mov	r0, r8
 8003b20:	4649      	mov	r1, r9
 8003b22:	f7fc fbcd 	bl	80002c0 <__aeabi_uldivmod>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b34:	d308      	bcc.n	8003b48 <UART_SetConfig+0x430>
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b3c:	d204      	bcs.n	8003b48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a3a      	ldr	r2, [r7, #32]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	e0ce      	b.n	8003ce6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b4e:	e0ca      	b.n	8003ce6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b58:	d166      	bne.n	8003c28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d827      	bhi.n	8003bb2 <UART_SetConfig+0x49a>
 8003b62:	a201      	add	r2, pc, #4	@ (adr r2, 8003b68 <UART_SetConfig+0x450>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b8d 	.word	0x08003b8d
 8003b6c:	08003b95 	.word	0x08003b95
 8003b70:	08003b9d 	.word	0x08003b9d
 8003b74:	08003bb3 	.word	0x08003bb3
 8003b78:	08003ba3 	.word	0x08003ba3
 8003b7c:	08003bb3 	.word	0x08003bb3
 8003b80:	08003bb3 	.word	0x08003bb3
 8003b84:	08003bb3 	.word	0x08003bb3
 8003b88:	08003bab 	.word	0x08003bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b8c:	f7fe fea8 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8003b90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b92:	e014      	b.n	8003bbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b94:	f7fe feba 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 8003b98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b9a:	e010      	b.n	8003bbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b9c:	4b4e      	ldr	r3, [pc, #312]	@ (8003cd8 <UART_SetConfig+0x5c0>)
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ba0:	e00d      	b.n	8003bbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba2:	f7fe fe2f 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 8003ba6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ba8:	e009      	b.n	8003bbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bb0:	e005      	b.n	8003bbe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003bbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8090 	beq.w	8003ce6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	4a44      	ldr	r2, [pc, #272]	@ (8003cdc <UART_SetConfig+0x5c4>)
 8003bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bd8:	005a      	lsls	r2, r3, #1
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	441a      	add	r2, r3
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	2b0f      	cmp	r3, #15
 8003bf0:	d916      	bls.n	8003c20 <UART_SetConfig+0x508>
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf8:	d212      	bcs.n	8003c20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f023 030f 	bic.w	r3, r3, #15
 8003c02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	8bfb      	ldrh	r3, [r7, #30]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	8bfa      	ldrh	r2, [r7, #30]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	e062      	b.n	8003ce6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c26:	e05e      	b.n	8003ce6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d828      	bhi.n	8003c82 <UART_SetConfig+0x56a>
 8003c30:	a201      	add	r2, pc, #4	@ (adr r2, 8003c38 <UART_SetConfig+0x520>)
 8003c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c36:	bf00      	nop
 8003c38:	08003c5d 	.word	0x08003c5d
 8003c3c:	08003c65 	.word	0x08003c65
 8003c40:	08003c6d 	.word	0x08003c6d
 8003c44:	08003c83 	.word	0x08003c83
 8003c48:	08003c73 	.word	0x08003c73
 8003c4c:	08003c83 	.word	0x08003c83
 8003c50:	08003c83 	.word	0x08003c83
 8003c54:	08003c83 	.word	0x08003c83
 8003c58:	08003c7b 	.word	0x08003c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c5c:	f7fe fe40 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8003c60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c62:	e014      	b.n	8003c8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c64:	f7fe fe52 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 8003c68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c6a:	e010      	b.n	8003c8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <UART_SetConfig+0x5c0>)
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c70:	e00d      	b.n	8003c8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c72:	f7fe fdc7 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 8003c76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c78:	e009      	b.n	8003c8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c80:	e005      	b.n	8003c8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c8c:	bf00      	nop
    }

    if (pclk != 0U)
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d028      	beq.n	8003ce6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	4a10      	ldr	r2, [pc, #64]	@ (8003cdc <UART_SetConfig+0x5c4>)
 8003c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	085b      	lsrs	r3, r3, #1
 8003cac:	441a      	add	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	2b0f      	cmp	r3, #15
 8003cbc:	d910      	bls.n	8003ce0 <UART_SetConfig+0x5c8>
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cc4:	d20c      	bcs.n	8003ce0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60da      	str	r2, [r3, #12]
 8003cd0:	e009      	b.n	8003ce6 <UART_SetConfig+0x5ce>
 8003cd2:	bf00      	nop
 8003cd4:	40008000 	.word	0x40008000
 8003cd8:	00f42400 	.word	0x00f42400
 8003cdc:	08007d4c 	.word	0x08007d4c
      }
      else
      {
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003d02:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3730      	adds	r7, #48	@ 0x30
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01a      	beq.n	8003e26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e0e:	d10a      	bne.n	8003e26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  }
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b098      	sub	sp, #96	@ 0x60
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e64:	f7fd f802 	bl	8000e6c <HAL_GetTick>
 8003e68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d12f      	bne.n	8003ed8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e80:	2200      	movs	r2, #0
 8003e82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f88e 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d022      	beq.n	8003ed8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ea6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003eb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e6      	bne.n	8003e92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e063      	b.n	8003fa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d149      	bne.n	8003f7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f857 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d03c      	beq.n	8003f7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e6      	bne.n	8003f00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3308      	adds	r3, #8
 8003f38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3308      	adds	r3, #8
 8003f50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f52:	61fa      	str	r2, [r7, #28]
 8003f54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	69b9      	ldr	r1, [r7, #24]
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	617b      	str	r3, [r7, #20]
   return(result);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e5      	bne.n	8003f32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e012      	b.n	8003fa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3758      	adds	r7, #88	@ 0x58
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb8:	e04f      	b.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fc0:	d04b      	beq.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc2:	f7fc ff53 	bl	8000e6c <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d302      	bcc.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e04e      	b.n	800407a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d037      	beq.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b80      	cmp	r3, #128	@ 0x80
 8003fee:	d034      	beq.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b40      	cmp	r3, #64	@ 0x40
 8003ff4:	d031      	beq.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d110      	bne.n	8004026 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2208      	movs	r2, #8
 800400a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f838 	bl	8004082 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2208      	movs	r2, #8
 8004016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e029      	b.n	800407a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004030:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004034:	d111      	bne.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800403e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f81e 	bl	8004082 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e00f      	b.n	800407a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69da      	ldr	r2, [r3, #28]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4013      	ands	r3, r2
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	429a      	cmp	r2, r3
 8004068:	bf0c      	ite	eq
 800406a:	2301      	moveq	r3, #1
 800406c:	2300      	movne	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	429a      	cmp	r2, r3
 8004076:	d0a0      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004082:	b480      	push	{r7}
 8004084:	b095      	sub	sp, #84	@ 0x54
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800409e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80040aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e6      	bne.n	800408a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3308      	adds	r3, #8
 80040c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e3      	bne.n	80040bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d118      	bne.n	800412e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	60bb      	str	r3, [r7, #8]
   return(result);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f023 0310 	bic.w	r3, r3, #16
 8004110:	647b      	str	r3, [r7, #68]	@ 0x44
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6979      	ldr	r1, [r7, #20]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	613b      	str	r3, [r7, #16]
   return(result);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e6      	bne.n	80040fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004142:	bf00      	nop
 8004144:	3754      	adds	r7, #84	@ 0x54
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_UARTEx_DisableFifoMode+0x16>
 8004160:	2302      	movs	r3, #2
 8004162:	e027      	b.n	80041b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2224      	movs	r2, #36	@ 0x24
 8004170:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004192:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e02d      	b.n	8004234 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	@ 0x24
 80041e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f84f 	bl	80042b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004250:	2302      	movs	r3, #2
 8004252:	e02d      	b.n	80042b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	@ 0x24
 8004260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f811 	bl	80042b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042d8:	e031      	b.n	800433e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042da:	2308      	movs	r3, #8
 80042dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042de:	2308      	movs	r3, #8
 80042e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	0e5b      	lsrs	r3, r3, #25
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	0f5b      	lsrs	r3, r3, #29
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004302:	7bbb      	ldrb	r3, [r7, #14]
 8004304:	7b3a      	ldrb	r2, [r7, #12]
 8004306:	4911      	ldr	r1, [pc, #68]	@ (800434c <UARTEx_SetNbDataToProcess+0x94>)
 8004308:	5c8a      	ldrb	r2, [r1, r2]
 800430a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800430e:	7b3a      	ldrb	r2, [r7, #12]
 8004310:	490f      	ldr	r1, [pc, #60]	@ (8004350 <UARTEx_SetNbDataToProcess+0x98>)
 8004312:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004314:	fb93 f3f2 	sdiv	r3, r3, r2
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	7b7a      	ldrb	r2, [r7, #13]
 8004324:	4909      	ldr	r1, [pc, #36]	@ (800434c <UARTEx_SetNbDataToProcess+0x94>)
 8004326:	5c8a      	ldrb	r2, [r1, r2]
 8004328:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800432c:	7b7a      	ldrb	r2, [r7, #13]
 800432e:	4908      	ldr	r1, [pc, #32]	@ (8004350 <UARTEx_SetNbDataToProcess+0x98>)
 8004330:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004332:	fb93 f3f2 	sdiv	r3, r3, r2
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	08007d64 	.word	0x08007d64
 8004350:	08007d6c 	.word	0x08007d6c

08004354 <__NVIC_SetPriority>:
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	db0a      	blt.n	800437e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	490c      	ldr	r1, [pc, #48]	@ (80043a0 <__NVIC_SetPriority+0x4c>)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	0112      	lsls	r2, r2, #4
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	440b      	add	r3, r1
 8004378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800437c:	e00a      	b.n	8004394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	4908      	ldr	r1, [pc, #32]	@ (80043a4 <__NVIC_SetPriority+0x50>)
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	3b04      	subs	r3, #4
 800438c:	0112      	lsls	r2, r2, #4
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	440b      	add	r3, r1
 8004392:	761a      	strb	r2, [r3, #24]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000e100 	.word	0xe000e100
 80043a4:	e000ed00 	.word	0xe000ed00

080043a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80043ac:	4b05      	ldr	r3, [pc, #20]	@ (80043c4 <SysTick_Handler+0x1c>)
 80043ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043b0:	f001 fcc6 	bl	8005d40 <xTaskGetSchedulerState>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d001      	beq.n	80043be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80043ba:	f002 fabd 	bl	8006938 <xPortSysTickHandler>
  }
}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000e010 	.word	0xe000e010

080043c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043cc:	2100      	movs	r1, #0
 80043ce:	f06f 0004 	mvn.w	r0, #4
 80043d2:	f7ff ffbf 	bl	8004354 <__NVIC_SetPriority>
#endif
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043e2:	f3ef 8305 	mrs	r3, IPSR
 80043e6:	603b      	str	r3, [r7, #0]
  return(result);
 80043e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043ee:	f06f 0305 	mvn.w	r3, #5
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	e00c      	b.n	8004410 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004420 <osKernelInitialize+0x44>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043fe:	4b08      	ldr	r3, [pc, #32]	@ (8004420 <osKernelInitialize+0x44>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004404:	2300      	movs	r3, #0
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	e002      	b.n	8004410 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800440e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004410:	687b      	ldr	r3, [r7, #4]
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	200001d8 	.word	0x200001d8

08004424 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800442a:	f3ef 8305 	mrs	r3, IPSR
 800442e:	603b      	str	r3, [r7, #0]
  return(result);
 8004430:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004436:	f06f 0305 	mvn.w	r3, #5
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	e010      	b.n	8004460 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800443e:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <osKernelStart+0x48>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d109      	bne.n	800445a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004446:	f7ff ffbf 	bl	80043c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800444a:	4b08      	ldr	r3, [pc, #32]	@ (800446c <osKernelStart+0x48>)
 800444c:	2202      	movs	r2, #2
 800444e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004450:	f001 f828 	bl	80054a4 <vTaskStartScheduler>
      stat = osOK;
 8004454:	2300      	movs	r3, #0
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	e002      	b.n	8004460 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800445e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004460:	687b      	ldr	r3, [r7, #4]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200001d8 	.word	0x200001d8

08004470 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b08e      	sub	sp, #56	@ 0x38
 8004474:	af04      	add	r7, sp, #16
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004480:	f3ef 8305 	mrs	r3, IPSR
 8004484:	617b      	str	r3, [r7, #20]
  return(result);
 8004486:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004488:	2b00      	cmp	r3, #0
 800448a:	d17e      	bne.n	800458a <osThreadNew+0x11a>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d07b      	beq.n	800458a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004492:	2380      	movs	r3, #128	@ 0x80
 8004494:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004496:	2318      	movs	r3, #24
 8004498:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d045      	beq.n	8004536 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <osThreadNew+0x48>
        name = attr->name;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <osThreadNew+0x6e>
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	2b38      	cmp	r3, #56	@ 0x38
 80044d0:	d805      	bhi.n	80044de <osThreadNew+0x6e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <osThreadNew+0x72>
        return (NULL);
 80044de:	2300      	movs	r3, #0
 80044e0:	e054      	b.n	800458c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00e      	beq.n	8004518 <osThreadNew+0xa8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	2b5b      	cmp	r3, #91	@ 0x5b
 8004500:	d90a      	bls.n	8004518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004506:	2b00      	cmp	r3, #0
 8004508:	d006      	beq.n	8004518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <osThreadNew+0xa8>
        mem = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	e010      	b.n	800453a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10c      	bne.n	800453a <osThreadNew+0xca>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d108      	bne.n	800453a <osThreadNew+0xca>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d104      	bne.n	800453a <osThreadNew+0xca>
          mem = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e001      	b.n	800453a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d110      	bne.n	8004562 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004548:	9202      	str	r2, [sp, #8]
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	6a3a      	ldr	r2, [r7, #32]
 8004554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fdfe 	bl	8005158 <xTaskCreateStatic>
 800455c:	4603      	mov	r3, r0
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	e013      	b.n	800458a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d110      	bne.n	800458a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	b29a      	uxth	r2, r3
 800456c:	f107 0310 	add.w	r3, r7, #16
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fe4c 	bl	8005218 <xTaskCreate>
 8004580:	4603      	mov	r3, r0
 8004582:	2b01      	cmp	r3, #1
 8004584:	d001      	beq.n	800458a <osThreadNew+0x11a>
            hTask = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800458a:	693b      	ldr	r3, [r7, #16]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3728      	adds	r7, #40	@ 0x28
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a07      	ldr	r2, [pc, #28]	@ (80045c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80045a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4a06      	ldr	r2, [pc, #24]	@ (80045c4 <vApplicationGetIdleTaskMemory+0x30>)
 80045aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2280      	movs	r2, #128	@ 0x80
 80045b0:	601a      	str	r2, [r3, #0]
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	200001dc 	.word	0x200001dc
 80045c4:	20000238 	.word	0x20000238

080045c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a07      	ldr	r2, [pc, #28]	@ (80045f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80045d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4a06      	ldr	r2, [pc, #24]	@ (80045f8 <vApplicationGetTimerTaskMemory+0x30>)
 80045de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045e6:	601a      	str	r2, [r3, #0]
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	20000438 	.word	0x20000438
 80045f8:	20000494 	.word	0x20000494

080045fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f103 0208 	add.w	r2, r3, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004614:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f103 0208 	add.w	r2, r3, #8
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f103 0208 	add.w	r2, r3, #8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046b4:	d103      	bne.n	80046be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e00c      	b.n	80046d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3308      	adds	r3, #8
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e002      	b.n	80046cc <vListInsert+0x2e>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d2f6      	bcs.n	80046c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	601a      	str	r2, [r3, #0]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6892      	ldr	r2, [r2, #8]
 8004726:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6852      	ldr	r2, [r2, #4]
 8004730:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	429a      	cmp	r2, r3
 800473a:	d103      	bne.n	8004744 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	1e5a      	subs	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	e7fd      	b.n	800478c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004790:	f002 f842 	bl	8006818 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479c:	68f9      	ldr	r1, [r7, #12]
 800479e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	441a      	add	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c0:	3b01      	subs	r3, #1
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	441a      	add	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	22ff      	movs	r2, #255	@ 0xff
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	22ff      	movs	r2, #255	@ 0xff
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d114      	bne.n	8004810 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01a      	beq.n	8004824 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3310      	adds	r3, #16
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 f8e4 	bl	80059c0 <xTaskRemoveFromEventList>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d012      	beq.n	8004824 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <xQueueGenericReset+0xd0>)
 8004800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	e009      	b.n	8004824 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3310      	adds	r3, #16
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fef1 	bl	80045fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3324      	adds	r3, #36	@ 0x24
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff feec 	bl	80045fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004824:	f002 f82a 	bl	800687c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004828:	2301      	movs	r3, #1
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	e000ed04 	.word	0xe000ed04

08004838 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08e      	sub	sp, #56	@ 0x38
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800485e:	bf00      	nop
 8004860:	bf00      	nop
 8004862:	e7fd      	b.n	8004860 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	e7fd      	b.n	800487e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <xQueueGenericCreateStatic+0x56>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <xQueueGenericCreateStatic+0x5a>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <xQueueGenericCreateStatic+0x5c>
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	623b      	str	r3, [r7, #32]
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <xQueueGenericCreateStatic+0x84>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <xQueueGenericCreateStatic+0x88>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <xQueueGenericCreateStatic+0x8a>
 80048c0:	2300      	movs	r3, #0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	61fb      	str	r3, [r7, #28]
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	e7fd      	b.n	80048da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048de:	2350      	movs	r3, #80	@ 0x50
 80048e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b50      	cmp	r3, #80	@ 0x50
 80048e6:	d00b      	beq.n	8004900 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	61bb      	str	r3, [r7, #24]
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004900:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00d      	beq.n	8004928 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800490c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004914:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	4613      	mov	r3, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f805 	bl	8004932 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800492a:	4618      	mov	r0, r3
 800492c:	3730      	adds	r7, #48	@ 0x30
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	e002      	b.n	8004954 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004960:	2101      	movs	r1, #1
 8004962:	69b8      	ldr	r0, [r7, #24]
 8004964:	f7ff fefe 	bl	8004764 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004970:	bf00      	nop
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08e      	sub	sp, #56	@ 0x38
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004986:	2300      	movs	r3, #0
 8004988:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <xQueueGenericSend+0x34>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
 80049aa:	e7fd      	b.n	80049a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <xQueueGenericSend+0x42>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <xQueueGenericSend+0x46>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <xQueueGenericSend+0x48>
 80049be:	2300      	movs	r3, #0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <xQueueGenericSend+0x64>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d103      	bne.n	80049ea <xQueueGenericSend+0x72>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <xQueueGenericSend+0x76>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <xQueueGenericSend+0x78>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <xQueueGenericSend+0x94>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	623b      	str	r3, [r7, #32]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a0c:	f001 f998 	bl	8005d40 <xTaskGetSchedulerState>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d102      	bne.n	8004a1c <xQueueGenericSend+0xa4>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <xQueueGenericSend+0xa8>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <xQueueGenericSend+0xaa>
 8004a20:	2300      	movs	r3, #0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <xQueueGenericSend+0xc6>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	61fb      	str	r3, [r7, #28]
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	e7fd      	b.n	8004a3a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a3e:	f001 feeb 	bl	8006818 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d302      	bcc.n	8004a54 <xQueueGenericSend+0xdc>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d129      	bne.n	8004aa8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a5a:	f000 fa0f 	bl	8004e7c <prvCopyDataToQueue>
 8004a5e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d010      	beq.n	8004a8a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6a:	3324      	adds	r3, #36	@ 0x24
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 ffa7 	bl	80059c0 <xTaskRemoveFromEventList>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d013      	beq.n	8004aa0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a78:	4b3f      	ldr	r3, [pc, #252]	@ (8004b78 <xQueueGenericSend+0x200>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	e00a      	b.n	8004aa0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a90:	4b39      	ldr	r3, [pc, #228]	@ (8004b78 <xQueueGenericSend+0x200>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004aa0:	f001 feec 	bl	800687c <vPortExitCritical>
				return pdPASS;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e063      	b.n	8004b70 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d103      	bne.n	8004ab6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004aae:	f001 fee5 	bl	800687c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e05c      	b.n	8004b70 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004abc:	f107 0314 	add.w	r3, r7, #20
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 ffe1 	bl	8005a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aca:	f001 fed7 	bl	800687c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ace:	f000 fd51 	bl	8005574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ad2:	f001 fea1 	bl	8006818 <vPortEnterCritical>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ae2:	d103      	bne.n	8004aec <xQueueGenericSend+0x174>
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004af2:	b25b      	sxtb	r3, r3
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004af8:	d103      	bne.n	8004b02 <xQueueGenericSend+0x18a>
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b02:	f001 febb 	bl	800687c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b06:	1d3a      	adds	r2, r7, #4
 8004b08:	f107 0314 	add.w	r3, r7, #20
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 ffd0 	bl	8005ab4 <xTaskCheckForTimeOut>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d124      	bne.n	8004b64 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b1c:	f000 faa6 	bl	800506c <prvIsQueueFull>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b28:	3310      	adds	r3, #16
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fef4 	bl	800591c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b36:	f000 fa31 	bl	8004f9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b3a:	f000 fd29 	bl	8005590 <xTaskResumeAll>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f47f af7c 	bne.w	8004a3e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004b46:	4b0c      	ldr	r3, [pc, #48]	@ (8004b78 <xQueueGenericSend+0x200>)
 8004b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	e772      	b.n	8004a3e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b5a:	f000 fa1f 	bl	8004f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b5e:	f000 fd17 	bl	8005590 <xTaskResumeAll>
 8004b62:	e76c      	b.n	8004a3e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b66:	f000 fa19 	bl	8004f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b6a:	f000 fd11 	bl	8005590 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3738      	adds	r7, #56	@ 0x38
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b090      	sub	sp, #64	@ 0x40
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
 8004baa:	e7fd      	b.n	8004ba8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <xQueueGenericSendFromISR+0x3e>
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <xQueueGenericSendFromISR+0x42>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <xQueueGenericSendFromISR+0x44>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d103      	bne.n	8004bea <xQueueGenericSendFromISR+0x6e>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <xQueueGenericSendFromISR+0x72>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <xQueueGenericSendFromISR+0x74>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	623b      	str	r3, [r7, #32]
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c0c:	f001 fee4 	bl	80069d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c10:	f3ef 8211 	mrs	r2, BASEPRI
 8004c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	61fa      	str	r2, [r7, #28]
 8004c26:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c2a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d302      	bcc.n	8004c3e <xQueueGenericSendFromISR+0xc2>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d12f      	bne.n	8004c9e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c54:	f000 f912 	bl	8004e7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c60:	d112      	bne.n	8004c88 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d016      	beq.n	8004c98 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6c:	3324      	adds	r3, #36	@ 0x24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fea6 	bl	80059c0 <xTaskRemoveFromEventList>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00e      	beq.n	8004c98 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00b      	beq.n	8004c98 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e007      	b.n	8004c98 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	b25a      	sxtb	r2, r3
 8004c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004c9c:	e001      	b.n	8004ca2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3740      	adds	r7, #64	@ 0x40
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08c      	sub	sp, #48	@ 0x30
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <xQueueReceive+0x32>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	623b      	str	r3, [r7, #32]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d103      	bne.n	8004cf8 <xQueueReceive+0x40>
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <xQueueReceive+0x44>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <xQueueReceive+0x46>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <xQueueReceive+0x62>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	61fb      	str	r3, [r7, #28]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d1a:	f001 f811 	bl	8005d40 <xTaskGetSchedulerState>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d102      	bne.n	8004d2a <xQueueReceive+0x72>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <xQueueReceive+0x76>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <xQueueReceive+0x78>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10b      	bne.n	8004d4c <xQueueReceive+0x94>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	61bb      	str	r3, [r7, #24]
}
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	e7fd      	b.n	8004d48 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d4c:	f001 fd64 	bl	8006818 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d54:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01f      	beq.n	8004d9c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d60:	f000 f8f6 	bl	8004f50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	1e5a      	subs	r2, r3, #1
 8004d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00f      	beq.n	8004d94 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d76:	3310      	adds	r3, #16
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fe21 	bl	80059c0 <xTaskRemoveFromEventList>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d84:	4b3c      	ldr	r3, [pc, #240]	@ (8004e78 <xQueueReceive+0x1c0>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d94:	f001 fd72 	bl	800687c <vPortExitCritical>
				return pdPASS;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e069      	b.n	8004e70 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004da2:	f001 fd6b 	bl	800687c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e062      	b.n	8004e70 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d106      	bne.n	8004dbe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004db0:	f107 0310 	add.w	r3, r7, #16
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fe67 	bl	8005a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dbe:	f001 fd5d 	bl	800687c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dc2:	f000 fbd7 	bl	8005574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dc6:	f001 fd27 	bl	8006818 <vPortEnterCritical>
 8004dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dd0:	b25b      	sxtb	r3, r3
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dd6:	d103      	bne.n	8004de0 <xQueueReceive+0x128>
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004de6:	b25b      	sxtb	r3, r3
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dec:	d103      	bne.n	8004df6 <xQueueReceive+0x13e>
 8004dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004df6:	f001 fd41 	bl	800687c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dfa:	1d3a      	adds	r2, r7, #4
 8004dfc:	f107 0310 	add.w	r3, r7, #16
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fe56 	bl	8005ab4 <xTaskCheckForTimeOut>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d123      	bne.n	8004e56 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e10:	f000 f916 	bl	8005040 <prvIsQueueEmpty>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d017      	beq.n	8004e4a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	3324      	adds	r3, #36	@ 0x24
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4611      	mov	r1, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fd7a 	bl	800591c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e2a:	f000 f8b7 	bl	8004f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e2e:	f000 fbaf 	bl	8005590 <xTaskResumeAll>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d189      	bne.n	8004d4c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004e38:	4b0f      	ldr	r3, [pc, #60]	@ (8004e78 <xQueueReceive+0x1c0>)
 8004e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	e780      	b.n	8004d4c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e4c:	f000 f8a6 	bl	8004f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e50:	f000 fb9e 	bl	8005590 <xTaskResumeAll>
 8004e54:	e77a      	b.n	8004d4c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e58:	f000 f8a0 	bl	8004f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e5c:	f000 fb98 	bl	8005590 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e62:	f000 f8ed 	bl	8005040 <prvIsQueueEmpty>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f43f af6f 	beq.w	8004d4c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3730      	adds	r7, #48	@ 0x30
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10d      	bne.n	8004eb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d14d      	bne.n	8004f3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 ff68 	bl	8005d7c <xTaskPriorityDisinherit>
 8004eac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	e043      	b.n	8004f3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d119      	bne.n	8004ef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6858      	ldr	r0, [r3, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	f002 f949 	bl	800715e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d32b      	bcc.n	8004f3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	e026      	b.n	8004f3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68d8      	ldr	r0, [r3, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	f002 f92f 	bl	800715e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	425b      	negs	r3, r3
 8004f0a:	441a      	add	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d207      	bcs.n	8004f2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	425b      	negs	r3, r3
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d105      	bne.n	8004f3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f46:	697b      	ldr	r3, [r7, #20]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d018      	beq.n	8004f94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	441a      	add	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d303      	bcc.n	8004f84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68d9      	ldr	r1, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6838      	ldr	r0, [r7, #0]
 8004f90:	f002 f8e5 	bl	800715e <memcpy>
	}
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fa4:	f001 fc38 	bl	8006818 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fb0:	e011      	b.n	8004fd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d012      	beq.n	8004fe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3324      	adds	r3, #36	@ 0x24
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fcfe 	bl	80059c0 <xTaskRemoveFromEventList>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fca:	f000 fdd7 	bl	8005b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	dce9      	bgt.n	8004fb2 <prvUnlockQueue+0x16>
 8004fde:	e000      	b.n	8004fe2 <prvUnlockQueue+0x46>
					break;
 8004fe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	22ff      	movs	r2, #255	@ 0xff
 8004fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004fea:	f001 fc47 	bl	800687c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fee:	f001 fc13 	bl	8006818 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ffa:	e011      	b.n	8005020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d012      	beq.n	800502a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3310      	adds	r3, #16
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fcd9 	bl	80059c0 <xTaskRemoveFromEventList>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005014:	f000 fdb2 	bl	8005b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005018:	7bbb      	ldrb	r3, [r7, #14]
 800501a:	3b01      	subs	r3, #1
 800501c:	b2db      	uxtb	r3, r3
 800501e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005024:	2b00      	cmp	r3, #0
 8005026:	dce9      	bgt.n	8004ffc <prvUnlockQueue+0x60>
 8005028:	e000      	b.n	800502c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800502a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	22ff      	movs	r2, #255	@ 0xff
 8005030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005034:	f001 fc22 	bl	800687c <vPortExitCritical>
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005048:	f001 fbe6 	bl	8006818 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e001      	b.n	800505e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800505e:	f001 fc0d 	bl	800687c <vPortExitCritical>

	return xReturn;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005074:	f001 fbd0 	bl	8006818 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005080:	429a      	cmp	r2, r3
 8005082:	d102      	bne.n	800508a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e001      	b.n	800508e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800508e:	f001 fbf5 	bl	800687c <vPortExitCritical>

	return xReturn;
 8005092:	68fb      	ldr	r3, [r7, #12]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	e014      	b.n	80050d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050ac:	4a0f      	ldr	r2, [pc, #60]	@ (80050ec <vQueueAddToRegistry+0x50>)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10b      	bne.n	80050d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050b8:	490c      	ldr	r1, [pc, #48]	@ (80050ec <vQueueAddToRegistry+0x50>)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050c2:	4a0a      	ldr	r2, [pc, #40]	@ (80050ec <vQueueAddToRegistry+0x50>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	4413      	add	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80050ce:	e006      	b.n	80050de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3301      	adds	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b07      	cmp	r3, #7
 80050da:	d9e7      	bls.n	80050ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000894 	.word	0x20000894

080050f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005100:	f001 fb8a 	bl	8006818 <vPortEnterCritical>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800510a:	b25b      	sxtb	r3, r3
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005110:	d103      	bne.n	800511a <vQueueWaitForMessageRestricted+0x2a>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005120:	b25b      	sxtb	r3, r3
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005126:	d103      	bne.n	8005130 <vQueueWaitForMessageRestricted+0x40>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005130:	f001 fba4 	bl	800687c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3324      	adds	r3, #36	@ 0x24
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fc0f 	bl	8005968 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800514a:	6978      	ldr	r0, [r7, #20]
 800514c:	f7ff ff26 	bl	8004f9c <prvUnlockQueue>
	}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08e      	sub	sp, #56	@ 0x38
 800515c:	af04      	add	r7, sp, #16
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <xTaskCreateStatic+0x2c>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	623b      	str	r3, [r7, #32]
}
 800517e:	bf00      	nop
 8005180:	bf00      	nop
 8005182:	e7fd      	b.n	8005180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	61fb      	str	r3, [r7, #28]
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051a2:	235c      	movs	r3, #92	@ 0x5c
 80051a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80051aa:	d00b      	beq.n	80051c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	61bb      	str	r3, [r7, #24]
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01e      	beq.n	800520a <xTaskCreateStatic+0xb2>
 80051cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01b      	beq.n	800520a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051e4:	2300      	movs	r3, #0
 80051e6:	9303      	str	r3, [sp, #12]
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	9302      	str	r3, [sp, #8]
 80051ec:	f107 0314 	add.w	r3, r7, #20
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f850 	bl	80052a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005202:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005204:	f000 f8de 	bl	80053c4 <prvAddNewTaskToReadyList>
 8005208:	e001      	b.n	800520e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800520e:	697b      	ldr	r3, [r7, #20]
	}
 8005210:	4618      	mov	r0, r3
 8005212:	3728      	adds	r7, #40	@ 0x28
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	@ 0x30
 800521c:	af04      	add	r7, sp, #16
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4618      	mov	r0, r3
 800522e:	f001 fc15 	bl	8006a5c <pvPortMalloc>
 8005232:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00e      	beq.n	8005258 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800523a:	205c      	movs	r0, #92	@ 0x5c
 800523c:	f001 fc0e 	bl	8006a5c <pvPortMalloc>
 8005240:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	631a      	str	r2, [r3, #48]	@ 0x30
 800524e:	e005      	b.n	800525c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005250:	6978      	ldr	r0, [r7, #20]
 8005252:	f001 fcd1 	bl	8006bf8 <vPortFree>
 8005256:	e001      	b.n	800525c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d017      	beq.n	8005292 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	2300      	movs	r3, #0
 800526e:	9303      	str	r3, [sp, #12]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	9302      	str	r3, [sp, #8]
 8005274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f80e 	bl	80052a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005286:	69f8      	ldr	r0, [r7, #28]
 8005288:	f000 f89c 	bl	80053c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800528c:	2301      	movs	r3, #1
 800528e:	61bb      	str	r3, [r7, #24]
 8005290:	e002      	b.n	8005298 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005296:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005298:	69bb      	ldr	r3, [r7, #24]
	}
 800529a:	4618      	mov	r0, r3
 800529c:	3720      	adds	r7, #32
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b088      	sub	sp, #32
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	461a      	mov	r2, r3
 80052ba:	21a5      	movs	r1, #165	@ 0xa5
 80052bc:	f001 fed3 	bl	8007066 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052ca:	3b01      	subs	r3, #1
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	f023 0307 	bic.w	r3, r3, #7
 80052d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	617b      	str	r3, [r7, #20]
}
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
 80052fa:	e7fd      	b.n	80052f8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01f      	beq.n	8005342 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005302:	2300      	movs	r3, #0
 8005304:	61fb      	str	r3, [r7, #28]
 8005306:	e012      	b.n	800532e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	7819      	ldrb	r1, [r3, #0]
 8005310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	3334      	adds	r3, #52	@ 0x34
 8005318:	460a      	mov	r2, r1
 800531a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	3301      	adds	r3, #1
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	2b0f      	cmp	r3, #15
 8005332:	d9e9      	bls.n	8005308 <prvInitialiseNewTask+0x66>
 8005334:	e000      	b.n	8005338 <prvInitialiseNewTask+0x96>
			{
				break;
 8005336:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005340:	e003      	b.n	800534a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	2b37      	cmp	r3, #55	@ 0x37
 800534e:	d901      	bls.n	8005354 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005350:	2337      	movs	r3, #55	@ 0x37
 8005352:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005358:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800535e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005362:	2200      	movs	r2, #0
 8005364:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005368:	3304      	adds	r3, #4
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff f966 	bl	800463c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005372:	3318      	adds	r3, #24
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff f961 	bl	800463c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800537a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800537e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005382:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800538e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005392:	2200      	movs	r2, #0
 8005394:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	68f9      	ldr	r1, [r7, #12]
 80053a2:	69b8      	ldr	r0, [r7, #24]
 80053a4:	f001 f908 	bl	80065b8 <pxPortInitialiseStack>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ba:	bf00      	nop
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053cc:	f001 fa24 	bl	8006818 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005488 <prvAddNewTaskToReadyList+0xc4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005488 <prvAddNewTaskToReadyList+0xc4>)
 80053d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053da:	4b2c      	ldr	r3, [pc, #176]	@ (800548c <prvAddNewTaskToReadyList+0xc8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053e2:	4a2a      	ldr	r2, [pc, #168]	@ (800548c <prvAddNewTaskToReadyList+0xc8>)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053e8:	4b27      	ldr	r3, [pc, #156]	@ (8005488 <prvAddNewTaskToReadyList+0xc4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d110      	bne.n	8005412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053f0:	f000 fbe8 	bl	8005bc4 <prvInitialiseTaskLists>
 80053f4:	e00d      	b.n	8005412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053f6:	4b26      	ldr	r3, [pc, #152]	@ (8005490 <prvAddNewTaskToReadyList+0xcc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053fe:	4b23      	ldr	r3, [pc, #140]	@ (800548c <prvAddNewTaskToReadyList+0xc8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	429a      	cmp	r2, r3
 800540a:	d802      	bhi.n	8005412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800540c:	4a1f      	ldr	r2, [pc, #124]	@ (800548c <prvAddNewTaskToReadyList+0xc8>)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005412:	4b20      	ldr	r3, [pc, #128]	@ (8005494 <prvAddNewTaskToReadyList+0xd0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	4a1e      	ldr	r2, [pc, #120]	@ (8005494 <prvAddNewTaskToReadyList+0xd0>)
 800541a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800541c:	4b1d      	ldr	r3, [pc, #116]	@ (8005494 <prvAddNewTaskToReadyList+0xd0>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005428:	4b1b      	ldr	r3, [pc, #108]	@ (8005498 <prvAddNewTaskToReadyList+0xd4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d903      	bls.n	8005438 <prvAddNewTaskToReadyList+0x74>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	4a18      	ldr	r2, [pc, #96]	@ (8005498 <prvAddNewTaskToReadyList+0xd4>)
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4a15      	ldr	r2, [pc, #84]	@ (800549c <prvAddNewTaskToReadyList+0xd8>)
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f7ff f901 	bl	8004656 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005454:	f001 fa12 	bl	800687c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005458:	4b0d      	ldr	r3, [pc, #52]	@ (8005490 <prvAddNewTaskToReadyList+0xcc>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00e      	beq.n	800547e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005460:	4b0a      	ldr	r3, [pc, #40]	@ (800548c <prvAddNewTaskToReadyList+0xc8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	429a      	cmp	r2, r3
 800546c:	d207      	bcs.n	800547e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800546e:	4b0c      	ldr	r3, [pc, #48]	@ (80054a0 <prvAddNewTaskToReadyList+0xdc>)
 8005470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000da8 	.word	0x20000da8
 800548c:	200008d4 	.word	0x200008d4
 8005490:	20000db4 	.word	0x20000db4
 8005494:	20000dc4 	.word	0x20000dc4
 8005498:	20000db0 	.word	0x20000db0
 800549c:	200008d8 	.word	0x200008d8
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08a      	sub	sp, #40	@ 0x28
 80054a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054b2:	463a      	mov	r2, r7
 80054b4:	1d39      	adds	r1, r7, #4
 80054b6:	f107 0308 	add.w	r3, r7, #8
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff f86a 	bl	8004594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054c0:	6839      	ldr	r1, [r7, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	9202      	str	r2, [sp, #8]
 80054c8:	9301      	str	r3, [sp, #4]
 80054ca:	2300      	movs	r3, #0
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	2300      	movs	r3, #0
 80054d0:	460a      	mov	r2, r1
 80054d2:	4922      	ldr	r1, [pc, #136]	@ (800555c <vTaskStartScheduler+0xb8>)
 80054d4:	4822      	ldr	r0, [pc, #136]	@ (8005560 <vTaskStartScheduler+0xbc>)
 80054d6:	f7ff fe3f 	bl	8005158 <xTaskCreateStatic>
 80054da:	4603      	mov	r3, r0
 80054dc:	4a21      	ldr	r2, [pc, #132]	@ (8005564 <vTaskStartScheduler+0xc0>)
 80054de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054e0:	4b20      	ldr	r3, [pc, #128]	@ (8005564 <vTaskStartScheduler+0xc0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054e8:	2301      	movs	r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e001      	b.n	80054f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d102      	bne.n	80054fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054f8:	f000 fd04 	bl	8005f04 <xTimerCreateTimerTask>
 80054fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d116      	bne.n	8005532 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	613b      	str	r3, [r7, #16]
}
 8005516:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005518:	4b13      	ldr	r3, [pc, #76]	@ (8005568 <vTaskStartScheduler+0xc4>)
 800551a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800551e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005520:	4b12      	ldr	r3, [pc, #72]	@ (800556c <vTaskStartScheduler+0xc8>)
 8005522:	2201      	movs	r2, #1
 8005524:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005526:	4b12      	ldr	r3, [pc, #72]	@ (8005570 <vTaskStartScheduler+0xcc>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800552c:	f001 f8d0 	bl	80066d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005530:	e00f      	b.n	8005552 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005538:	d10b      	bne.n	8005552 <vTaskStartScheduler+0xae>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	60fb      	str	r3, [r7, #12]
}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	e7fd      	b.n	800554e <vTaskStartScheduler+0xaa>
}
 8005552:	bf00      	nop
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	08007ce8 	.word	0x08007ce8
 8005560:	08005b95 	.word	0x08005b95
 8005564:	20000dcc 	.word	0x20000dcc
 8005568:	20000dc8 	.word	0x20000dc8
 800556c:	20000db4 	.word	0x20000db4
 8005570:	20000dac 	.word	0x20000dac

08005574 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005578:	4b04      	ldr	r3, [pc, #16]	@ (800558c <vTaskSuspendAll+0x18>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3301      	adds	r3, #1
 800557e:	4a03      	ldr	r2, [pc, #12]	@ (800558c <vTaskSuspendAll+0x18>)
 8005580:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005582:	bf00      	nop
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	20000dd0 	.word	0x20000dd0

08005590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800559a:	2300      	movs	r3, #0
 800559c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800559e:	4b42      	ldr	r3, [pc, #264]	@ (80056a8 <xTaskResumeAll+0x118>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10b      	bne.n	80055be <xTaskResumeAll+0x2e>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	603b      	str	r3, [r7, #0]
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	e7fd      	b.n	80055ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055be:	f001 f92b 	bl	8006818 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055c2:	4b39      	ldr	r3, [pc, #228]	@ (80056a8 <xTaskResumeAll+0x118>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	4a37      	ldr	r2, [pc, #220]	@ (80056a8 <xTaskResumeAll+0x118>)
 80055ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055cc:	4b36      	ldr	r3, [pc, #216]	@ (80056a8 <xTaskResumeAll+0x118>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d162      	bne.n	800569a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055d4:	4b35      	ldr	r3, [pc, #212]	@ (80056ac <xTaskResumeAll+0x11c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d05e      	beq.n	800569a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055dc:	e02f      	b.n	800563e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055de:	4b34      	ldr	r3, [pc, #208]	@ (80056b0 <xTaskResumeAll+0x120>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3318      	adds	r3, #24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff f890 	bl	8004710 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff f88b 	bl	8004710 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fe:	4b2d      	ldr	r3, [pc, #180]	@ (80056b4 <xTaskResumeAll+0x124>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d903      	bls.n	800560e <xTaskResumeAll+0x7e>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	4a2a      	ldr	r2, [pc, #168]	@ (80056b4 <xTaskResumeAll+0x124>)
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4a27      	ldr	r2, [pc, #156]	@ (80056b8 <xTaskResumeAll+0x128>)
 800561c:	441a      	add	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3304      	adds	r3, #4
 8005622:	4619      	mov	r1, r3
 8005624:	4610      	mov	r0, r2
 8005626:	f7ff f816 	bl	8004656 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562e:	4b23      	ldr	r3, [pc, #140]	@ (80056bc <xTaskResumeAll+0x12c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005634:	429a      	cmp	r2, r3
 8005636:	d302      	bcc.n	800563e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005638:	4b21      	ldr	r3, [pc, #132]	@ (80056c0 <xTaskResumeAll+0x130>)
 800563a:	2201      	movs	r2, #1
 800563c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800563e:	4b1c      	ldr	r3, [pc, #112]	@ (80056b0 <xTaskResumeAll+0x120>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1cb      	bne.n	80055de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800564c:	f000 fb58 	bl	8005d00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005650:	4b1c      	ldr	r3, [pc, #112]	@ (80056c4 <xTaskResumeAll+0x134>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d010      	beq.n	800567e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800565c:	f000 f846 	bl	80056ec <xTaskIncrementTick>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005666:	4b16      	ldr	r3, [pc, #88]	@ (80056c0 <xTaskResumeAll+0x130>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3b01      	subs	r3, #1
 8005670:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f1      	bne.n	800565c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005678:	4b12      	ldr	r3, [pc, #72]	@ (80056c4 <xTaskResumeAll+0x134>)
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800567e:	4b10      	ldr	r3, [pc, #64]	@ (80056c0 <xTaskResumeAll+0x130>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005686:	2301      	movs	r3, #1
 8005688:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800568a:	4b0f      	ldr	r3, [pc, #60]	@ (80056c8 <xTaskResumeAll+0x138>)
 800568c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800569a:	f001 f8ef 	bl	800687c <vPortExitCritical>

	return xAlreadyYielded;
 800569e:	68bb      	ldr	r3, [r7, #8]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000dd0 	.word	0x20000dd0
 80056ac:	20000da8 	.word	0x20000da8
 80056b0:	20000d68 	.word	0x20000d68
 80056b4:	20000db0 	.word	0x20000db0
 80056b8:	200008d8 	.word	0x200008d8
 80056bc:	200008d4 	.word	0x200008d4
 80056c0:	20000dbc 	.word	0x20000dbc
 80056c4:	20000db8 	.word	0x20000db8
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056d2:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <xTaskGetTickCount+0x1c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056d8:	687b      	ldr	r3, [r7, #4]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000dac 	.word	0x20000dac

080056ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f6:	4b4f      	ldr	r3, [pc, #316]	@ (8005834 <xTaskIncrementTick+0x148>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f040 8090 	bne.w	8005820 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005700:	4b4d      	ldr	r3, [pc, #308]	@ (8005838 <xTaskIncrementTick+0x14c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3301      	adds	r3, #1
 8005706:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005708:	4a4b      	ldr	r2, [pc, #300]	@ (8005838 <xTaskIncrementTick+0x14c>)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d121      	bne.n	8005758 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005714:	4b49      	ldr	r3, [pc, #292]	@ (800583c <xTaskIncrementTick+0x150>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <xTaskIncrementTick+0x4a>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	603b      	str	r3, [r7, #0]
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	e7fd      	b.n	8005732 <xTaskIncrementTick+0x46>
 8005736:	4b41      	ldr	r3, [pc, #260]	@ (800583c <xTaskIncrementTick+0x150>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	4b40      	ldr	r3, [pc, #256]	@ (8005840 <xTaskIncrementTick+0x154>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a3e      	ldr	r2, [pc, #248]	@ (800583c <xTaskIncrementTick+0x150>)
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	4a3e      	ldr	r2, [pc, #248]	@ (8005840 <xTaskIncrementTick+0x154>)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	4b3e      	ldr	r3, [pc, #248]	@ (8005844 <xTaskIncrementTick+0x158>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3301      	adds	r3, #1
 8005750:	4a3c      	ldr	r2, [pc, #240]	@ (8005844 <xTaskIncrementTick+0x158>)
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	f000 fad4 	bl	8005d00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005758:	4b3b      	ldr	r3, [pc, #236]	@ (8005848 <xTaskIncrementTick+0x15c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	429a      	cmp	r2, r3
 8005760:	d349      	bcc.n	80057f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005762:	4b36      	ldr	r3, [pc, #216]	@ (800583c <xTaskIncrementTick+0x150>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d104      	bne.n	8005776 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800576c:	4b36      	ldr	r3, [pc, #216]	@ (8005848 <xTaskIncrementTick+0x15c>)
 800576e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005772:	601a      	str	r2, [r3, #0]
					break;
 8005774:	e03f      	b.n	80057f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005776:	4b31      	ldr	r3, [pc, #196]	@ (800583c <xTaskIncrementTick+0x150>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	429a      	cmp	r2, r3
 800578c:	d203      	bcs.n	8005796 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800578e:	4a2e      	ldr	r2, [pc, #184]	@ (8005848 <xTaskIncrementTick+0x15c>)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005794:	e02f      	b.n	80057f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	3304      	adds	r3, #4
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe ffb8 	bl	8004710 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	3318      	adds	r3, #24
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fe ffaf 	bl	8004710 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b6:	4b25      	ldr	r3, [pc, #148]	@ (800584c <xTaskIncrementTick+0x160>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d903      	bls.n	80057c6 <xTaskIncrementTick+0xda>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c2:	4a22      	ldr	r2, [pc, #136]	@ (800584c <xTaskIncrementTick+0x160>)
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005850 <xTaskIncrementTick+0x164>)
 80057d4:	441a      	add	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	3304      	adds	r3, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f7fe ff3a 	bl	8004656 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005854 <xTaskIncrementTick+0x168>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d3b8      	bcc.n	8005762 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057f0:	2301      	movs	r3, #1
 80057f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f4:	e7b5      	b.n	8005762 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057f6:	4b17      	ldr	r3, [pc, #92]	@ (8005854 <xTaskIncrementTick+0x168>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057fc:	4914      	ldr	r1, [pc, #80]	@ (8005850 <xTaskIncrementTick+0x164>)
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d901      	bls.n	8005812 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800580e:	2301      	movs	r3, #1
 8005810:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005812:	4b11      	ldr	r3, [pc, #68]	@ (8005858 <xTaskIncrementTick+0x16c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800581a:	2301      	movs	r3, #1
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e004      	b.n	800582a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005820:	4b0e      	ldr	r3, [pc, #56]	@ (800585c <xTaskIncrementTick+0x170>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	4a0d      	ldr	r2, [pc, #52]	@ (800585c <xTaskIncrementTick+0x170>)
 8005828:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800582a:	697b      	ldr	r3, [r7, #20]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000dd0 	.word	0x20000dd0
 8005838:	20000dac 	.word	0x20000dac
 800583c:	20000d60 	.word	0x20000d60
 8005840:	20000d64 	.word	0x20000d64
 8005844:	20000dc0 	.word	0x20000dc0
 8005848:	20000dc8 	.word	0x20000dc8
 800584c:	20000db0 	.word	0x20000db0
 8005850:	200008d8 	.word	0x200008d8
 8005854:	200008d4 	.word	0x200008d4
 8005858:	20000dbc 	.word	0x20000dbc
 800585c:	20000db8 	.word	0x20000db8

08005860 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005866:	4b28      	ldr	r3, [pc, #160]	@ (8005908 <vTaskSwitchContext+0xa8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800586e:	4b27      	ldr	r3, [pc, #156]	@ (800590c <vTaskSwitchContext+0xac>)
 8005870:	2201      	movs	r2, #1
 8005872:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005874:	e042      	b.n	80058fc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005876:	4b25      	ldr	r3, [pc, #148]	@ (800590c <vTaskSwitchContext+0xac>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587c:	4b24      	ldr	r3, [pc, #144]	@ (8005910 <vTaskSwitchContext+0xb0>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	e011      	b.n	80058a8 <vTaskSwitchContext+0x48>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	607b      	str	r3, [r7, #4]
}
 800589c:	bf00      	nop
 800589e:	bf00      	nop
 80058a0:	e7fd      	b.n	800589e <vTaskSwitchContext+0x3e>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	491a      	ldr	r1, [pc, #104]	@ (8005914 <vTaskSwitchContext+0xb4>)
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0e3      	beq.n	8005884 <vTaskSwitchContext+0x24>
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4a13      	ldr	r2, [pc, #76]	@ (8005914 <vTaskSwitchContext+0xb4>)
 80058c8:	4413      	add	r3, r2
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	3308      	adds	r3, #8
 80058de:	429a      	cmp	r2, r3
 80058e0:	d104      	bne.n	80058ec <vTaskSwitchContext+0x8c>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	605a      	str	r2, [r3, #4]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	4a09      	ldr	r2, [pc, #36]	@ (8005918 <vTaskSwitchContext+0xb8>)
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	4a06      	ldr	r2, [pc, #24]	@ (8005910 <vTaskSwitchContext+0xb0>)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6013      	str	r3, [r2, #0]
}
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	20000dd0 	.word	0x20000dd0
 800590c:	20000dbc 	.word	0x20000dbc
 8005910:	20000db0 	.word	0x20000db0
 8005914:	200008d8 	.word	0x200008d8
 8005918:	200008d4 	.word	0x200008d4

0800591c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60fb      	str	r3, [r7, #12]
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005944:	4b07      	ldr	r3, [pc, #28]	@ (8005964 <vTaskPlaceOnEventList+0x48>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3318      	adds	r3, #24
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7fe fea6 	bl	800469e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005952:	2101      	movs	r1, #1
 8005954:	6838      	ldr	r0, [r7, #0]
 8005956:	f000 fa81 	bl	8005e5c <prvAddCurrentTaskToDelayedList>
}
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	200008d4 	.word	0x200008d4

08005968 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	617b      	str	r3, [r7, #20]
}
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	e7fd      	b.n	800598e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005992:	4b0a      	ldr	r3, [pc, #40]	@ (80059bc <vTaskPlaceOnEventListRestricted+0x54>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3318      	adds	r3, #24
 8005998:	4619      	mov	r1, r3
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7fe fe5b 	bl	8004656 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	68b8      	ldr	r0, [r7, #8]
 80059b0:	f000 fa54 	bl	8005e5c <prvAddCurrentTaskToDelayedList>
	}
 80059b4:	bf00      	nop
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	200008d4 	.word	0x200008d4

080059c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60fb      	str	r3, [r7, #12]
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop
 80059ec:	e7fd      	b.n	80059ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	3318      	adds	r3, #24
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fe8c 	bl	8004710 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a70 <xTaskRemoveFromEventList+0xb0>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d11d      	bne.n	8005a3c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe fe83 	bl	8004710 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0e:	4b19      	ldr	r3, [pc, #100]	@ (8005a74 <xTaskRemoveFromEventList+0xb4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d903      	bls.n	8005a1e <xTaskRemoveFromEventList+0x5e>
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1a:	4a16      	ldr	r2, [pc, #88]	@ (8005a74 <xTaskRemoveFromEventList+0xb4>)
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a13      	ldr	r2, [pc, #76]	@ (8005a78 <xTaskRemoveFromEventList+0xb8>)
 8005a2c:	441a      	add	r2, r3
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f7fe fe0e 	bl	8004656 <vListInsertEnd>
 8005a3a:	e005      	b.n	8005a48 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3318      	adds	r3, #24
 8005a40:	4619      	mov	r1, r3
 8005a42:	480e      	ldr	r0, [pc, #56]	@ (8005a7c <xTaskRemoveFromEventList+0xbc>)
 8005a44:	f7fe fe07 	bl	8004656 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a80 <xTaskRemoveFromEventList+0xc0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d905      	bls.n	8005a62 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <xTaskRemoveFromEventList+0xc4>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	e001      	b.n	8005a66 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a66:	697b      	ldr	r3, [r7, #20]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000dd0 	.word	0x20000dd0
 8005a74:	20000db0 	.word	0x20000db0
 8005a78:	200008d8 	.word	0x200008d8
 8005a7c:	20000d68 	.word	0x20000d68
 8005a80:	200008d4 	.word	0x200008d4
 8005a84:	20000dbc 	.word	0x20000dbc

08005a88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a90:	4b06      	ldr	r3, [pc, #24]	@ (8005aac <vTaskInternalSetTimeOutState+0x24>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a98:	4b05      	ldr	r3, [pc, #20]	@ (8005ab0 <vTaskInternalSetTimeOutState+0x28>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	605a      	str	r2, [r3, #4]
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	20000dc0 	.word	0x20000dc0
 8005ab0:	20000dac 	.word	0x20000dac

08005ab4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10b      	bne.n	8005adc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	613b      	str	r3, [r7, #16]
}
 8005ad6:	bf00      	nop
 8005ad8:	bf00      	nop
 8005ada:	e7fd      	b.n	8005ad8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10b      	bne.n	8005afa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	60fb      	str	r3, [r7, #12]
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop
 8005af8:	e7fd      	b.n	8005af6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005afa:	f000 fe8d 	bl	8006818 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005afe:	4b1d      	ldr	r3, [pc, #116]	@ (8005b74 <xTaskCheckForTimeOut+0xc0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b16:	d102      	bne.n	8005b1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	e023      	b.n	8005b66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b15      	ldr	r3, [pc, #84]	@ (8005b78 <xTaskCheckForTimeOut+0xc4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d007      	beq.n	8005b3a <xTaskCheckForTimeOut+0x86>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d302      	bcc.n	8005b3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b34:	2301      	movs	r3, #1
 8005b36:	61fb      	str	r3, [r7, #28]
 8005b38:	e015      	b.n	8005b66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d20b      	bcs.n	8005b5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	1ad2      	subs	r2, r2, r3
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff ff99 	bl	8005a88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	e004      	b.n	8005b66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b62:	2301      	movs	r3, #1
 8005b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b66:	f000 fe89 	bl	800687c <vPortExitCritical>

	return xReturn;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3720      	adds	r7, #32
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000dac 	.word	0x20000dac
 8005b78:	20000dc0 	.word	0x20000dc0

08005b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b80:	4b03      	ldr	r3, [pc, #12]	@ (8005b90 <vTaskMissedYield+0x14>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
}
 8005b86:	bf00      	nop
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	20000dbc 	.word	0x20000dbc

08005b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b9c:	f000 f852 	bl	8005c44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ba0:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <prvIdleTask+0x28>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d9f9      	bls.n	8005b9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ba8:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <prvIdleTask+0x2c>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bb8:	e7f0      	b.n	8005b9c <prvIdleTask+0x8>
 8005bba:	bf00      	nop
 8005bbc:	200008d8 	.word	0x200008d8
 8005bc0:	e000ed04 	.word	0xe000ed04

08005bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bca:	2300      	movs	r3, #0
 8005bcc:	607b      	str	r3, [r7, #4]
 8005bce:	e00c      	b.n	8005bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4a12      	ldr	r2, [pc, #72]	@ (8005c24 <prvInitialiseTaskLists+0x60>)
 8005bdc:	4413      	add	r3, r2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe fd0c 	bl	80045fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3301      	adds	r3, #1
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b37      	cmp	r3, #55	@ 0x37
 8005bee:	d9ef      	bls.n	8005bd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bf0:	480d      	ldr	r0, [pc, #52]	@ (8005c28 <prvInitialiseTaskLists+0x64>)
 8005bf2:	f7fe fd03 	bl	80045fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bf6:	480d      	ldr	r0, [pc, #52]	@ (8005c2c <prvInitialiseTaskLists+0x68>)
 8005bf8:	f7fe fd00 	bl	80045fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bfc:	480c      	ldr	r0, [pc, #48]	@ (8005c30 <prvInitialiseTaskLists+0x6c>)
 8005bfe:	f7fe fcfd 	bl	80045fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c02:	480c      	ldr	r0, [pc, #48]	@ (8005c34 <prvInitialiseTaskLists+0x70>)
 8005c04:	f7fe fcfa 	bl	80045fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c08:	480b      	ldr	r0, [pc, #44]	@ (8005c38 <prvInitialiseTaskLists+0x74>)
 8005c0a:	f7fe fcf7 	bl	80045fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <prvInitialiseTaskLists+0x78>)
 8005c10:	4a05      	ldr	r2, [pc, #20]	@ (8005c28 <prvInitialiseTaskLists+0x64>)
 8005c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c14:	4b0a      	ldr	r3, [pc, #40]	@ (8005c40 <prvInitialiseTaskLists+0x7c>)
 8005c16:	4a05      	ldr	r2, [pc, #20]	@ (8005c2c <prvInitialiseTaskLists+0x68>)
 8005c18:	601a      	str	r2, [r3, #0]
}
 8005c1a:	bf00      	nop
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	200008d8 	.word	0x200008d8
 8005c28:	20000d38 	.word	0x20000d38
 8005c2c:	20000d4c 	.word	0x20000d4c
 8005c30:	20000d68 	.word	0x20000d68
 8005c34:	20000d7c 	.word	0x20000d7c
 8005c38:	20000d94 	.word	0x20000d94
 8005c3c:	20000d60 	.word	0x20000d60
 8005c40:	20000d64 	.word	0x20000d64

08005c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c4a:	e019      	b.n	8005c80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c4c:	f000 fde4 	bl	8006818 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c50:	4b10      	ldr	r3, [pc, #64]	@ (8005c94 <prvCheckTasksWaitingTermination+0x50>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe fd57 	bl	8004710 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c62:	4b0d      	ldr	r3, [pc, #52]	@ (8005c98 <prvCheckTasksWaitingTermination+0x54>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	4a0b      	ldr	r2, [pc, #44]	@ (8005c98 <prvCheckTasksWaitingTermination+0x54>)
 8005c6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c9c <prvCheckTasksWaitingTermination+0x58>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	4a0a      	ldr	r2, [pc, #40]	@ (8005c9c <prvCheckTasksWaitingTermination+0x58>)
 8005c74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c76:	f000 fe01 	bl	800687c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f810 	bl	8005ca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c80:	4b06      	ldr	r3, [pc, #24]	@ (8005c9c <prvCheckTasksWaitingTermination+0x58>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e1      	bne.n	8005c4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000d7c 	.word	0x20000d7c
 8005c98:	20000da8 	.word	0x20000da8
 8005c9c:	20000d90 	.word	0x20000d90

08005ca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d108      	bne.n	8005cc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 ff9e 	bl	8006bf8 <vPortFree>
				vPortFree( pxTCB );
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 ff9b 	bl	8006bf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cc2:	e019      	b.n	8005cf8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d103      	bne.n	8005cd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 ff92 	bl	8006bf8 <vPortFree>
	}
 8005cd4:	e010      	b.n	8005cf8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d00b      	beq.n	8005cf8 <prvDeleteTCB+0x58>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	60fb      	str	r3, [r7, #12]
}
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	e7fd      	b.n	8005cf4 <prvDeleteTCB+0x54>
	}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d06:	4b0c      	ldr	r3, [pc, #48]	@ (8005d38 <prvResetNextTaskUnblockTime+0x38>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d10:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <prvResetNextTaskUnblockTime+0x3c>)
 8005d12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d18:	e008      	b.n	8005d2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1a:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <prvResetNextTaskUnblockTime+0x38>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	4a04      	ldr	r2, [pc, #16]	@ (8005d3c <prvResetNextTaskUnblockTime+0x3c>)
 8005d2a:	6013      	str	r3, [r2, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	20000d60 	.word	0x20000d60
 8005d3c:	20000dc8 	.word	0x20000dc8

08005d40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d46:	4b0b      	ldr	r3, [pc, #44]	@ (8005d74 <xTaskGetSchedulerState+0x34>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	607b      	str	r3, [r7, #4]
 8005d52:	e008      	b.n	8005d66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d54:	4b08      	ldr	r3, [pc, #32]	@ (8005d78 <xTaskGetSchedulerState+0x38>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d102      	bne.n	8005d62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	607b      	str	r3, [r7, #4]
 8005d60:	e001      	b.n	8005d66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d62:	2300      	movs	r3, #0
 8005d64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d66:	687b      	ldr	r3, [r7, #4]
	}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	20000db4 	.word	0x20000db4
 8005d78:	20000dd0 	.word	0x20000dd0

08005d7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d058      	beq.n	8005e44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d92:	4b2f      	ldr	r3, [pc, #188]	@ (8005e50 <xTaskPriorityDisinherit+0xd4>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d00b      	beq.n	8005db4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	60fb      	str	r3, [r7, #12]
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	e7fd      	b.n	8005db0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60bb      	str	r3, [r7, #8]
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd8:	1e5a      	subs	r2, r3, #1
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d02c      	beq.n	8005e44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d128      	bne.n	8005e44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fc8a 	bl	8004710 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e14:	4b0f      	ldr	r3, [pc, #60]	@ (8005e54 <xTaskPriorityDisinherit+0xd8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d903      	bls.n	8005e24 <xTaskPriorityDisinherit+0xa8>
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	4a0c      	ldr	r2, [pc, #48]	@ (8005e54 <xTaskPriorityDisinherit+0xd8>)
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4a09      	ldr	r2, [pc, #36]	@ (8005e58 <xTaskPriorityDisinherit+0xdc>)
 8005e32:	441a      	add	r2, r3
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f7fe fc0b 	bl	8004656 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e44:	697b      	ldr	r3, [r7, #20]
	}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	200008d4 	.word	0x200008d4
 8005e54:	20000db0 	.word	0x20000db0
 8005e58:	200008d8 	.word	0x200008d8

08005e5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e66:	4b21      	ldr	r3, [pc, #132]	@ (8005eec <prvAddCurrentTaskToDelayedList+0x90>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e6c:	4b20      	ldr	r3, [pc, #128]	@ (8005ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fc4c 	bl	8004710 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e7e:	d10a      	bne.n	8005e96 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d007      	beq.n	8005e96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e86:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4819      	ldr	r0, [pc, #100]	@ (8005ef4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e90:	f7fe fbe1 	bl	8004656 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e94:	e026      	b.n	8005ee4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e9e:	4b14      	ldr	r3, [pc, #80]	@ (8005ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d209      	bcs.n	8005ec2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eae:	4b12      	ldr	r3, [pc, #72]	@ (8005ef8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f7fe fbef 	bl	800469e <vListInsert>
}
 8005ec0:	e010      	b.n	8005ee4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4610      	mov	r0, r2
 8005ed0:	f7fe fbe5 	bl	800469e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d202      	bcs.n	8005ee4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ede:	4a08      	ldr	r2, [pc, #32]	@ (8005f00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20000dac 	.word	0x20000dac
 8005ef0:	200008d4 	.word	0x200008d4
 8005ef4:	20000d94 	.word	0x20000d94
 8005ef8:	20000d64 	.word	0x20000d64
 8005efc:	20000d60 	.word	0x20000d60
 8005f00:	20000dc8 	.word	0x20000dc8

08005f04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	@ 0x28
 8005f08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f0e:	f000 fb13 	bl	8006538 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f12:	4b1d      	ldr	r3, [pc, #116]	@ (8005f88 <xTimerCreateTimerTask+0x84>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d021      	beq.n	8005f5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f22:	1d3a      	adds	r2, r7, #4
 8005f24:	f107 0108 	add.w	r1, r7, #8
 8005f28:	f107 030c 	add.w	r3, r7, #12
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fe fb4b 	bl	80045c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	9202      	str	r2, [sp, #8]
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2300      	movs	r3, #0
 8005f42:	460a      	mov	r2, r1
 8005f44:	4911      	ldr	r1, [pc, #68]	@ (8005f8c <xTimerCreateTimerTask+0x88>)
 8005f46:	4812      	ldr	r0, [pc, #72]	@ (8005f90 <xTimerCreateTimerTask+0x8c>)
 8005f48:	f7ff f906 	bl	8005158 <xTaskCreateStatic>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	4a11      	ldr	r2, [pc, #68]	@ (8005f94 <xTimerCreateTimerTask+0x90>)
 8005f50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f52:	4b10      	ldr	r3, [pc, #64]	@ (8005f94 <xTimerCreateTimerTask+0x90>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	613b      	str	r3, [r7, #16]
}
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	e7fd      	b.n	8005f78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f7c:	697b      	ldr	r3, [r7, #20]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000e04 	.word	0x20000e04
 8005f8c:	08007cf0 	.word	0x08007cf0
 8005f90:	080060d1 	.word	0x080060d1
 8005f94:	20000e08 	.word	0x20000e08

08005f98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08a      	sub	sp, #40	@ 0x28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <xTimerGenericCommand+0x30>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	623b      	str	r3, [r7, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	e7fd      	b.n	8005fc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fc8:	4b19      	ldr	r3, [pc, #100]	@ (8006030 <xTimerGenericCommand+0x98>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d02a      	beq.n	8006026 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	dc18      	bgt.n	8006014 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fe2:	f7ff fead 	bl	8005d40 <xTaskGetSchedulerState>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d109      	bne.n	8006000 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fec:	4b10      	ldr	r3, [pc, #64]	@ (8006030 <xTimerGenericCommand+0x98>)
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	f107 0110 	add.w	r1, r7, #16
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff8:	f7fe fcbe 	bl	8004978 <xQueueGenericSend>
 8005ffc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ffe:	e012      	b.n	8006026 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006000:	4b0b      	ldr	r3, [pc, #44]	@ (8006030 <xTimerGenericCommand+0x98>)
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	f107 0110 	add.w	r1, r7, #16
 8006008:	2300      	movs	r3, #0
 800600a:	2200      	movs	r2, #0
 800600c:	f7fe fcb4 	bl	8004978 <xQueueGenericSend>
 8006010:	6278      	str	r0, [r7, #36]	@ 0x24
 8006012:	e008      	b.n	8006026 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006014:	4b06      	ldr	r3, [pc, #24]	@ (8006030 <xTimerGenericCommand+0x98>)
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	f107 0110 	add.w	r1, r7, #16
 800601c:	2300      	movs	r3, #0
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	f7fe fdac 	bl	8004b7c <xQueueGenericSendFromISR>
 8006024:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006028:	4618      	mov	r0, r3
 800602a:	3728      	adds	r7, #40	@ 0x28
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20000e04 	.word	0x20000e04

08006034 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af02      	add	r7, sp, #8
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800603e:	4b23      	ldr	r3, [pc, #140]	@ (80060cc <prvProcessExpiredTimer+0x98>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	3304      	adds	r3, #4
 800604c:	4618      	mov	r0, r3
 800604e:	f7fe fb5f 	bl	8004710 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d023      	beq.n	80060a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	699a      	ldr	r2, [r3, #24]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	18d1      	adds	r1, r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	6978      	ldr	r0, [r7, #20]
 800606e:	f000 f8d5 	bl	800621c <prvInsertTimerInActiveList>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d020      	beq.n	80060ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006078:	2300      	movs	r3, #0
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	2300      	movs	r3, #0
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	2100      	movs	r1, #0
 8006082:	6978      	ldr	r0, [r7, #20]
 8006084:	f7ff ff88 	bl	8005f98 <xTimerGenericCommand>
 8006088:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d114      	bne.n	80060ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	6978      	ldr	r0, [r7, #20]
 80060c0:	4798      	blx	r3
}
 80060c2:	bf00      	nop
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000dfc 	.word	0x20000dfc

080060d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060d8:	f107 0308 	add.w	r3, r7, #8
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 f859 	bl	8006194 <prvGetNextExpireTime>
 80060e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4619      	mov	r1, r3
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f805 	bl	80060f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060ee:	f000 f8d7 	bl	80062a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060f2:	bf00      	nop
 80060f4:	e7f0      	b.n	80060d8 <prvTimerTask+0x8>
	...

080060f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006102:	f7ff fa37 	bl	8005574 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006106:	f107 0308 	add.w	r3, r7, #8
 800610a:	4618      	mov	r0, r3
 800610c:	f000 f866 	bl	80061dc <prvSampleTimeNow>
 8006110:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d130      	bne.n	800617a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <prvProcessTimerOrBlockTask+0x3c>
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	429a      	cmp	r2, r3
 8006124:	d806      	bhi.n	8006134 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006126:	f7ff fa33 	bl	8005590 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ff81 	bl	8006034 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006132:	e024      	b.n	800617e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d008      	beq.n	800614c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800613a:	4b13      	ldr	r3, [pc, #76]	@ (8006188 <prvProcessTimerOrBlockTask+0x90>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <prvProcessTimerOrBlockTask+0x50>
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <prvProcessTimerOrBlockTask+0x52>
 8006148:	2300      	movs	r3, #0
 800614a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800614c:	4b0f      	ldr	r3, [pc, #60]	@ (800618c <prvProcessTimerOrBlockTask+0x94>)
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	4619      	mov	r1, r3
 800615a:	f7fe ffc9 	bl	80050f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800615e:	f7ff fa17 	bl	8005590 <xTaskResumeAll>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006168:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <prvProcessTimerOrBlockTask+0x98>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
}
 8006178:	e001      	b.n	800617e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800617a:	f7ff fa09 	bl	8005590 <xTaskResumeAll>
}
 800617e:	bf00      	nop
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000e00 	.word	0x20000e00
 800618c:	20000e04 	.word	0x20000e04
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800619c:	4b0e      	ldr	r3, [pc, #56]	@ (80061d8 <prvGetNextExpireTime+0x44>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <prvGetNextExpireTime+0x16>
 80061a6:	2201      	movs	r2, #1
 80061a8:	e000      	b.n	80061ac <prvGetNextExpireTime+0x18>
 80061aa:	2200      	movs	r2, #0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d105      	bne.n	80061c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061b8:	4b07      	ldr	r3, [pc, #28]	@ (80061d8 <prvGetNextExpireTime+0x44>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e001      	b.n	80061c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061c8:	68fb      	ldr	r3, [r7, #12]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	20000dfc 	.word	0x20000dfc

080061dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061e4:	f7ff fa72 	bl	80056cc <xTaskGetTickCount>
 80061e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006218 <prvSampleTimeNow+0x3c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d205      	bcs.n	8006200 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061f4:	f000 f93a 	bl	800646c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	e002      	b.n	8006206 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006206:	4a04      	ldr	r2, [pc, #16]	@ (8006218 <prvSampleTimeNow+0x3c>)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800620c:	68fb      	ldr	r3, [r7, #12]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000e0c 	.word	0x20000e0c

0800621c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800622a:	2300      	movs	r3, #0
 800622c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	429a      	cmp	r2, r3
 8006240:	d812      	bhi.n	8006268 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	1ad2      	subs	r2, r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	429a      	cmp	r2, r3
 800624e:	d302      	bcc.n	8006256 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006250:	2301      	movs	r3, #1
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	e01b      	b.n	800628e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006256:	4b10      	ldr	r3, [pc, #64]	@ (8006298 <prvInsertTimerInActiveList+0x7c>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3304      	adds	r3, #4
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f7fe fa1c 	bl	800469e <vListInsert>
 8006266:	e012      	b.n	800628e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	429a      	cmp	r2, r3
 800626e:	d206      	bcs.n	800627e <prvInsertTimerInActiveList+0x62>
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d302      	bcc.n	800627e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006278:	2301      	movs	r3, #1
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	e007      	b.n	800628e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800627e:	4b07      	ldr	r3, [pc, #28]	@ (800629c <prvInsertTimerInActiveList+0x80>)
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3304      	adds	r3, #4
 8006286:	4619      	mov	r1, r3
 8006288:	4610      	mov	r0, r2
 800628a:	f7fe fa08 	bl	800469e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800628e:	697b      	ldr	r3, [r7, #20]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20000e00 	.word	0x20000e00
 800629c:	20000dfc 	.word	0x20000dfc

080062a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08e      	sub	sp, #56	@ 0x38
 80062a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062a6:	e0ce      	b.n	8006446 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	da19      	bge.n	80062e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	3304      	adds	r3, #4
 80062b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10b      	bne.n	80062d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	61fb      	str	r3, [r7, #28]
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	e7fd      	b.n	80062ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062d8:	6850      	ldr	r0, [r2, #4]
 80062da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062dc:	6892      	ldr	r2, [r2, #8]
 80062de:	4611      	mov	r1, r2
 80062e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f2c0 80ae 	blt.w	8006446 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d004      	beq.n	8006300 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f8:	3304      	adds	r3, #4
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe fa08 	bl	8004710 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006300:	463b      	mov	r3, r7
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff ff6a 	bl	80061dc <prvSampleTimeNow>
 8006308:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b09      	cmp	r3, #9
 800630e:	f200 8097 	bhi.w	8006440 <prvProcessReceivedCommands+0x1a0>
 8006312:	a201      	add	r2, pc, #4	@ (adr r2, 8006318 <prvProcessReceivedCommands+0x78>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	08006341 	.word	0x08006341
 800631c:	08006341 	.word	0x08006341
 8006320:	08006341 	.word	0x08006341
 8006324:	080063b7 	.word	0x080063b7
 8006328:	080063cb 	.word	0x080063cb
 800632c:	08006417 	.word	0x08006417
 8006330:	08006341 	.word	0x08006341
 8006334:	08006341 	.word	0x08006341
 8006338:	080063b7 	.word	0x080063b7
 800633c:	080063cb 	.word	0x080063cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006342:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	b2da      	uxtb	r2, r3
 800634c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	18d1      	adds	r1, r2, r3
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800635e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006360:	f7ff ff5c 	bl	800621c <prvInsertTimerInActiveList>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d06c      	beq.n	8006444 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006370:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d061      	beq.n	8006444 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	441a      	add	r2, r3
 8006388:	2300      	movs	r3, #0
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	2300      	movs	r3, #0
 800638e:	2100      	movs	r1, #0
 8006390:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006392:	f7ff fe01 	bl	8005f98 <xTimerGenericCommand>
 8006396:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d152      	bne.n	8006444 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	61bb      	str	r3, [r7, #24]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063bc:	f023 0301 	bic.w	r3, r3, #1
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063c8:	e03d      	b.n	8006446 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063d0:	f043 0301 	orr.w	r3, r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	617b      	str	r3, [r7, #20]
}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	e7fd      	b.n	80063fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	699a      	ldr	r2, [r3, #24]
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	18d1      	adds	r1, r2, r3
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800640e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006410:	f7ff ff04 	bl	800621c <prvInsertTimerInActiveList>
					break;
 8006414:	e017      	b.n	8006446 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d103      	bne.n	800642c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006426:	f000 fbe7 	bl	8006bf8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800642a:	e00c      	b.n	8006446 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	b2da      	uxtb	r2, r3
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800643e:	e002      	b.n	8006446 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006440:	bf00      	nop
 8006442:	e000      	b.n	8006446 <prvProcessReceivedCommands+0x1a6>
					break;
 8006444:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006446:	4b08      	ldr	r3, [pc, #32]	@ (8006468 <prvProcessReceivedCommands+0x1c8>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	1d39      	adds	r1, r7, #4
 800644c:	2200      	movs	r2, #0
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fc32 	bl	8004cb8 <xQueueReceive>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	f47f af26 	bne.w	80062a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	3730      	adds	r7, #48	@ 0x30
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000e04 	.word	0x20000e04

0800646c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006472:	e049      	b.n	8006508 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006474:	4b2e      	ldr	r3, [pc, #184]	@ (8006530 <prvSwitchTimerLists+0xc4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800647e:	4b2c      	ldr	r3, [pc, #176]	@ (8006530 <prvSwitchTimerLists+0xc4>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3304      	adds	r3, #4
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe f93f 	bl	8004710 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d02f      	beq.n	8006508 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d90e      	bls.n	80064d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006530 <prvSwitchTimerLists+0xc4>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f7fe f8e4 	bl	800469e <vListInsert>
 80064d6:	e017      	b.n	8006508 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2300      	movs	r3, #0
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	2100      	movs	r1, #0
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f7ff fd58 	bl	8005f98 <xTimerGenericCommand>
 80064e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10b      	bne.n	8006508 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	603b      	str	r3, [r7, #0]
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	e7fd      	b.n	8006504 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006508:	4b09      	ldr	r3, [pc, #36]	@ (8006530 <prvSwitchTimerLists+0xc4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1b0      	bne.n	8006474 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006512:	4b07      	ldr	r3, [pc, #28]	@ (8006530 <prvSwitchTimerLists+0xc4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006518:	4b06      	ldr	r3, [pc, #24]	@ (8006534 <prvSwitchTimerLists+0xc8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a04      	ldr	r2, [pc, #16]	@ (8006530 <prvSwitchTimerLists+0xc4>)
 800651e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006520:	4a04      	ldr	r2, [pc, #16]	@ (8006534 <prvSwitchTimerLists+0xc8>)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	6013      	str	r3, [r2, #0]
}
 8006526:	bf00      	nop
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000dfc 	.word	0x20000dfc
 8006534:	20000e00 	.word	0x20000e00

08006538 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800653e:	f000 f96b 	bl	8006818 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006542:	4b15      	ldr	r3, [pc, #84]	@ (8006598 <prvCheckForValidListAndQueue+0x60>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d120      	bne.n	800658c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800654a:	4814      	ldr	r0, [pc, #80]	@ (800659c <prvCheckForValidListAndQueue+0x64>)
 800654c:	f7fe f856 	bl	80045fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006550:	4813      	ldr	r0, [pc, #76]	@ (80065a0 <prvCheckForValidListAndQueue+0x68>)
 8006552:	f7fe f853 	bl	80045fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006556:	4b13      	ldr	r3, [pc, #76]	@ (80065a4 <prvCheckForValidListAndQueue+0x6c>)
 8006558:	4a10      	ldr	r2, [pc, #64]	@ (800659c <prvCheckForValidListAndQueue+0x64>)
 800655a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800655c:	4b12      	ldr	r3, [pc, #72]	@ (80065a8 <prvCheckForValidListAndQueue+0x70>)
 800655e:	4a10      	ldr	r2, [pc, #64]	@ (80065a0 <prvCheckForValidListAndQueue+0x68>)
 8006560:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006562:	2300      	movs	r3, #0
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	4b11      	ldr	r3, [pc, #68]	@ (80065ac <prvCheckForValidListAndQueue+0x74>)
 8006568:	4a11      	ldr	r2, [pc, #68]	@ (80065b0 <prvCheckForValidListAndQueue+0x78>)
 800656a:	2110      	movs	r1, #16
 800656c:	200a      	movs	r0, #10
 800656e:	f7fe f963 	bl	8004838 <xQueueGenericCreateStatic>
 8006572:	4603      	mov	r3, r0
 8006574:	4a08      	ldr	r2, [pc, #32]	@ (8006598 <prvCheckForValidListAndQueue+0x60>)
 8006576:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006578:	4b07      	ldr	r3, [pc, #28]	@ (8006598 <prvCheckForValidListAndQueue+0x60>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006580:	4b05      	ldr	r3, [pc, #20]	@ (8006598 <prvCheckForValidListAndQueue+0x60>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	490b      	ldr	r1, [pc, #44]	@ (80065b4 <prvCheckForValidListAndQueue+0x7c>)
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe fd88 	bl	800509c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800658c:	f000 f976 	bl	800687c <vPortExitCritical>
}
 8006590:	bf00      	nop
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000e04 	.word	0x20000e04
 800659c:	20000dd4 	.word	0x20000dd4
 80065a0:	20000de8 	.word	0x20000de8
 80065a4:	20000dfc 	.word	0x20000dfc
 80065a8:	20000e00 	.word	0x20000e00
 80065ac:	20000eb0 	.word	0x20000eb0
 80065b0:	20000e10 	.word	0x20000e10
 80065b4:	08007cf8 	.word	0x08007cf8

080065b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3b04      	subs	r3, #4
 80065c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3b04      	subs	r3, #4
 80065d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f023 0201 	bic.w	r2, r3, #1
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3b04      	subs	r3, #4
 80065e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065e8:	4a0c      	ldr	r2, [pc, #48]	@ (800661c <pxPortInitialiseStack+0x64>)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3b14      	subs	r3, #20
 80065f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3b04      	subs	r3, #4
 80065fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f06f 0202 	mvn.w	r2, #2
 8006606:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3b20      	subs	r3, #32
 800660c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800660e:	68fb      	ldr	r3, [r7, #12]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	08006621 	.word	0x08006621

08006620 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800662a:	4b13      	ldr	r3, [pc, #76]	@ (8006678 <prvTaskExitError+0x58>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006632:	d00b      	beq.n	800664c <prvTaskExitError+0x2c>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	60fb      	str	r3, [r7, #12]
}
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	e7fd      	b.n	8006648 <prvTaskExitError+0x28>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	60bb      	str	r3, [r7, #8]
}
 800665e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006660:	bf00      	nop
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0fc      	beq.n	8006662 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	2000000c 	.word	0x2000000c
 800667c:	00000000 	.word	0x00000000

08006680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006680:	4b07      	ldr	r3, [pc, #28]	@ (80066a0 <pxCurrentTCBConst2>)
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	6808      	ldr	r0, [r1, #0]
 8006686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	f380 8809 	msr	PSP, r0
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8811 	msr	BASEPRI, r0
 800669a:	4770      	bx	lr
 800669c:	f3af 8000 	nop.w

080066a0 <pxCurrentTCBConst2>:
 80066a0:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop

080066a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066a8:	4808      	ldr	r0, [pc, #32]	@ (80066cc <prvPortStartFirstTask+0x24>)
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	6800      	ldr	r0, [r0, #0]
 80066ae:	f380 8808 	msr	MSP, r0
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8814 	msr	CONTROL, r0
 80066ba:	b662      	cpsie	i
 80066bc:	b661      	cpsie	f
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	df00      	svc	0
 80066c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ca:	bf00      	nop
 80066cc:	e000ed08 	.word	0xe000ed08

080066d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066d6:	4b47      	ldr	r3, [pc, #284]	@ (80067f4 <xPortStartScheduler+0x124>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a47      	ldr	r2, [pc, #284]	@ (80067f8 <xPortStartScheduler+0x128>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10b      	bne.n	80066f8 <xPortStartScheduler+0x28>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	613b      	str	r3, [r7, #16]
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066f8:	4b3e      	ldr	r3, [pc, #248]	@ (80067f4 <xPortStartScheduler+0x124>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a3f      	ldr	r2, [pc, #252]	@ (80067fc <xPortStartScheduler+0x12c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d10b      	bne.n	800671a <xPortStartScheduler+0x4a>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	60fb      	str	r3, [r7, #12]
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop
 8006718:	e7fd      	b.n	8006716 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800671a:	4b39      	ldr	r3, [pc, #228]	@ (8006800 <xPortStartScheduler+0x130>)
 800671c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	22ff      	movs	r2, #255	@ 0xff
 800672a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800673c:	b2da      	uxtb	r2, r3
 800673e:	4b31      	ldr	r3, [pc, #196]	@ (8006804 <xPortStartScheduler+0x134>)
 8006740:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006742:	4b31      	ldr	r3, [pc, #196]	@ (8006808 <xPortStartScheduler+0x138>)
 8006744:	2207      	movs	r2, #7
 8006746:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006748:	e009      	b.n	800675e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800674a:	4b2f      	ldr	r3, [pc, #188]	@ (8006808 <xPortStartScheduler+0x138>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3b01      	subs	r3, #1
 8006750:	4a2d      	ldr	r2, [pc, #180]	@ (8006808 <xPortStartScheduler+0x138>)
 8006752:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	b2db      	uxtb	r3, r3
 800675c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006766:	2b80      	cmp	r3, #128	@ 0x80
 8006768:	d0ef      	beq.n	800674a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800676a:	4b27      	ldr	r3, [pc, #156]	@ (8006808 <xPortStartScheduler+0x138>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f1c3 0307 	rsb	r3, r3, #7
 8006772:	2b04      	cmp	r3, #4
 8006774:	d00b      	beq.n	800678e <xPortStartScheduler+0xbe>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	60bb      	str	r3, [r7, #8]
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	e7fd      	b.n	800678a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800678e:	4b1e      	ldr	r3, [pc, #120]	@ (8006808 <xPortStartScheduler+0x138>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	4a1c      	ldr	r2, [pc, #112]	@ (8006808 <xPortStartScheduler+0x138>)
 8006796:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006798:	4b1b      	ldr	r3, [pc, #108]	@ (8006808 <xPortStartScheduler+0x138>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067a0:	4a19      	ldr	r2, [pc, #100]	@ (8006808 <xPortStartScheduler+0x138>)
 80067a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067ac:	4b17      	ldr	r3, [pc, #92]	@ (800680c <xPortStartScheduler+0x13c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a16      	ldr	r2, [pc, #88]	@ (800680c <xPortStartScheduler+0x13c>)
 80067b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067b8:	4b14      	ldr	r3, [pc, #80]	@ (800680c <xPortStartScheduler+0x13c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a13      	ldr	r2, [pc, #76]	@ (800680c <xPortStartScheduler+0x13c>)
 80067be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80067c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067c4:	f000 f8da 	bl	800697c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067c8:	4b11      	ldr	r3, [pc, #68]	@ (8006810 <xPortStartScheduler+0x140>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067ce:	f000 f8f9 	bl	80069c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067d2:	4b10      	ldr	r3, [pc, #64]	@ (8006814 <xPortStartScheduler+0x144>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006814 <xPortStartScheduler+0x144>)
 80067d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80067dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067de:	f7ff ff63 	bl	80066a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067e2:	f7ff f83d 	bl	8005860 <vTaskSwitchContext>
	prvTaskExitError();
 80067e6:	f7ff ff1b 	bl	8006620 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	e000ed00 	.word	0xe000ed00
 80067f8:	410fc271 	.word	0x410fc271
 80067fc:	410fc270 	.word	0x410fc270
 8006800:	e000e400 	.word	0xe000e400
 8006804:	20000f00 	.word	0x20000f00
 8006808:	20000f04 	.word	0x20000f04
 800680c:	e000ed20 	.word	0xe000ed20
 8006810:	2000000c 	.word	0x2000000c
 8006814:	e000ef34 	.word	0xe000ef34

08006818 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	607b      	str	r3, [r7, #4]
}
 8006830:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006832:	4b10      	ldr	r3, [pc, #64]	@ (8006874 <vPortEnterCritical+0x5c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3301      	adds	r3, #1
 8006838:	4a0e      	ldr	r2, [pc, #56]	@ (8006874 <vPortEnterCritical+0x5c>)
 800683a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800683c:	4b0d      	ldr	r3, [pc, #52]	@ (8006874 <vPortEnterCritical+0x5c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d110      	bne.n	8006866 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006844:	4b0c      	ldr	r3, [pc, #48]	@ (8006878 <vPortEnterCritical+0x60>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <vPortEnterCritical+0x4e>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	603b      	str	r3, [r7, #0]
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	e7fd      	b.n	8006862 <vPortEnterCritical+0x4a>
	}
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	2000000c 	.word	0x2000000c
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006882:	4b12      	ldr	r3, [pc, #72]	@ (80068cc <vPortExitCritical+0x50>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <vPortExitCritical+0x26>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	607b      	str	r3, [r7, #4]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068a2:	4b0a      	ldr	r3, [pc, #40]	@ (80068cc <vPortExitCritical+0x50>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	4a08      	ldr	r2, [pc, #32]	@ (80068cc <vPortExitCritical+0x50>)
 80068aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068ac:	4b07      	ldr	r3, [pc, #28]	@ (80068cc <vPortExitCritical+0x50>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d105      	bne.n	80068c0 <vPortExitCritical+0x44>
 80068b4:	2300      	movs	r3, #0
 80068b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f383 8811 	msr	BASEPRI, r3
}
 80068be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	2000000c 	.word	0x2000000c

080068d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068d0:	f3ef 8009 	mrs	r0, PSP
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	4b15      	ldr	r3, [pc, #84]	@ (8006930 <pxCurrentTCBConst>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	f01e 0f10 	tst.w	lr, #16
 80068e0:	bf08      	it	eq
 80068e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	6010      	str	r0, [r2, #0]
 80068ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80068f4:	f380 8811 	msr	BASEPRI, r0
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f7fe ffae 	bl	8005860 <vTaskSwitchContext>
 8006904:	f04f 0000 	mov.w	r0, #0
 8006908:	f380 8811 	msr	BASEPRI, r0
 800690c:	bc09      	pop	{r0, r3}
 800690e:	6819      	ldr	r1, [r3, #0]
 8006910:	6808      	ldr	r0, [r1, #0]
 8006912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006916:	f01e 0f10 	tst.w	lr, #16
 800691a:	bf08      	it	eq
 800691c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006920:	f380 8809 	msr	PSP, r0
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w

08006930 <pxCurrentTCBConst>:
 8006930:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop

08006938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006952:	f7fe fecb 	bl	80056ec <xTaskIncrementTick>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800695c:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <xPortSysTickHandler+0x40>)
 800695e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f383 8811 	msr	BASEPRI, r3
}
 800696e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006980:	4b0b      	ldr	r3, [pc, #44]	@ (80069b0 <vPortSetupTimerInterrupt+0x34>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006986:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <vPortSetupTimerInterrupt+0x38>)
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800698c:	4b0a      	ldr	r3, [pc, #40]	@ (80069b8 <vPortSetupTimerInterrupt+0x3c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0a      	ldr	r2, [pc, #40]	@ (80069bc <vPortSetupTimerInterrupt+0x40>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	099b      	lsrs	r3, r3, #6
 8006998:	4a09      	ldr	r2, [pc, #36]	@ (80069c0 <vPortSetupTimerInterrupt+0x44>)
 800699a:	3b01      	subs	r3, #1
 800699c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800699e:	4b04      	ldr	r3, [pc, #16]	@ (80069b0 <vPortSetupTimerInterrupt+0x34>)
 80069a0:	2207      	movs	r2, #7
 80069a2:	601a      	str	r2, [r3, #0]
}
 80069a4:	bf00      	nop
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e000e010 	.word	0xe000e010
 80069b4:	e000e018 	.word	0xe000e018
 80069b8:	20000000 	.word	0x20000000
 80069bc:	10624dd3 	.word	0x10624dd3
 80069c0:	e000e014 	.word	0xe000e014

080069c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80069d4 <vPortEnableVFP+0x10>
 80069c8:	6801      	ldr	r1, [r0, #0]
 80069ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80069ce:	6001      	str	r1, [r0, #0]
 80069d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069d2:	bf00      	nop
 80069d4:	e000ed88 	.word	0xe000ed88

080069d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069de:	f3ef 8305 	mrs	r3, IPSR
 80069e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b0f      	cmp	r3, #15
 80069e8:	d915      	bls.n	8006a16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069ea:	4a18      	ldr	r2, [pc, #96]	@ (8006a4c <vPortValidateInterruptPriority+0x74>)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069f4:	4b16      	ldr	r3, [pc, #88]	@ (8006a50 <vPortValidateInterruptPriority+0x78>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	7afa      	ldrb	r2, [r7, #11]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d20b      	bcs.n	8006a16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	607b      	str	r3, [r7, #4]
}
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
 8006a14:	e7fd      	b.n	8006a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a16:	4b0f      	ldr	r3, [pc, #60]	@ (8006a54 <vPortValidateInterruptPriority+0x7c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a58 <vPortValidateInterruptPriority+0x80>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d90b      	bls.n	8006a3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	603b      	str	r3, [r7, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	e7fd      	b.n	8006a3a <vPortValidateInterruptPriority+0x62>
	}
 8006a3e:	bf00      	nop
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	e000e3f0 	.word	0xe000e3f0
 8006a50:	20000f00 	.word	0x20000f00
 8006a54:	e000ed0c 	.word	0xe000ed0c
 8006a58:	20000f04 	.word	0x20000f04

08006a5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08a      	sub	sp, #40	@ 0x28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a68:	f7fe fd84 	bl	8005574 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a6c:	4b5c      	ldr	r3, [pc, #368]	@ (8006be0 <pvPortMalloc+0x184>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a74:	f000 f924 	bl	8006cc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a78:	4b5a      	ldr	r3, [pc, #360]	@ (8006be4 <pvPortMalloc+0x188>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f040 8095 	bne.w	8006bb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01e      	beq.n	8006aca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a8c:	2208      	movs	r2, #8
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d015      	beq.n	8006aca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f023 0307 	bic.w	r3, r3, #7
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <pvPortMalloc+0x6e>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	617b      	str	r3, [r7, #20]
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	e7fd      	b.n	8006ac6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d06f      	beq.n	8006bb0 <pvPortMalloc+0x154>
 8006ad0:	4b45      	ldr	r3, [pc, #276]	@ (8006be8 <pvPortMalloc+0x18c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d86a      	bhi.n	8006bb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ada:	4b44      	ldr	r3, [pc, #272]	@ (8006bec <pvPortMalloc+0x190>)
 8006adc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ade:	4b43      	ldr	r3, [pc, #268]	@ (8006bec <pvPortMalloc+0x190>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ae4:	e004      	b.n	8006af0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d903      	bls.n	8006b02 <pvPortMalloc+0xa6>
 8006afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1f1      	bne.n	8006ae6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b02:	4b37      	ldr	r3, [pc, #220]	@ (8006be0 <pvPortMalloc+0x184>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d051      	beq.n	8006bb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2208      	movs	r2, #8
 8006b12:	4413      	add	r3, r2
 8006b14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	2308      	movs	r3, #8
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d920      	bls.n	8006b70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4413      	add	r3, r2
 8006b34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00b      	beq.n	8006b58 <pvPortMalloc+0xfc>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	613b      	str	r3, [r7, #16]
}
 8006b52:	bf00      	nop
 8006b54:	bf00      	nop
 8006b56:	e7fd      	b.n	8006b54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	1ad2      	subs	r2, r2, r3
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b6a:	69b8      	ldr	r0, [r7, #24]
 8006b6c:	f000 f90a 	bl	8006d84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b70:	4b1d      	ldr	r3, [pc, #116]	@ (8006be8 <pvPortMalloc+0x18c>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006be8 <pvPortMalloc+0x18c>)
 8006b7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006be8 <pvPortMalloc+0x18c>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf0 <pvPortMalloc+0x194>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d203      	bcs.n	8006b92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b8a:	4b17      	ldr	r3, [pc, #92]	@ (8006be8 <pvPortMalloc+0x18c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a18      	ldr	r2, [pc, #96]	@ (8006bf0 <pvPortMalloc+0x194>)
 8006b90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4b13      	ldr	r3, [pc, #76]	@ (8006be4 <pvPortMalloc+0x188>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ba6:	4b13      	ldr	r3, [pc, #76]	@ (8006bf4 <pvPortMalloc+0x198>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3301      	adds	r3, #1
 8006bac:	4a11      	ldr	r2, [pc, #68]	@ (8006bf4 <pvPortMalloc+0x198>)
 8006bae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bb0:	f7fe fcee 	bl	8005590 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <pvPortMalloc+0x17a>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	60fb      	str	r3, [r7, #12]
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	e7fd      	b.n	8006bd2 <pvPortMalloc+0x176>
	return pvReturn;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3728      	adds	r7, #40	@ 0x28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20001b10 	.word	0x20001b10
 8006be4:	20001b24 	.word	0x20001b24
 8006be8:	20001b14 	.word	0x20001b14
 8006bec:	20001b08 	.word	0x20001b08
 8006bf0:	20001b18 	.word	0x20001b18
 8006bf4:	20001b1c 	.word	0x20001b1c

08006bf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d04f      	beq.n	8006caa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c0a:	2308      	movs	r3, #8
 8006c0c:	425b      	negs	r3, r3
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4413      	add	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	4b25      	ldr	r3, [pc, #148]	@ (8006cb4 <vPortFree+0xbc>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4013      	ands	r3, r2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10b      	bne.n	8006c3e <vPortFree+0x46>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	60fb      	str	r3, [r7, #12]
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	e7fd      	b.n	8006c3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00b      	beq.n	8006c5e <vPortFree+0x66>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60bb      	str	r3, [r7, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	e7fd      	b.n	8006c5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	4b14      	ldr	r3, [pc, #80]	@ (8006cb4 <vPortFree+0xbc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4013      	ands	r3, r2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01e      	beq.n	8006caa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d11a      	bne.n	8006caa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb4 <vPortFree+0xbc>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	401a      	ands	r2, r3
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c84:	f7fe fc76 	bl	8005574 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb8 <vPortFree+0xc0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4413      	add	r3, r2
 8006c92:	4a09      	ldr	r2, [pc, #36]	@ (8006cb8 <vPortFree+0xc0>)
 8006c94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c96:	6938      	ldr	r0, [r7, #16]
 8006c98:	f000 f874 	bl	8006d84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c9c:	4b07      	ldr	r3, [pc, #28]	@ (8006cbc <vPortFree+0xc4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	4a06      	ldr	r2, [pc, #24]	@ (8006cbc <vPortFree+0xc4>)
 8006ca4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006ca6:	f7fe fc73 	bl	8005590 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006caa:	bf00      	nop
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20001b24 	.word	0x20001b24
 8006cb8:	20001b14 	.word	0x20001b14
 8006cbc:	20001b20 	.word	0x20001b20

08006cc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006cca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ccc:	4b27      	ldr	r3, [pc, #156]	@ (8006d6c <prvHeapInit+0xac>)
 8006cce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00c      	beq.n	8006cf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3307      	adds	r3, #7
 8006cde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0307 	bic.w	r3, r3, #7
 8006ce6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	4a1f      	ldr	r2, [pc, #124]	@ (8006d6c <prvHeapInit+0xac>)
 8006cf0:	4413      	add	r3, r2
 8006cf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d70 <prvHeapInit+0xb0>)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8006d70 <prvHeapInit+0xb0>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	4413      	add	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0307 	bic.w	r3, r3, #7
 8006d1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4a15      	ldr	r2, [pc, #84]	@ (8006d74 <prvHeapInit+0xb4>)
 8006d20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d22:	4b14      	ldr	r3, [pc, #80]	@ (8006d74 <prvHeapInit+0xb4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2200      	movs	r2, #0
 8006d28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d2a:	4b12      	ldr	r3, [pc, #72]	@ (8006d74 <prvHeapInit+0xb4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	1ad2      	subs	r2, r2, r3
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d40:	4b0c      	ldr	r3, [pc, #48]	@ (8006d74 <prvHeapInit+0xb4>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d78 <prvHeapInit+0xb8>)
 8006d4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4a09      	ldr	r2, [pc, #36]	@ (8006d7c <prvHeapInit+0xbc>)
 8006d56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d58:	4b09      	ldr	r3, [pc, #36]	@ (8006d80 <prvHeapInit+0xc0>)
 8006d5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d5e:	601a      	str	r2, [r3, #0]
}
 8006d60:	bf00      	nop
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	20000f08 	.word	0x20000f08
 8006d70:	20001b08 	.word	0x20001b08
 8006d74:	20001b10 	.word	0x20001b10
 8006d78:	20001b18 	.word	0x20001b18
 8006d7c:	20001b14 	.word	0x20001b14
 8006d80:	20001b24 	.word	0x20001b24

08006d84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d8c:	4b28      	ldr	r3, [pc, #160]	@ (8006e30 <prvInsertBlockIntoFreeList+0xac>)
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	e002      	b.n	8006d98 <prvInsertBlockIntoFreeList+0x14>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d8f7      	bhi.n	8006d92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	4413      	add	r3, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d108      	bne.n	8006dc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	441a      	add	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	441a      	add	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d118      	bne.n	8006e0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b15      	ldr	r3, [pc, #84]	@ (8006e34 <prvInsertBlockIntoFreeList+0xb0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d00d      	beq.n	8006e02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	441a      	add	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e008      	b.n	8006e14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e02:	4b0c      	ldr	r3, [pc, #48]	@ (8006e34 <prvInsertBlockIntoFreeList+0xb0>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	e003      	b.n	8006e14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d002      	beq.n	8006e22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20001b08 	.word	0x20001b08
 8006e34:	20001b10 	.word	0x20001b10

08006e38 <std>:
 8006e38:	2300      	movs	r3, #0
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e46:	6083      	str	r3, [r0, #8]
 8006e48:	8181      	strh	r1, [r0, #12]
 8006e4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e4c:	81c2      	strh	r2, [r0, #14]
 8006e4e:	6183      	str	r3, [r0, #24]
 8006e50:	4619      	mov	r1, r3
 8006e52:	2208      	movs	r2, #8
 8006e54:	305c      	adds	r0, #92	@ 0x5c
 8006e56:	f000 f906 	bl	8007066 <memset>
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e90 <std+0x58>)
 8006e5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <std+0x5c>)
 8006e60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e62:	4b0d      	ldr	r3, [pc, #52]	@ (8006e98 <std+0x60>)
 8006e64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e66:	4b0d      	ldr	r3, [pc, #52]	@ (8006e9c <std+0x64>)
 8006e68:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <std+0x68>)
 8006e6c:	6224      	str	r4, [r4, #32]
 8006e6e:	429c      	cmp	r4, r3
 8006e70:	d006      	beq.n	8006e80 <std+0x48>
 8006e72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e76:	4294      	cmp	r4, r2
 8006e78:	d002      	beq.n	8006e80 <std+0x48>
 8006e7a:	33d0      	adds	r3, #208	@ 0xd0
 8006e7c:	429c      	cmp	r4, r3
 8006e7e:	d105      	bne.n	8006e8c <std+0x54>
 8006e80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e88:	f000 b966 	b.w	8007158 <__retarget_lock_init_recursive>
 8006e8c:	bd10      	pop	{r4, pc}
 8006e8e:	bf00      	nop
 8006e90:	08006fe1 	.word	0x08006fe1
 8006e94:	08007003 	.word	0x08007003
 8006e98:	0800703b 	.word	0x0800703b
 8006e9c:	0800705f 	.word	0x0800705f
 8006ea0:	20001b28 	.word	0x20001b28

08006ea4 <stdio_exit_handler>:
 8006ea4:	4a02      	ldr	r2, [pc, #8]	@ (8006eb0 <stdio_exit_handler+0xc>)
 8006ea6:	4903      	ldr	r1, [pc, #12]	@ (8006eb4 <stdio_exit_handler+0x10>)
 8006ea8:	4803      	ldr	r0, [pc, #12]	@ (8006eb8 <stdio_exit_handler+0x14>)
 8006eaa:	f000 b869 	b.w	8006f80 <_fwalk_sglue>
 8006eae:	bf00      	nop
 8006eb0:	20000010 	.word	0x20000010
 8006eb4:	08007a15 	.word	0x08007a15
 8006eb8:	20000020 	.word	0x20000020

08006ebc <cleanup_stdio>:
 8006ebc:	6841      	ldr	r1, [r0, #4]
 8006ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef0 <cleanup_stdio+0x34>)
 8006ec0:	4299      	cmp	r1, r3
 8006ec2:	b510      	push	{r4, lr}
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	d001      	beq.n	8006ecc <cleanup_stdio+0x10>
 8006ec8:	f000 fda4 	bl	8007a14 <_fflush_r>
 8006ecc:	68a1      	ldr	r1, [r4, #8]
 8006ece:	4b09      	ldr	r3, [pc, #36]	@ (8006ef4 <cleanup_stdio+0x38>)
 8006ed0:	4299      	cmp	r1, r3
 8006ed2:	d002      	beq.n	8006eda <cleanup_stdio+0x1e>
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fd9d 	bl	8007a14 <_fflush_r>
 8006eda:	68e1      	ldr	r1, [r4, #12]
 8006edc:	4b06      	ldr	r3, [pc, #24]	@ (8006ef8 <cleanup_stdio+0x3c>)
 8006ede:	4299      	cmp	r1, r3
 8006ee0:	d004      	beq.n	8006eec <cleanup_stdio+0x30>
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee8:	f000 bd94 	b.w	8007a14 <_fflush_r>
 8006eec:	bd10      	pop	{r4, pc}
 8006eee:	bf00      	nop
 8006ef0:	20001b28 	.word	0x20001b28
 8006ef4:	20001b90 	.word	0x20001b90
 8006ef8:	20001bf8 	.word	0x20001bf8

08006efc <global_stdio_init.part.0>:
 8006efc:	b510      	push	{r4, lr}
 8006efe:	4b0b      	ldr	r3, [pc, #44]	@ (8006f2c <global_stdio_init.part.0+0x30>)
 8006f00:	4c0b      	ldr	r4, [pc, #44]	@ (8006f30 <global_stdio_init.part.0+0x34>)
 8006f02:	4a0c      	ldr	r2, [pc, #48]	@ (8006f34 <global_stdio_init.part.0+0x38>)
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	4620      	mov	r0, r4
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2104      	movs	r1, #4
 8006f0c:	f7ff ff94 	bl	8006e38 <std>
 8006f10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f14:	2201      	movs	r2, #1
 8006f16:	2109      	movs	r1, #9
 8006f18:	f7ff ff8e 	bl	8006e38 <std>
 8006f1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f20:	2202      	movs	r2, #2
 8006f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f26:	2112      	movs	r1, #18
 8006f28:	f7ff bf86 	b.w	8006e38 <std>
 8006f2c:	20001c60 	.word	0x20001c60
 8006f30:	20001b28 	.word	0x20001b28
 8006f34:	08006ea5 	.word	0x08006ea5

08006f38 <__sfp_lock_acquire>:
 8006f38:	4801      	ldr	r0, [pc, #4]	@ (8006f40 <__sfp_lock_acquire+0x8>)
 8006f3a:	f000 b90e 	b.w	800715a <__retarget_lock_acquire_recursive>
 8006f3e:	bf00      	nop
 8006f40:	20001c69 	.word	0x20001c69

08006f44 <__sfp_lock_release>:
 8006f44:	4801      	ldr	r0, [pc, #4]	@ (8006f4c <__sfp_lock_release+0x8>)
 8006f46:	f000 b909 	b.w	800715c <__retarget_lock_release_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	20001c69 	.word	0x20001c69

08006f50 <__sinit>:
 8006f50:	b510      	push	{r4, lr}
 8006f52:	4604      	mov	r4, r0
 8006f54:	f7ff fff0 	bl	8006f38 <__sfp_lock_acquire>
 8006f58:	6a23      	ldr	r3, [r4, #32]
 8006f5a:	b11b      	cbz	r3, 8006f64 <__sinit+0x14>
 8006f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f60:	f7ff bff0 	b.w	8006f44 <__sfp_lock_release>
 8006f64:	4b04      	ldr	r3, [pc, #16]	@ (8006f78 <__sinit+0x28>)
 8006f66:	6223      	str	r3, [r4, #32]
 8006f68:	4b04      	ldr	r3, [pc, #16]	@ (8006f7c <__sinit+0x2c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1f5      	bne.n	8006f5c <__sinit+0xc>
 8006f70:	f7ff ffc4 	bl	8006efc <global_stdio_init.part.0>
 8006f74:	e7f2      	b.n	8006f5c <__sinit+0xc>
 8006f76:	bf00      	nop
 8006f78:	08006ebd 	.word	0x08006ebd
 8006f7c:	20001c60 	.word	0x20001c60

08006f80 <_fwalk_sglue>:
 8006f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f84:	4607      	mov	r7, r0
 8006f86:	4688      	mov	r8, r1
 8006f88:	4614      	mov	r4, r2
 8006f8a:	2600      	movs	r6, #0
 8006f8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f90:	f1b9 0901 	subs.w	r9, r9, #1
 8006f94:	d505      	bpl.n	8006fa2 <_fwalk_sglue+0x22>
 8006f96:	6824      	ldr	r4, [r4, #0]
 8006f98:	2c00      	cmp	r4, #0
 8006f9a:	d1f7      	bne.n	8006f8c <_fwalk_sglue+0xc>
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fa2:	89ab      	ldrh	r3, [r5, #12]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d907      	bls.n	8006fb8 <_fwalk_sglue+0x38>
 8006fa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fac:	3301      	adds	r3, #1
 8006fae:	d003      	beq.n	8006fb8 <_fwalk_sglue+0x38>
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	47c0      	blx	r8
 8006fb6:	4306      	orrs	r6, r0
 8006fb8:	3568      	adds	r5, #104	@ 0x68
 8006fba:	e7e9      	b.n	8006f90 <_fwalk_sglue+0x10>

08006fbc <iprintf>:
 8006fbc:	b40f      	push	{r0, r1, r2, r3}
 8006fbe:	b507      	push	{r0, r1, r2, lr}
 8006fc0:	4906      	ldr	r1, [pc, #24]	@ (8006fdc <iprintf+0x20>)
 8006fc2:	ab04      	add	r3, sp, #16
 8006fc4:	6808      	ldr	r0, [r1, #0]
 8006fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fca:	6881      	ldr	r1, [r0, #8]
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	f000 f9f7 	bl	80073c0 <_vfiprintf_r>
 8006fd2:	b003      	add	sp, #12
 8006fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fd8:	b004      	add	sp, #16
 8006fda:	4770      	bx	lr
 8006fdc:	2000001c 	.word	0x2000001c

08006fe0 <__sread>:
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe8:	f000 f868 	bl	80070bc <_read_r>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	bfab      	itete	ge
 8006ff0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ff4:	181b      	addge	r3, r3, r0
 8006ff6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ffa:	bfac      	ite	ge
 8006ffc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ffe:	81a3      	strhlt	r3, [r4, #12]
 8007000:	bd10      	pop	{r4, pc}

08007002 <__swrite>:
 8007002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007006:	461f      	mov	r7, r3
 8007008:	898b      	ldrh	r3, [r1, #12]
 800700a:	05db      	lsls	r3, r3, #23
 800700c:	4605      	mov	r5, r0
 800700e:	460c      	mov	r4, r1
 8007010:	4616      	mov	r6, r2
 8007012:	d505      	bpl.n	8007020 <__swrite+0x1e>
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	2302      	movs	r3, #2
 800701a:	2200      	movs	r2, #0
 800701c:	f000 f83c 	bl	8007098 <_lseek_r>
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007026:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800702a:	81a3      	strh	r3, [r4, #12]
 800702c:	4632      	mov	r2, r6
 800702e:	463b      	mov	r3, r7
 8007030:	4628      	mov	r0, r5
 8007032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007036:	f000 b853 	b.w	80070e0 <_write_r>

0800703a <__sseek>:
 800703a:	b510      	push	{r4, lr}
 800703c:	460c      	mov	r4, r1
 800703e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007042:	f000 f829 	bl	8007098 <_lseek_r>
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	bf15      	itete	ne
 800704c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800704e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007052:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007056:	81a3      	strheq	r3, [r4, #12]
 8007058:	bf18      	it	ne
 800705a:	81a3      	strhne	r3, [r4, #12]
 800705c:	bd10      	pop	{r4, pc}

0800705e <__sclose>:
 800705e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007062:	f000 b809 	b.w	8007078 <_close_r>

08007066 <memset>:
 8007066:	4402      	add	r2, r0
 8007068:	4603      	mov	r3, r0
 800706a:	4293      	cmp	r3, r2
 800706c:	d100      	bne.n	8007070 <memset+0xa>
 800706e:	4770      	bx	lr
 8007070:	f803 1b01 	strb.w	r1, [r3], #1
 8007074:	e7f9      	b.n	800706a <memset+0x4>
	...

08007078 <_close_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4d06      	ldr	r5, [pc, #24]	@ (8007094 <_close_r+0x1c>)
 800707c:	2300      	movs	r3, #0
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	f7f9 fe21 	bl	8000cca <_close>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_close_r+0x1a>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_close_r+0x1a>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	20001c64 	.word	0x20001c64

08007098 <_lseek_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4d07      	ldr	r5, [pc, #28]	@ (80070b8 <_lseek_r+0x20>)
 800709c:	4604      	mov	r4, r0
 800709e:	4608      	mov	r0, r1
 80070a0:	4611      	mov	r1, r2
 80070a2:	2200      	movs	r2, #0
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7f9 fe36 	bl	8000d18 <_lseek>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_lseek_r+0x1e>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_lseek_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	20001c64 	.word	0x20001c64

080070bc <_read_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4d07      	ldr	r5, [pc, #28]	@ (80070dc <_read_r+0x20>)
 80070c0:	4604      	mov	r4, r0
 80070c2:	4608      	mov	r0, r1
 80070c4:	4611      	mov	r1, r2
 80070c6:	2200      	movs	r2, #0
 80070c8:	602a      	str	r2, [r5, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f7f9 fde0 	bl	8000c90 <_read>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d102      	bne.n	80070da <_read_r+0x1e>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	b103      	cbz	r3, 80070da <_read_r+0x1e>
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	20001c64 	.word	0x20001c64

080070e0 <_write_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d07      	ldr	r5, [pc, #28]	@ (8007100 <_write_r+0x20>)
 80070e4:	4604      	mov	r4, r0
 80070e6:	4608      	mov	r0, r1
 80070e8:	4611      	mov	r1, r2
 80070ea:	2200      	movs	r2, #0
 80070ec:	602a      	str	r2, [r5, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f7f9 fa5e 	bl	80005b0 <_write>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_write_r+0x1e>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_write_r+0x1e>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	20001c64 	.word	0x20001c64

08007104 <__errno>:
 8007104:	4b01      	ldr	r3, [pc, #4]	@ (800710c <__errno+0x8>)
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	2000001c 	.word	0x2000001c

08007110 <__libc_init_array>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4d0d      	ldr	r5, [pc, #52]	@ (8007148 <__libc_init_array+0x38>)
 8007114:	4c0d      	ldr	r4, [pc, #52]	@ (800714c <__libc_init_array+0x3c>)
 8007116:	1b64      	subs	r4, r4, r5
 8007118:	10a4      	asrs	r4, r4, #2
 800711a:	2600      	movs	r6, #0
 800711c:	42a6      	cmp	r6, r4
 800711e:	d109      	bne.n	8007134 <__libc_init_array+0x24>
 8007120:	4d0b      	ldr	r5, [pc, #44]	@ (8007150 <__libc_init_array+0x40>)
 8007122:	4c0c      	ldr	r4, [pc, #48]	@ (8007154 <__libc_init_array+0x44>)
 8007124:	f000 fdc6 	bl	8007cb4 <_init>
 8007128:	1b64      	subs	r4, r4, r5
 800712a:	10a4      	asrs	r4, r4, #2
 800712c:	2600      	movs	r6, #0
 800712e:	42a6      	cmp	r6, r4
 8007130:	d105      	bne.n	800713e <__libc_init_array+0x2e>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	f855 3b04 	ldr.w	r3, [r5], #4
 8007138:	4798      	blx	r3
 800713a:	3601      	adds	r6, #1
 800713c:	e7ee      	b.n	800711c <__libc_init_array+0xc>
 800713e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007142:	4798      	blx	r3
 8007144:	3601      	adds	r6, #1
 8007146:	e7f2      	b.n	800712e <__libc_init_array+0x1e>
 8007148:	08007db0 	.word	0x08007db0
 800714c:	08007db0 	.word	0x08007db0
 8007150:	08007db0 	.word	0x08007db0
 8007154:	08007db4 	.word	0x08007db4

08007158 <__retarget_lock_init_recursive>:
 8007158:	4770      	bx	lr

0800715a <__retarget_lock_acquire_recursive>:
 800715a:	4770      	bx	lr

0800715c <__retarget_lock_release_recursive>:
 800715c:	4770      	bx	lr

0800715e <memcpy>:
 800715e:	440a      	add	r2, r1
 8007160:	4291      	cmp	r1, r2
 8007162:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007166:	d100      	bne.n	800716a <memcpy+0xc>
 8007168:	4770      	bx	lr
 800716a:	b510      	push	{r4, lr}
 800716c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007170:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007174:	4291      	cmp	r1, r2
 8007176:	d1f9      	bne.n	800716c <memcpy+0xe>
 8007178:	bd10      	pop	{r4, pc}
	...

0800717c <_free_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4605      	mov	r5, r0
 8007180:	2900      	cmp	r1, #0
 8007182:	d041      	beq.n	8007208 <_free_r+0x8c>
 8007184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007188:	1f0c      	subs	r4, r1, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	bfb8      	it	lt
 800718e:	18e4      	addlt	r4, r4, r3
 8007190:	f000 f8e0 	bl	8007354 <__malloc_lock>
 8007194:	4a1d      	ldr	r2, [pc, #116]	@ (800720c <_free_r+0x90>)
 8007196:	6813      	ldr	r3, [r2, #0]
 8007198:	b933      	cbnz	r3, 80071a8 <_free_r+0x2c>
 800719a:	6063      	str	r3, [r4, #4]
 800719c:	6014      	str	r4, [r2, #0]
 800719e:	4628      	mov	r0, r5
 80071a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071a4:	f000 b8dc 	b.w	8007360 <__malloc_unlock>
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	d908      	bls.n	80071be <_free_r+0x42>
 80071ac:	6820      	ldr	r0, [r4, #0]
 80071ae:	1821      	adds	r1, r4, r0
 80071b0:	428b      	cmp	r3, r1
 80071b2:	bf01      	itttt	eq
 80071b4:	6819      	ldreq	r1, [r3, #0]
 80071b6:	685b      	ldreq	r3, [r3, #4]
 80071b8:	1809      	addeq	r1, r1, r0
 80071ba:	6021      	streq	r1, [r4, #0]
 80071bc:	e7ed      	b.n	800719a <_free_r+0x1e>
 80071be:	461a      	mov	r2, r3
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	b10b      	cbz	r3, 80071c8 <_free_r+0x4c>
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	d9fa      	bls.n	80071be <_free_r+0x42>
 80071c8:	6811      	ldr	r1, [r2, #0]
 80071ca:	1850      	adds	r0, r2, r1
 80071cc:	42a0      	cmp	r0, r4
 80071ce:	d10b      	bne.n	80071e8 <_free_r+0x6c>
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	4401      	add	r1, r0
 80071d4:	1850      	adds	r0, r2, r1
 80071d6:	4283      	cmp	r3, r0
 80071d8:	6011      	str	r1, [r2, #0]
 80071da:	d1e0      	bne.n	800719e <_free_r+0x22>
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	6053      	str	r3, [r2, #4]
 80071e2:	4408      	add	r0, r1
 80071e4:	6010      	str	r0, [r2, #0]
 80071e6:	e7da      	b.n	800719e <_free_r+0x22>
 80071e8:	d902      	bls.n	80071f0 <_free_r+0x74>
 80071ea:	230c      	movs	r3, #12
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	e7d6      	b.n	800719e <_free_r+0x22>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	1821      	adds	r1, r4, r0
 80071f4:	428b      	cmp	r3, r1
 80071f6:	bf04      	itt	eq
 80071f8:	6819      	ldreq	r1, [r3, #0]
 80071fa:	685b      	ldreq	r3, [r3, #4]
 80071fc:	6063      	str	r3, [r4, #4]
 80071fe:	bf04      	itt	eq
 8007200:	1809      	addeq	r1, r1, r0
 8007202:	6021      	streq	r1, [r4, #0]
 8007204:	6054      	str	r4, [r2, #4]
 8007206:	e7ca      	b.n	800719e <_free_r+0x22>
 8007208:	bd38      	pop	{r3, r4, r5, pc}
 800720a:	bf00      	nop
 800720c:	20001c70 	.word	0x20001c70

08007210 <sbrk_aligned>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	4e0f      	ldr	r6, [pc, #60]	@ (8007250 <sbrk_aligned+0x40>)
 8007214:	460c      	mov	r4, r1
 8007216:	6831      	ldr	r1, [r6, #0]
 8007218:	4605      	mov	r5, r0
 800721a:	b911      	cbnz	r1, 8007222 <sbrk_aligned+0x12>
 800721c:	f000 fcb6 	bl	8007b8c <_sbrk_r>
 8007220:	6030      	str	r0, [r6, #0]
 8007222:	4621      	mov	r1, r4
 8007224:	4628      	mov	r0, r5
 8007226:	f000 fcb1 	bl	8007b8c <_sbrk_r>
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	d103      	bne.n	8007236 <sbrk_aligned+0x26>
 800722e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007232:	4620      	mov	r0, r4
 8007234:	bd70      	pop	{r4, r5, r6, pc}
 8007236:	1cc4      	adds	r4, r0, #3
 8007238:	f024 0403 	bic.w	r4, r4, #3
 800723c:	42a0      	cmp	r0, r4
 800723e:	d0f8      	beq.n	8007232 <sbrk_aligned+0x22>
 8007240:	1a21      	subs	r1, r4, r0
 8007242:	4628      	mov	r0, r5
 8007244:	f000 fca2 	bl	8007b8c <_sbrk_r>
 8007248:	3001      	adds	r0, #1
 800724a:	d1f2      	bne.n	8007232 <sbrk_aligned+0x22>
 800724c:	e7ef      	b.n	800722e <sbrk_aligned+0x1e>
 800724e:	bf00      	nop
 8007250:	20001c6c 	.word	0x20001c6c

08007254 <_malloc_r>:
 8007254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007258:	1ccd      	adds	r5, r1, #3
 800725a:	f025 0503 	bic.w	r5, r5, #3
 800725e:	3508      	adds	r5, #8
 8007260:	2d0c      	cmp	r5, #12
 8007262:	bf38      	it	cc
 8007264:	250c      	movcc	r5, #12
 8007266:	2d00      	cmp	r5, #0
 8007268:	4606      	mov	r6, r0
 800726a:	db01      	blt.n	8007270 <_malloc_r+0x1c>
 800726c:	42a9      	cmp	r1, r5
 800726e:	d904      	bls.n	800727a <_malloc_r+0x26>
 8007270:	230c      	movs	r3, #12
 8007272:	6033      	str	r3, [r6, #0]
 8007274:	2000      	movs	r0, #0
 8007276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800727a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007350 <_malloc_r+0xfc>
 800727e:	f000 f869 	bl	8007354 <__malloc_lock>
 8007282:	f8d8 3000 	ldr.w	r3, [r8]
 8007286:	461c      	mov	r4, r3
 8007288:	bb44      	cbnz	r4, 80072dc <_malloc_r+0x88>
 800728a:	4629      	mov	r1, r5
 800728c:	4630      	mov	r0, r6
 800728e:	f7ff ffbf 	bl	8007210 <sbrk_aligned>
 8007292:	1c43      	adds	r3, r0, #1
 8007294:	4604      	mov	r4, r0
 8007296:	d158      	bne.n	800734a <_malloc_r+0xf6>
 8007298:	f8d8 4000 	ldr.w	r4, [r8]
 800729c:	4627      	mov	r7, r4
 800729e:	2f00      	cmp	r7, #0
 80072a0:	d143      	bne.n	800732a <_malloc_r+0xd6>
 80072a2:	2c00      	cmp	r4, #0
 80072a4:	d04b      	beq.n	800733e <_malloc_r+0xea>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	4639      	mov	r1, r7
 80072aa:	4630      	mov	r0, r6
 80072ac:	eb04 0903 	add.w	r9, r4, r3
 80072b0:	f000 fc6c 	bl	8007b8c <_sbrk_r>
 80072b4:	4581      	cmp	r9, r0
 80072b6:	d142      	bne.n	800733e <_malloc_r+0xea>
 80072b8:	6821      	ldr	r1, [r4, #0]
 80072ba:	1a6d      	subs	r5, r5, r1
 80072bc:	4629      	mov	r1, r5
 80072be:	4630      	mov	r0, r6
 80072c0:	f7ff ffa6 	bl	8007210 <sbrk_aligned>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d03a      	beq.n	800733e <_malloc_r+0xea>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	442b      	add	r3, r5
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	f8d8 3000 	ldr.w	r3, [r8]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	bb62      	cbnz	r2, 8007330 <_malloc_r+0xdc>
 80072d6:	f8c8 7000 	str.w	r7, [r8]
 80072da:	e00f      	b.n	80072fc <_malloc_r+0xa8>
 80072dc:	6822      	ldr	r2, [r4, #0]
 80072de:	1b52      	subs	r2, r2, r5
 80072e0:	d420      	bmi.n	8007324 <_malloc_r+0xd0>
 80072e2:	2a0b      	cmp	r2, #11
 80072e4:	d917      	bls.n	8007316 <_malloc_r+0xc2>
 80072e6:	1961      	adds	r1, r4, r5
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	6025      	str	r5, [r4, #0]
 80072ec:	bf18      	it	ne
 80072ee:	6059      	strne	r1, [r3, #4]
 80072f0:	6863      	ldr	r3, [r4, #4]
 80072f2:	bf08      	it	eq
 80072f4:	f8c8 1000 	streq.w	r1, [r8]
 80072f8:	5162      	str	r2, [r4, r5]
 80072fa:	604b      	str	r3, [r1, #4]
 80072fc:	4630      	mov	r0, r6
 80072fe:	f000 f82f 	bl	8007360 <__malloc_unlock>
 8007302:	f104 000b 	add.w	r0, r4, #11
 8007306:	1d23      	adds	r3, r4, #4
 8007308:	f020 0007 	bic.w	r0, r0, #7
 800730c:	1ac2      	subs	r2, r0, r3
 800730e:	bf1c      	itt	ne
 8007310:	1a1b      	subne	r3, r3, r0
 8007312:	50a3      	strne	r3, [r4, r2]
 8007314:	e7af      	b.n	8007276 <_malloc_r+0x22>
 8007316:	6862      	ldr	r2, [r4, #4]
 8007318:	42a3      	cmp	r3, r4
 800731a:	bf0c      	ite	eq
 800731c:	f8c8 2000 	streq.w	r2, [r8]
 8007320:	605a      	strne	r2, [r3, #4]
 8007322:	e7eb      	b.n	80072fc <_malloc_r+0xa8>
 8007324:	4623      	mov	r3, r4
 8007326:	6864      	ldr	r4, [r4, #4]
 8007328:	e7ae      	b.n	8007288 <_malloc_r+0x34>
 800732a:	463c      	mov	r4, r7
 800732c:	687f      	ldr	r7, [r7, #4]
 800732e:	e7b6      	b.n	800729e <_malloc_r+0x4a>
 8007330:	461a      	mov	r2, r3
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	42a3      	cmp	r3, r4
 8007336:	d1fb      	bne.n	8007330 <_malloc_r+0xdc>
 8007338:	2300      	movs	r3, #0
 800733a:	6053      	str	r3, [r2, #4]
 800733c:	e7de      	b.n	80072fc <_malloc_r+0xa8>
 800733e:	230c      	movs	r3, #12
 8007340:	6033      	str	r3, [r6, #0]
 8007342:	4630      	mov	r0, r6
 8007344:	f000 f80c 	bl	8007360 <__malloc_unlock>
 8007348:	e794      	b.n	8007274 <_malloc_r+0x20>
 800734a:	6005      	str	r5, [r0, #0]
 800734c:	e7d6      	b.n	80072fc <_malloc_r+0xa8>
 800734e:	bf00      	nop
 8007350:	20001c70 	.word	0x20001c70

08007354 <__malloc_lock>:
 8007354:	4801      	ldr	r0, [pc, #4]	@ (800735c <__malloc_lock+0x8>)
 8007356:	f7ff bf00 	b.w	800715a <__retarget_lock_acquire_recursive>
 800735a:	bf00      	nop
 800735c:	20001c68 	.word	0x20001c68

08007360 <__malloc_unlock>:
 8007360:	4801      	ldr	r0, [pc, #4]	@ (8007368 <__malloc_unlock+0x8>)
 8007362:	f7ff befb 	b.w	800715c <__retarget_lock_release_recursive>
 8007366:	bf00      	nop
 8007368:	20001c68 	.word	0x20001c68

0800736c <__sfputc_r>:
 800736c:	6893      	ldr	r3, [r2, #8]
 800736e:	3b01      	subs	r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	b410      	push	{r4}
 8007374:	6093      	str	r3, [r2, #8]
 8007376:	da08      	bge.n	800738a <__sfputc_r+0x1e>
 8007378:	6994      	ldr	r4, [r2, #24]
 800737a:	42a3      	cmp	r3, r4
 800737c:	db01      	blt.n	8007382 <__sfputc_r+0x16>
 800737e:	290a      	cmp	r1, #10
 8007380:	d103      	bne.n	800738a <__sfputc_r+0x1e>
 8007382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007386:	f000 bb6d 	b.w	8007a64 <__swbuf_r>
 800738a:	6813      	ldr	r3, [r2, #0]
 800738c:	1c58      	adds	r0, r3, #1
 800738e:	6010      	str	r0, [r2, #0]
 8007390:	7019      	strb	r1, [r3, #0]
 8007392:	4608      	mov	r0, r1
 8007394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007398:	4770      	bx	lr

0800739a <__sfputs_r>:
 800739a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739c:	4606      	mov	r6, r0
 800739e:	460f      	mov	r7, r1
 80073a0:	4614      	mov	r4, r2
 80073a2:	18d5      	adds	r5, r2, r3
 80073a4:	42ac      	cmp	r4, r5
 80073a6:	d101      	bne.n	80073ac <__sfputs_r+0x12>
 80073a8:	2000      	movs	r0, #0
 80073aa:	e007      	b.n	80073bc <__sfputs_r+0x22>
 80073ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b0:	463a      	mov	r2, r7
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ffda 	bl	800736c <__sfputc_r>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d1f3      	bne.n	80073a4 <__sfputs_r+0xa>
 80073bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073c0 <_vfiprintf_r>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	460d      	mov	r5, r1
 80073c6:	b09d      	sub	sp, #116	@ 0x74
 80073c8:	4614      	mov	r4, r2
 80073ca:	4698      	mov	r8, r3
 80073cc:	4606      	mov	r6, r0
 80073ce:	b118      	cbz	r0, 80073d8 <_vfiprintf_r+0x18>
 80073d0:	6a03      	ldr	r3, [r0, #32]
 80073d2:	b90b      	cbnz	r3, 80073d8 <_vfiprintf_r+0x18>
 80073d4:	f7ff fdbc 	bl	8006f50 <__sinit>
 80073d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073da:	07d9      	lsls	r1, r3, #31
 80073dc:	d405      	bmi.n	80073ea <_vfiprintf_r+0x2a>
 80073de:	89ab      	ldrh	r3, [r5, #12]
 80073e0:	059a      	lsls	r2, r3, #22
 80073e2:	d402      	bmi.n	80073ea <_vfiprintf_r+0x2a>
 80073e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073e6:	f7ff feb8 	bl	800715a <__retarget_lock_acquire_recursive>
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	071b      	lsls	r3, r3, #28
 80073ee:	d501      	bpl.n	80073f4 <_vfiprintf_r+0x34>
 80073f0:	692b      	ldr	r3, [r5, #16]
 80073f2:	b99b      	cbnz	r3, 800741c <_vfiprintf_r+0x5c>
 80073f4:	4629      	mov	r1, r5
 80073f6:	4630      	mov	r0, r6
 80073f8:	f000 fb72 	bl	8007ae0 <__swsetup_r>
 80073fc:	b170      	cbz	r0, 800741c <_vfiprintf_r+0x5c>
 80073fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007400:	07dc      	lsls	r4, r3, #31
 8007402:	d504      	bpl.n	800740e <_vfiprintf_r+0x4e>
 8007404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007408:	b01d      	add	sp, #116	@ 0x74
 800740a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740e:	89ab      	ldrh	r3, [r5, #12]
 8007410:	0598      	lsls	r0, r3, #22
 8007412:	d4f7      	bmi.n	8007404 <_vfiprintf_r+0x44>
 8007414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007416:	f7ff fea1 	bl	800715c <__retarget_lock_release_recursive>
 800741a:	e7f3      	b.n	8007404 <_vfiprintf_r+0x44>
 800741c:	2300      	movs	r3, #0
 800741e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007420:	2320      	movs	r3, #32
 8007422:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007426:	f8cd 800c 	str.w	r8, [sp, #12]
 800742a:	2330      	movs	r3, #48	@ 0x30
 800742c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075dc <_vfiprintf_r+0x21c>
 8007430:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007434:	f04f 0901 	mov.w	r9, #1
 8007438:	4623      	mov	r3, r4
 800743a:	469a      	mov	sl, r3
 800743c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007440:	b10a      	cbz	r2, 8007446 <_vfiprintf_r+0x86>
 8007442:	2a25      	cmp	r2, #37	@ 0x25
 8007444:	d1f9      	bne.n	800743a <_vfiprintf_r+0x7a>
 8007446:	ebba 0b04 	subs.w	fp, sl, r4
 800744a:	d00b      	beq.n	8007464 <_vfiprintf_r+0xa4>
 800744c:	465b      	mov	r3, fp
 800744e:	4622      	mov	r2, r4
 8007450:	4629      	mov	r1, r5
 8007452:	4630      	mov	r0, r6
 8007454:	f7ff ffa1 	bl	800739a <__sfputs_r>
 8007458:	3001      	adds	r0, #1
 800745a:	f000 80a7 	beq.w	80075ac <_vfiprintf_r+0x1ec>
 800745e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007460:	445a      	add	r2, fp
 8007462:	9209      	str	r2, [sp, #36]	@ 0x24
 8007464:	f89a 3000 	ldrb.w	r3, [sl]
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 809f 	beq.w	80075ac <_vfiprintf_r+0x1ec>
 800746e:	2300      	movs	r3, #0
 8007470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007478:	f10a 0a01 	add.w	sl, sl, #1
 800747c:	9304      	str	r3, [sp, #16]
 800747e:	9307      	str	r3, [sp, #28]
 8007480:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007484:	931a      	str	r3, [sp, #104]	@ 0x68
 8007486:	4654      	mov	r4, sl
 8007488:	2205      	movs	r2, #5
 800748a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800748e:	4853      	ldr	r0, [pc, #332]	@ (80075dc <_vfiprintf_r+0x21c>)
 8007490:	f7f8 fec6 	bl	8000220 <memchr>
 8007494:	9a04      	ldr	r2, [sp, #16]
 8007496:	b9d8      	cbnz	r0, 80074d0 <_vfiprintf_r+0x110>
 8007498:	06d1      	lsls	r1, r2, #27
 800749a:	bf44      	itt	mi
 800749c:	2320      	movmi	r3, #32
 800749e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074a2:	0713      	lsls	r3, r2, #28
 80074a4:	bf44      	itt	mi
 80074a6:	232b      	movmi	r3, #43	@ 0x2b
 80074a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ac:	f89a 3000 	ldrb.w	r3, [sl]
 80074b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80074b2:	d015      	beq.n	80074e0 <_vfiprintf_r+0x120>
 80074b4:	9a07      	ldr	r2, [sp, #28]
 80074b6:	4654      	mov	r4, sl
 80074b8:	2000      	movs	r0, #0
 80074ba:	f04f 0c0a 	mov.w	ip, #10
 80074be:	4621      	mov	r1, r4
 80074c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074c4:	3b30      	subs	r3, #48	@ 0x30
 80074c6:	2b09      	cmp	r3, #9
 80074c8:	d94b      	bls.n	8007562 <_vfiprintf_r+0x1a2>
 80074ca:	b1b0      	cbz	r0, 80074fa <_vfiprintf_r+0x13a>
 80074cc:	9207      	str	r2, [sp, #28]
 80074ce:	e014      	b.n	80074fa <_vfiprintf_r+0x13a>
 80074d0:	eba0 0308 	sub.w	r3, r0, r8
 80074d4:	fa09 f303 	lsl.w	r3, r9, r3
 80074d8:	4313      	orrs	r3, r2
 80074da:	9304      	str	r3, [sp, #16]
 80074dc:	46a2      	mov	sl, r4
 80074de:	e7d2      	b.n	8007486 <_vfiprintf_r+0xc6>
 80074e0:	9b03      	ldr	r3, [sp, #12]
 80074e2:	1d19      	adds	r1, r3, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	9103      	str	r1, [sp, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bfbb      	ittet	lt
 80074ec:	425b      	neglt	r3, r3
 80074ee:	f042 0202 	orrlt.w	r2, r2, #2
 80074f2:	9307      	strge	r3, [sp, #28]
 80074f4:	9307      	strlt	r3, [sp, #28]
 80074f6:	bfb8      	it	lt
 80074f8:	9204      	strlt	r2, [sp, #16]
 80074fa:	7823      	ldrb	r3, [r4, #0]
 80074fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80074fe:	d10a      	bne.n	8007516 <_vfiprintf_r+0x156>
 8007500:	7863      	ldrb	r3, [r4, #1]
 8007502:	2b2a      	cmp	r3, #42	@ 0x2a
 8007504:	d132      	bne.n	800756c <_vfiprintf_r+0x1ac>
 8007506:	9b03      	ldr	r3, [sp, #12]
 8007508:	1d1a      	adds	r2, r3, #4
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	9203      	str	r2, [sp, #12]
 800750e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007512:	3402      	adds	r4, #2
 8007514:	9305      	str	r3, [sp, #20]
 8007516:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075ec <_vfiprintf_r+0x22c>
 800751a:	7821      	ldrb	r1, [r4, #0]
 800751c:	2203      	movs	r2, #3
 800751e:	4650      	mov	r0, sl
 8007520:	f7f8 fe7e 	bl	8000220 <memchr>
 8007524:	b138      	cbz	r0, 8007536 <_vfiprintf_r+0x176>
 8007526:	9b04      	ldr	r3, [sp, #16]
 8007528:	eba0 000a 	sub.w	r0, r0, sl
 800752c:	2240      	movs	r2, #64	@ 0x40
 800752e:	4082      	lsls	r2, r0
 8007530:	4313      	orrs	r3, r2
 8007532:	3401      	adds	r4, #1
 8007534:	9304      	str	r3, [sp, #16]
 8007536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800753a:	4829      	ldr	r0, [pc, #164]	@ (80075e0 <_vfiprintf_r+0x220>)
 800753c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007540:	2206      	movs	r2, #6
 8007542:	f7f8 fe6d 	bl	8000220 <memchr>
 8007546:	2800      	cmp	r0, #0
 8007548:	d03f      	beq.n	80075ca <_vfiprintf_r+0x20a>
 800754a:	4b26      	ldr	r3, [pc, #152]	@ (80075e4 <_vfiprintf_r+0x224>)
 800754c:	bb1b      	cbnz	r3, 8007596 <_vfiprintf_r+0x1d6>
 800754e:	9b03      	ldr	r3, [sp, #12]
 8007550:	3307      	adds	r3, #7
 8007552:	f023 0307 	bic.w	r3, r3, #7
 8007556:	3308      	adds	r3, #8
 8007558:	9303      	str	r3, [sp, #12]
 800755a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800755c:	443b      	add	r3, r7
 800755e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007560:	e76a      	b.n	8007438 <_vfiprintf_r+0x78>
 8007562:	fb0c 3202 	mla	r2, ip, r2, r3
 8007566:	460c      	mov	r4, r1
 8007568:	2001      	movs	r0, #1
 800756a:	e7a8      	b.n	80074be <_vfiprintf_r+0xfe>
 800756c:	2300      	movs	r3, #0
 800756e:	3401      	adds	r4, #1
 8007570:	9305      	str	r3, [sp, #20]
 8007572:	4619      	mov	r1, r3
 8007574:	f04f 0c0a 	mov.w	ip, #10
 8007578:	4620      	mov	r0, r4
 800757a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800757e:	3a30      	subs	r2, #48	@ 0x30
 8007580:	2a09      	cmp	r2, #9
 8007582:	d903      	bls.n	800758c <_vfiprintf_r+0x1cc>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0c6      	beq.n	8007516 <_vfiprintf_r+0x156>
 8007588:	9105      	str	r1, [sp, #20]
 800758a:	e7c4      	b.n	8007516 <_vfiprintf_r+0x156>
 800758c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007590:	4604      	mov	r4, r0
 8007592:	2301      	movs	r3, #1
 8007594:	e7f0      	b.n	8007578 <_vfiprintf_r+0x1b8>
 8007596:	ab03      	add	r3, sp, #12
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	462a      	mov	r2, r5
 800759c:	4b12      	ldr	r3, [pc, #72]	@ (80075e8 <_vfiprintf_r+0x228>)
 800759e:	a904      	add	r1, sp, #16
 80075a0:	4630      	mov	r0, r6
 80075a2:	f3af 8000 	nop.w
 80075a6:	4607      	mov	r7, r0
 80075a8:	1c78      	adds	r0, r7, #1
 80075aa:	d1d6      	bne.n	800755a <_vfiprintf_r+0x19a>
 80075ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ae:	07d9      	lsls	r1, r3, #31
 80075b0:	d405      	bmi.n	80075be <_vfiprintf_r+0x1fe>
 80075b2:	89ab      	ldrh	r3, [r5, #12]
 80075b4:	059a      	lsls	r2, r3, #22
 80075b6:	d402      	bmi.n	80075be <_vfiprintf_r+0x1fe>
 80075b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075ba:	f7ff fdcf 	bl	800715c <__retarget_lock_release_recursive>
 80075be:	89ab      	ldrh	r3, [r5, #12]
 80075c0:	065b      	lsls	r3, r3, #25
 80075c2:	f53f af1f 	bmi.w	8007404 <_vfiprintf_r+0x44>
 80075c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075c8:	e71e      	b.n	8007408 <_vfiprintf_r+0x48>
 80075ca:	ab03      	add	r3, sp, #12
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	462a      	mov	r2, r5
 80075d0:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <_vfiprintf_r+0x228>)
 80075d2:	a904      	add	r1, sp, #16
 80075d4:	4630      	mov	r0, r6
 80075d6:	f000 f879 	bl	80076cc <_printf_i>
 80075da:	e7e4      	b.n	80075a6 <_vfiprintf_r+0x1e6>
 80075dc:	08007d74 	.word	0x08007d74
 80075e0:	08007d7e 	.word	0x08007d7e
 80075e4:	00000000 	.word	0x00000000
 80075e8:	0800739b 	.word	0x0800739b
 80075ec:	08007d7a 	.word	0x08007d7a

080075f0 <_printf_common>:
 80075f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f4:	4616      	mov	r6, r2
 80075f6:	4698      	mov	r8, r3
 80075f8:	688a      	ldr	r2, [r1, #8]
 80075fa:	690b      	ldr	r3, [r1, #16]
 80075fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007600:	4293      	cmp	r3, r2
 8007602:	bfb8      	it	lt
 8007604:	4613      	movlt	r3, r2
 8007606:	6033      	str	r3, [r6, #0]
 8007608:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800760c:	4607      	mov	r7, r0
 800760e:	460c      	mov	r4, r1
 8007610:	b10a      	cbz	r2, 8007616 <_printf_common+0x26>
 8007612:	3301      	adds	r3, #1
 8007614:	6033      	str	r3, [r6, #0]
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	0699      	lsls	r1, r3, #26
 800761a:	bf42      	ittt	mi
 800761c:	6833      	ldrmi	r3, [r6, #0]
 800761e:	3302      	addmi	r3, #2
 8007620:	6033      	strmi	r3, [r6, #0]
 8007622:	6825      	ldr	r5, [r4, #0]
 8007624:	f015 0506 	ands.w	r5, r5, #6
 8007628:	d106      	bne.n	8007638 <_printf_common+0x48>
 800762a:	f104 0a19 	add.w	sl, r4, #25
 800762e:	68e3      	ldr	r3, [r4, #12]
 8007630:	6832      	ldr	r2, [r6, #0]
 8007632:	1a9b      	subs	r3, r3, r2
 8007634:	42ab      	cmp	r3, r5
 8007636:	dc26      	bgt.n	8007686 <_printf_common+0x96>
 8007638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800763c:	6822      	ldr	r2, [r4, #0]
 800763e:	3b00      	subs	r3, #0
 8007640:	bf18      	it	ne
 8007642:	2301      	movne	r3, #1
 8007644:	0692      	lsls	r2, r2, #26
 8007646:	d42b      	bmi.n	80076a0 <_printf_common+0xb0>
 8007648:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800764c:	4641      	mov	r1, r8
 800764e:	4638      	mov	r0, r7
 8007650:	47c8      	blx	r9
 8007652:	3001      	adds	r0, #1
 8007654:	d01e      	beq.n	8007694 <_printf_common+0xa4>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	6922      	ldr	r2, [r4, #16]
 800765a:	f003 0306 	and.w	r3, r3, #6
 800765e:	2b04      	cmp	r3, #4
 8007660:	bf02      	ittt	eq
 8007662:	68e5      	ldreq	r5, [r4, #12]
 8007664:	6833      	ldreq	r3, [r6, #0]
 8007666:	1aed      	subeq	r5, r5, r3
 8007668:	68a3      	ldr	r3, [r4, #8]
 800766a:	bf0c      	ite	eq
 800766c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007670:	2500      	movne	r5, #0
 8007672:	4293      	cmp	r3, r2
 8007674:	bfc4      	itt	gt
 8007676:	1a9b      	subgt	r3, r3, r2
 8007678:	18ed      	addgt	r5, r5, r3
 800767a:	2600      	movs	r6, #0
 800767c:	341a      	adds	r4, #26
 800767e:	42b5      	cmp	r5, r6
 8007680:	d11a      	bne.n	80076b8 <_printf_common+0xc8>
 8007682:	2000      	movs	r0, #0
 8007684:	e008      	b.n	8007698 <_printf_common+0xa8>
 8007686:	2301      	movs	r3, #1
 8007688:	4652      	mov	r2, sl
 800768a:	4641      	mov	r1, r8
 800768c:	4638      	mov	r0, r7
 800768e:	47c8      	blx	r9
 8007690:	3001      	adds	r0, #1
 8007692:	d103      	bne.n	800769c <_printf_common+0xac>
 8007694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769c:	3501      	adds	r5, #1
 800769e:	e7c6      	b.n	800762e <_printf_common+0x3e>
 80076a0:	18e1      	adds	r1, r4, r3
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	2030      	movs	r0, #48	@ 0x30
 80076a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076aa:	4422      	add	r2, r4
 80076ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076b4:	3302      	adds	r3, #2
 80076b6:	e7c7      	b.n	8007648 <_printf_common+0x58>
 80076b8:	2301      	movs	r3, #1
 80076ba:	4622      	mov	r2, r4
 80076bc:	4641      	mov	r1, r8
 80076be:	4638      	mov	r0, r7
 80076c0:	47c8      	blx	r9
 80076c2:	3001      	adds	r0, #1
 80076c4:	d0e6      	beq.n	8007694 <_printf_common+0xa4>
 80076c6:	3601      	adds	r6, #1
 80076c8:	e7d9      	b.n	800767e <_printf_common+0x8e>
	...

080076cc <_printf_i>:
 80076cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d0:	7e0f      	ldrb	r7, [r1, #24]
 80076d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076d4:	2f78      	cmp	r7, #120	@ 0x78
 80076d6:	4691      	mov	r9, r2
 80076d8:	4680      	mov	r8, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	469a      	mov	sl, r3
 80076de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076e2:	d807      	bhi.n	80076f4 <_printf_i+0x28>
 80076e4:	2f62      	cmp	r7, #98	@ 0x62
 80076e6:	d80a      	bhi.n	80076fe <_printf_i+0x32>
 80076e8:	2f00      	cmp	r7, #0
 80076ea:	f000 80d2 	beq.w	8007892 <_printf_i+0x1c6>
 80076ee:	2f58      	cmp	r7, #88	@ 0x58
 80076f0:	f000 80b9 	beq.w	8007866 <_printf_i+0x19a>
 80076f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076fc:	e03a      	b.n	8007774 <_printf_i+0xa8>
 80076fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007702:	2b15      	cmp	r3, #21
 8007704:	d8f6      	bhi.n	80076f4 <_printf_i+0x28>
 8007706:	a101      	add	r1, pc, #4	@ (adr r1, 800770c <_printf_i+0x40>)
 8007708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800770c:	08007765 	.word	0x08007765
 8007710:	08007779 	.word	0x08007779
 8007714:	080076f5 	.word	0x080076f5
 8007718:	080076f5 	.word	0x080076f5
 800771c:	080076f5 	.word	0x080076f5
 8007720:	080076f5 	.word	0x080076f5
 8007724:	08007779 	.word	0x08007779
 8007728:	080076f5 	.word	0x080076f5
 800772c:	080076f5 	.word	0x080076f5
 8007730:	080076f5 	.word	0x080076f5
 8007734:	080076f5 	.word	0x080076f5
 8007738:	08007879 	.word	0x08007879
 800773c:	080077a3 	.word	0x080077a3
 8007740:	08007833 	.word	0x08007833
 8007744:	080076f5 	.word	0x080076f5
 8007748:	080076f5 	.word	0x080076f5
 800774c:	0800789b 	.word	0x0800789b
 8007750:	080076f5 	.word	0x080076f5
 8007754:	080077a3 	.word	0x080077a3
 8007758:	080076f5 	.word	0x080076f5
 800775c:	080076f5 	.word	0x080076f5
 8007760:	0800783b 	.word	0x0800783b
 8007764:	6833      	ldr	r3, [r6, #0]
 8007766:	1d1a      	adds	r2, r3, #4
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6032      	str	r2, [r6, #0]
 800776c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007774:	2301      	movs	r3, #1
 8007776:	e09d      	b.n	80078b4 <_printf_i+0x1e8>
 8007778:	6833      	ldr	r3, [r6, #0]
 800777a:	6820      	ldr	r0, [r4, #0]
 800777c:	1d19      	adds	r1, r3, #4
 800777e:	6031      	str	r1, [r6, #0]
 8007780:	0606      	lsls	r6, r0, #24
 8007782:	d501      	bpl.n	8007788 <_printf_i+0xbc>
 8007784:	681d      	ldr	r5, [r3, #0]
 8007786:	e003      	b.n	8007790 <_printf_i+0xc4>
 8007788:	0645      	lsls	r5, r0, #25
 800778a:	d5fb      	bpl.n	8007784 <_printf_i+0xb8>
 800778c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007790:	2d00      	cmp	r5, #0
 8007792:	da03      	bge.n	800779c <_printf_i+0xd0>
 8007794:	232d      	movs	r3, #45	@ 0x2d
 8007796:	426d      	negs	r5, r5
 8007798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800779c:	4859      	ldr	r0, [pc, #356]	@ (8007904 <_printf_i+0x238>)
 800779e:	230a      	movs	r3, #10
 80077a0:	e011      	b.n	80077c6 <_printf_i+0xfa>
 80077a2:	6821      	ldr	r1, [r4, #0]
 80077a4:	6833      	ldr	r3, [r6, #0]
 80077a6:	0608      	lsls	r0, r1, #24
 80077a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80077ac:	d402      	bmi.n	80077b4 <_printf_i+0xe8>
 80077ae:	0649      	lsls	r1, r1, #25
 80077b0:	bf48      	it	mi
 80077b2:	b2ad      	uxthmi	r5, r5
 80077b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80077b6:	4853      	ldr	r0, [pc, #332]	@ (8007904 <_printf_i+0x238>)
 80077b8:	6033      	str	r3, [r6, #0]
 80077ba:	bf14      	ite	ne
 80077bc:	230a      	movne	r3, #10
 80077be:	2308      	moveq	r3, #8
 80077c0:	2100      	movs	r1, #0
 80077c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077c6:	6866      	ldr	r6, [r4, #4]
 80077c8:	60a6      	str	r6, [r4, #8]
 80077ca:	2e00      	cmp	r6, #0
 80077cc:	bfa2      	ittt	ge
 80077ce:	6821      	ldrge	r1, [r4, #0]
 80077d0:	f021 0104 	bicge.w	r1, r1, #4
 80077d4:	6021      	strge	r1, [r4, #0]
 80077d6:	b90d      	cbnz	r5, 80077dc <_printf_i+0x110>
 80077d8:	2e00      	cmp	r6, #0
 80077da:	d04b      	beq.n	8007874 <_printf_i+0x1a8>
 80077dc:	4616      	mov	r6, r2
 80077de:	fbb5 f1f3 	udiv	r1, r5, r3
 80077e2:	fb03 5711 	mls	r7, r3, r1, r5
 80077e6:	5dc7      	ldrb	r7, [r0, r7]
 80077e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077ec:	462f      	mov	r7, r5
 80077ee:	42bb      	cmp	r3, r7
 80077f0:	460d      	mov	r5, r1
 80077f2:	d9f4      	bls.n	80077de <_printf_i+0x112>
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d10b      	bne.n	8007810 <_printf_i+0x144>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	07df      	lsls	r7, r3, #31
 80077fc:	d508      	bpl.n	8007810 <_printf_i+0x144>
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	6861      	ldr	r1, [r4, #4]
 8007802:	4299      	cmp	r1, r3
 8007804:	bfde      	ittt	le
 8007806:	2330      	movle	r3, #48	@ 0x30
 8007808:	f806 3c01 	strble.w	r3, [r6, #-1]
 800780c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007810:	1b92      	subs	r2, r2, r6
 8007812:	6122      	str	r2, [r4, #16]
 8007814:	f8cd a000 	str.w	sl, [sp]
 8007818:	464b      	mov	r3, r9
 800781a:	aa03      	add	r2, sp, #12
 800781c:	4621      	mov	r1, r4
 800781e:	4640      	mov	r0, r8
 8007820:	f7ff fee6 	bl	80075f0 <_printf_common>
 8007824:	3001      	adds	r0, #1
 8007826:	d14a      	bne.n	80078be <_printf_i+0x1f2>
 8007828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800782c:	b004      	add	sp, #16
 800782e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	f043 0320 	orr.w	r3, r3, #32
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	4833      	ldr	r0, [pc, #204]	@ (8007908 <_printf_i+0x23c>)
 800783c:	2778      	movs	r7, #120	@ 0x78
 800783e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	6831      	ldr	r1, [r6, #0]
 8007846:	061f      	lsls	r7, r3, #24
 8007848:	f851 5b04 	ldr.w	r5, [r1], #4
 800784c:	d402      	bmi.n	8007854 <_printf_i+0x188>
 800784e:	065f      	lsls	r7, r3, #25
 8007850:	bf48      	it	mi
 8007852:	b2ad      	uxthmi	r5, r5
 8007854:	6031      	str	r1, [r6, #0]
 8007856:	07d9      	lsls	r1, r3, #31
 8007858:	bf44      	itt	mi
 800785a:	f043 0320 	orrmi.w	r3, r3, #32
 800785e:	6023      	strmi	r3, [r4, #0]
 8007860:	b11d      	cbz	r5, 800786a <_printf_i+0x19e>
 8007862:	2310      	movs	r3, #16
 8007864:	e7ac      	b.n	80077c0 <_printf_i+0xf4>
 8007866:	4827      	ldr	r0, [pc, #156]	@ (8007904 <_printf_i+0x238>)
 8007868:	e7e9      	b.n	800783e <_printf_i+0x172>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	f023 0320 	bic.w	r3, r3, #32
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	e7f6      	b.n	8007862 <_printf_i+0x196>
 8007874:	4616      	mov	r6, r2
 8007876:	e7bd      	b.n	80077f4 <_printf_i+0x128>
 8007878:	6833      	ldr	r3, [r6, #0]
 800787a:	6825      	ldr	r5, [r4, #0]
 800787c:	6961      	ldr	r1, [r4, #20]
 800787e:	1d18      	adds	r0, r3, #4
 8007880:	6030      	str	r0, [r6, #0]
 8007882:	062e      	lsls	r6, r5, #24
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	d501      	bpl.n	800788c <_printf_i+0x1c0>
 8007888:	6019      	str	r1, [r3, #0]
 800788a:	e002      	b.n	8007892 <_printf_i+0x1c6>
 800788c:	0668      	lsls	r0, r5, #25
 800788e:	d5fb      	bpl.n	8007888 <_printf_i+0x1bc>
 8007890:	8019      	strh	r1, [r3, #0]
 8007892:	2300      	movs	r3, #0
 8007894:	6123      	str	r3, [r4, #16]
 8007896:	4616      	mov	r6, r2
 8007898:	e7bc      	b.n	8007814 <_printf_i+0x148>
 800789a:	6833      	ldr	r3, [r6, #0]
 800789c:	1d1a      	adds	r2, r3, #4
 800789e:	6032      	str	r2, [r6, #0]
 80078a0:	681e      	ldr	r6, [r3, #0]
 80078a2:	6862      	ldr	r2, [r4, #4]
 80078a4:	2100      	movs	r1, #0
 80078a6:	4630      	mov	r0, r6
 80078a8:	f7f8 fcba 	bl	8000220 <memchr>
 80078ac:	b108      	cbz	r0, 80078b2 <_printf_i+0x1e6>
 80078ae:	1b80      	subs	r0, r0, r6
 80078b0:	6060      	str	r0, [r4, #4]
 80078b2:	6863      	ldr	r3, [r4, #4]
 80078b4:	6123      	str	r3, [r4, #16]
 80078b6:	2300      	movs	r3, #0
 80078b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078bc:	e7aa      	b.n	8007814 <_printf_i+0x148>
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	4632      	mov	r2, r6
 80078c2:	4649      	mov	r1, r9
 80078c4:	4640      	mov	r0, r8
 80078c6:	47d0      	blx	sl
 80078c8:	3001      	adds	r0, #1
 80078ca:	d0ad      	beq.n	8007828 <_printf_i+0x15c>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	079b      	lsls	r3, r3, #30
 80078d0:	d413      	bmi.n	80078fa <_printf_i+0x22e>
 80078d2:	68e0      	ldr	r0, [r4, #12]
 80078d4:	9b03      	ldr	r3, [sp, #12]
 80078d6:	4298      	cmp	r0, r3
 80078d8:	bfb8      	it	lt
 80078da:	4618      	movlt	r0, r3
 80078dc:	e7a6      	b.n	800782c <_printf_i+0x160>
 80078de:	2301      	movs	r3, #1
 80078e0:	4632      	mov	r2, r6
 80078e2:	4649      	mov	r1, r9
 80078e4:	4640      	mov	r0, r8
 80078e6:	47d0      	blx	sl
 80078e8:	3001      	adds	r0, #1
 80078ea:	d09d      	beq.n	8007828 <_printf_i+0x15c>
 80078ec:	3501      	adds	r5, #1
 80078ee:	68e3      	ldr	r3, [r4, #12]
 80078f0:	9903      	ldr	r1, [sp, #12]
 80078f2:	1a5b      	subs	r3, r3, r1
 80078f4:	42ab      	cmp	r3, r5
 80078f6:	dcf2      	bgt.n	80078de <_printf_i+0x212>
 80078f8:	e7eb      	b.n	80078d2 <_printf_i+0x206>
 80078fa:	2500      	movs	r5, #0
 80078fc:	f104 0619 	add.w	r6, r4, #25
 8007900:	e7f5      	b.n	80078ee <_printf_i+0x222>
 8007902:	bf00      	nop
 8007904:	08007d85 	.word	0x08007d85
 8007908:	08007d96 	.word	0x08007d96

0800790c <__sflush_r>:
 800790c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007914:	0716      	lsls	r6, r2, #28
 8007916:	4605      	mov	r5, r0
 8007918:	460c      	mov	r4, r1
 800791a:	d454      	bmi.n	80079c6 <__sflush_r+0xba>
 800791c:	684b      	ldr	r3, [r1, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	dc02      	bgt.n	8007928 <__sflush_r+0x1c>
 8007922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	dd48      	ble.n	80079ba <__sflush_r+0xae>
 8007928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800792a:	2e00      	cmp	r6, #0
 800792c:	d045      	beq.n	80079ba <__sflush_r+0xae>
 800792e:	2300      	movs	r3, #0
 8007930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007934:	682f      	ldr	r7, [r5, #0]
 8007936:	6a21      	ldr	r1, [r4, #32]
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	d030      	beq.n	800799e <__sflush_r+0x92>
 800793c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	0759      	lsls	r1, r3, #29
 8007942:	d505      	bpl.n	8007950 <__sflush_r+0x44>
 8007944:	6863      	ldr	r3, [r4, #4]
 8007946:	1ad2      	subs	r2, r2, r3
 8007948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800794a:	b10b      	cbz	r3, 8007950 <__sflush_r+0x44>
 800794c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	2300      	movs	r3, #0
 8007952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007954:	6a21      	ldr	r1, [r4, #32]
 8007956:	4628      	mov	r0, r5
 8007958:	47b0      	blx	r6
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	d106      	bne.n	800796e <__sflush_r+0x62>
 8007960:	6829      	ldr	r1, [r5, #0]
 8007962:	291d      	cmp	r1, #29
 8007964:	d82b      	bhi.n	80079be <__sflush_r+0xb2>
 8007966:	4a2a      	ldr	r2, [pc, #168]	@ (8007a10 <__sflush_r+0x104>)
 8007968:	410a      	asrs	r2, r1
 800796a:	07d6      	lsls	r6, r2, #31
 800796c:	d427      	bmi.n	80079be <__sflush_r+0xb2>
 800796e:	2200      	movs	r2, #0
 8007970:	6062      	str	r2, [r4, #4]
 8007972:	04d9      	lsls	r1, r3, #19
 8007974:	6922      	ldr	r2, [r4, #16]
 8007976:	6022      	str	r2, [r4, #0]
 8007978:	d504      	bpl.n	8007984 <__sflush_r+0x78>
 800797a:	1c42      	adds	r2, r0, #1
 800797c:	d101      	bne.n	8007982 <__sflush_r+0x76>
 800797e:	682b      	ldr	r3, [r5, #0]
 8007980:	b903      	cbnz	r3, 8007984 <__sflush_r+0x78>
 8007982:	6560      	str	r0, [r4, #84]	@ 0x54
 8007984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007986:	602f      	str	r7, [r5, #0]
 8007988:	b1b9      	cbz	r1, 80079ba <__sflush_r+0xae>
 800798a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800798e:	4299      	cmp	r1, r3
 8007990:	d002      	beq.n	8007998 <__sflush_r+0x8c>
 8007992:	4628      	mov	r0, r5
 8007994:	f7ff fbf2 	bl	800717c <_free_r>
 8007998:	2300      	movs	r3, #0
 800799a:	6363      	str	r3, [r4, #52]	@ 0x34
 800799c:	e00d      	b.n	80079ba <__sflush_r+0xae>
 800799e:	2301      	movs	r3, #1
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b0      	blx	r6
 80079a4:	4602      	mov	r2, r0
 80079a6:	1c50      	adds	r0, r2, #1
 80079a8:	d1c9      	bne.n	800793e <__sflush_r+0x32>
 80079aa:	682b      	ldr	r3, [r5, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0c6      	beq.n	800793e <__sflush_r+0x32>
 80079b0:	2b1d      	cmp	r3, #29
 80079b2:	d001      	beq.n	80079b8 <__sflush_r+0xac>
 80079b4:	2b16      	cmp	r3, #22
 80079b6:	d11e      	bne.n	80079f6 <__sflush_r+0xea>
 80079b8:	602f      	str	r7, [r5, #0]
 80079ba:	2000      	movs	r0, #0
 80079bc:	e022      	b.n	8007a04 <__sflush_r+0xf8>
 80079be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c2:	b21b      	sxth	r3, r3
 80079c4:	e01b      	b.n	80079fe <__sflush_r+0xf2>
 80079c6:	690f      	ldr	r7, [r1, #16]
 80079c8:	2f00      	cmp	r7, #0
 80079ca:	d0f6      	beq.n	80079ba <__sflush_r+0xae>
 80079cc:	0793      	lsls	r3, r2, #30
 80079ce:	680e      	ldr	r6, [r1, #0]
 80079d0:	bf08      	it	eq
 80079d2:	694b      	ldreq	r3, [r1, #20]
 80079d4:	600f      	str	r7, [r1, #0]
 80079d6:	bf18      	it	ne
 80079d8:	2300      	movne	r3, #0
 80079da:	eba6 0807 	sub.w	r8, r6, r7
 80079de:	608b      	str	r3, [r1, #8]
 80079e0:	f1b8 0f00 	cmp.w	r8, #0
 80079e4:	dde9      	ble.n	80079ba <__sflush_r+0xae>
 80079e6:	6a21      	ldr	r1, [r4, #32]
 80079e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079ea:	4643      	mov	r3, r8
 80079ec:	463a      	mov	r2, r7
 80079ee:	4628      	mov	r0, r5
 80079f0:	47b0      	blx	r6
 80079f2:	2800      	cmp	r0, #0
 80079f4:	dc08      	bgt.n	8007a08 <__sflush_r+0xfc>
 80079f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079fe:	81a3      	strh	r3, [r4, #12]
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a08:	4407      	add	r7, r0
 8007a0a:	eba8 0800 	sub.w	r8, r8, r0
 8007a0e:	e7e7      	b.n	80079e0 <__sflush_r+0xd4>
 8007a10:	dfbffffe 	.word	0xdfbffffe

08007a14 <_fflush_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	690b      	ldr	r3, [r1, #16]
 8007a18:	4605      	mov	r5, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	b913      	cbnz	r3, 8007a24 <_fflush_r+0x10>
 8007a1e:	2500      	movs	r5, #0
 8007a20:	4628      	mov	r0, r5
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	b118      	cbz	r0, 8007a2e <_fflush_r+0x1a>
 8007a26:	6a03      	ldr	r3, [r0, #32]
 8007a28:	b90b      	cbnz	r3, 8007a2e <_fflush_r+0x1a>
 8007a2a:	f7ff fa91 	bl	8006f50 <__sinit>
 8007a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0f3      	beq.n	8007a1e <_fflush_r+0xa>
 8007a36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a38:	07d0      	lsls	r0, r2, #31
 8007a3a:	d404      	bmi.n	8007a46 <_fflush_r+0x32>
 8007a3c:	0599      	lsls	r1, r3, #22
 8007a3e:	d402      	bmi.n	8007a46 <_fflush_r+0x32>
 8007a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a42:	f7ff fb8a 	bl	800715a <__retarget_lock_acquire_recursive>
 8007a46:	4628      	mov	r0, r5
 8007a48:	4621      	mov	r1, r4
 8007a4a:	f7ff ff5f 	bl	800790c <__sflush_r>
 8007a4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a50:	07da      	lsls	r2, r3, #31
 8007a52:	4605      	mov	r5, r0
 8007a54:	d4e4      	bmi.n	8007a20 <_fflush_r+0xc>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	059b      	lsls	r3, r3, #22
 8007a5a:	d4e1      	bmi.n	8007a20 <_fflush_r+0xc>
 8007a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a5e:	f7ff fb7d 	bl	800715c <__retarget_lock_release_recursive>
 8007a62:	e7dd      	b.n	8007a20 <_fflush_r+0xc>

08007a64 <__swbuf_r>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	460e      	mov	r6, r1
 8007a68:	4614      	mov	r4, r2
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	b118      	cbz	r0, 8007a76 <__swbuf_r+0x12>
 8007a6e:	6a03      	ldr	r3, [r0, #32]
 8007a70:	b90b      	cbnz	r3, 8007a76 <__swbuf_r+0x12>
 8007a72:	f7ff fa6d 	bl	8006f50 <__sinit>
 8007a76:	69a3      	ldr	r3, [r4, #24]
 8007a78:	60a3      	str	r3, [r4, #8]
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	071a      	lsls	r2, r3, #28
 8007a7e:	d501      	bpl.n	8007a84 <__swbuf_r+0x20>
 8007a80:	6923      	ldr	r3, [r4, #16]
 8007a82:	b943      	cbnz	r3, 8007a96 <__swbuf_r+0x32>
 8007a84:	4621      	mov	r1, r4
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 f82a 	bl	8007ae0 <__swsetup_r>
 8007a8c:	b118      	cbz	r0, 8007a96 <__swbuf_r+0x32>
 8007a8e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007a92:	4638      	mov	r0, r7
 8007a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	6922      	ldr	r2, [r4, #16]
 8007a9a:	1a98      	subs	r0, r3, r2
 8007a9c:	6963      	ldr	r3, [r4, #20]
 8007a9e:	b2f6      	uxtb	r6, r6
 8007aa0:	4283      	cmp	r3, r0
 8007aa2:	4637      	mov	r7, r6
 8007aa4:	dc05      	bgt.n	8007ab2 <__swbuf_r+0x4e>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	f7ff ffb3 	bl	8007a14 <_fflush_r>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d1ed      	bne.n	8007a8e <__swbuf_r+0x2a>
 8007ab2:	68a3      	ldr	r3, [r4, #8]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	60a3      	str	r3, [r4, #8]
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	6022      	str	r2, [r4, #0]
 8007abe:	701e      	strb	r6, [r3, #0]
 8007ac0:	6962      	ldr	r2, [r4, #20]
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d004      	beq.n	8007ad2 <__swbuf_r+0x6e>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	07db      	lsls	r3, r3, #31
 8007acc:	d5e1      	bpl.n	8007a92 <__swbuf_r+0x2e>
 8007ace:	2e0a      	cmp	r6, #10
 8007ad0:	d1df      	bne.n	8007a92 <__swbuf_r+0x2e>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f7ff ff9d 	bl	8007a14 <_fflush_r>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d0d9      	beq.n	8007a92 <__swbuf_r+0x2e>
 8007ade:	e7d6      	b.n	8007a8e <__swbuf_r+0x2a>

08007ae0 <__swsetup_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4b29      	ldr	r3, [pc, #164]	@ (8007b88 <__swsetup_r+0xa8>)
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	6818      	ldr	r0, [r3, #0]
 8007ae8:	460c      	mov	r4, r1
 8007aea:	b118      	cbz	r0, 8007af4 <__swsetup_r+0x14>
 8007aec:	6a03      	ldr	r3, [r0, #32]
 8007aee:	b90b      	cbnz	r3, 8007af4 <__swsetup_r+0x14>
 8007af0:	f7ff fa2e 	bl	8006f50 <__sinit>
 8007af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af8:	0719      	lsls	r1, r3, #28
 8007afa:	d422      	bmi.n	8007b42 <__swsetup_r+0x62>
 8007afc:	06da      	lsls	r2, r3, #27
 8007afe:	d407      	bmi.n	8007b10 <__swsetup_r+0x30>
 8007b00:	2209      	movs	r2, #9
 8007b02:	602a      	str	r2, [r5, #0]
 8007b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b0e:	e033      	b.n	8007b78 <__swsetup_r+0x98>
 8007b10:	0758      	lsls	r0, r3, #29
 8007b12:	d512      	bpl.n	8007b3a <__swsetup_r+0x5a>
 8007b14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b16:	b141      	cbz	r1, 8007b2a <__swsetup_r+0x4a>
 8007b18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	d002      	beq.n	8007b26 <__swsetup_r+0x46>
 8007b20:	4628      	mov	r0, r5
 8007b22:	f7ff fb2b 	bl	800717c <_free_r>
 8007b26:	2300      	movs	r3, #0
 8007b28:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b30:	81a3      	strh	r3, [r4, #12]
 8007b32:	2300      	movs	r3, #0
 8007b34:	6063      	str	r3, [r4, #4]
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f043 0308 	orr.w	r3, r3, #8
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	b94b      	cbnz	r3, 8007b5a <__swsetup_r+0x7a>
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b50:	d003      	beq.n	8007b5a <__swsetup_r+0x7a>
 8007b52:	4621      	mov	r1, r4
 8007b54:	4628      	mov	r0, r5
 8007b56:	f000 f84f 	bl	8007bf8 <__smakebuf_r>
 8007b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5e:	f013 0201 	ands.w	r2, r3, #1
 8007b62:	d00a      	beq.n	8007b7a <__swsetup_r+0x9a>
 8007b64:	2200      	movs	r2, #0
 8007b66:	60a2      	str	r2, [r4, #8]
 8007b68:	6962      	ldr	r2, [r4, #20]
 8007b6a:	4252      	negs	r2, r2
 8007b6c:	61a2      	str	r2, [r4, #24]
 8007b6e:	6922      	ldr	r2, [r4, #16]
 8007b70:	b942      	cbnz	r2, 8007b84 <__swsetup_r+0xa4>
 8007b72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b76:	d1c5      	bne.n	8007b04 <__swsetup_r+0x24>
 8007b78:	bd38      	pop	{r3, r4, r5, pc}
 8007b7a:	0799      	lsls	r1, r3, #30
 8007b7c:	bf58      	it	pl
 8007b7e:	6962      	ldrpl	r2, [r4, #20]
 8007b80:	60a2      	str	r2, [r4, #8]
 8007b82:	e7f4      	b.n	8007b6e <__swsetup_r+0x8e>
 8007b84:	2000      	movs	r0, #0
 8007b86:	e7f7      	b.n	8007b78 <__swsetup_r+0x98>
 8007b88:	2000001c 	.word	0x2000001c

08007b8c <_sbrk_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d06      	ldr	r5, [pc, #24]	@ (8007ba8 <_sbrk_r+0x1c>)
 8007b90:	2300      	movs	r3, #0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	f7f9 f8cc 	bl	8000d34 <_sbrk>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_sbrk_r+0x1a>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_sbrk_r+0x1a>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	20001c64 	.word	0x20001c64

08007bac <__swhatbuf_r>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	460c      	mov	r4, r1
 8007bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	b096      	sub	sp, #88	@ 0x58
 8007bb8:	4615      	mov	r5, r2
 8007bba:	461e      	mov	r6, r3
 8007bbc:	da0d      	bge.n	8007bda <__swhatbuf_r+0x2e>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bc4:	f04f 0100 	mov.w	r1, #0
 8007bc8:	bf14      	ite	ne
 8007bca:	2340      	movne	r3, #64	@ 0x40
 8007bcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	6031      	str	r1, [r6, #0]
 8007bd4:	602b      	str	r3, [r5, #0]
 8007bd6:	b016      	add	sp, #88	@ 0x58
 8007bd8:	bd70      	pop	{r4, r5, r6, pc}
 8007bda:	466a      	mov	r2, sp
 8007bdc:	f000 f848 	bl	8007c70 <_fstat_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	dbec      	blt.n	8007bbe <__swhatbuf_r+0x12>
 8007be4:	9901      	ldr	r1, [sp, #4]
 8007be6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007bee:	4259      	negs	r1, r3
 8007bf0:	4159      	adcs	r1, r3
 8007bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bf6:	e7eb      	b.n	8007bd0 <__swhatbuf_r+0x24>

08007bf8 <__smakebuf_r>:
 8007bf8:	898b      	ldrh	r3, [r1, #12]
 8007bfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bfc:	079d      	lsls	r5, r3, #30
 8007bfe:	4606      	mov	r6, r0
 8007c00:	460c      	mov	r4, r1
 8007c02:	d507      	bpl.n	8007c14 <__smakebuf_r+0x1c>
 8007c04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	6123      	str	r3, [r4, #16]
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	6163      	str	r3, [r4, #20]
 8007c10:	b003      	add	sp, #12
 8007c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c14:	ab01      	add	r3, sp, #4
 8007c16:	466a      	mov	r2, sp
 8007c18:	f7ff ffc8 	bl	8007bac <__swhatbuf_r>
 8007c1c:	9f00      	ldr	r7, [sp, #0]
 8007c1e:	4605      	mov	r5, r0
 8007c20:	4639      	mov	r1, r7
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7ff fb16 	bl	8007254 <_malloc_r>
 8007c28:	b948      	cbnz	r0, 8007c3e <__smakebuf_r+0x46>
 8007c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c2e:	059a      	lsls	r2, r3, #22
 8007c30:	d4ee      	bmi.n	8007c10 <__smakebuf_r+0x18>
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	f043 0302 	orr.w	r3, r3, #2
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	e7e2      	b.n	8007c04 <__smakebuf_r+0xc>
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	6020      	str	r0, [r4, #0]
 8007c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c46:	81a3      	strh	r3, [r4, #12]
 8007c48:	9b01      	ldr	r3, [sp, #4]
 8007c4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c4e:	b15b      	cbz	r3, 8007c68 <__smakebuf_r+0x70>
 8007c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c54:	4630      	mov	r0, r6
 8007c56:	f000 f81d 	bl	8007c94 <_isatty_r>
 8007c5a:	b128      	cbz	r0, 8007c68 <__smakebuf_r+0x70>
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	f023 0303 	bic.w	r3, r3, #3
 8007c62:	f043 0301 	orr.w	r3, r3, #1
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	431d      	orrs	r5, r3
 8007c6c:	81a5      	strh	r5, [r4, #12]
 8007c6e:	e7cf      	b.n	8007c10 <__smakebuf_r+0x18>

08007c70 <_fstat_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4d07      	ldr	r5, [pc, #28]	@ (8007c90 <_fstat_r+0x20>)
 8007c74:	2300      	movs	r3, #0
 8007c76:	4604      	mov	r4, r0
 8007c78:	4608      	mov	r0, r1
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	602b      	str	r3, [r5, #0]
 8007c7e:	f7f9 f830 	bl	8000ce2 <_fstat>
 8007c82:	1c43      	adds	r3, r0, #1
 8007c84:	d102      	bne.n	8007c8c <_fstat_r+0x1c>
 8007c86:	682b      	ldr	r3, [r5, #0]
 8007c88:	b103      	cbz	r3, 8007c8c <_fstat_r+0x1c>
 8007c8a:	6023      	str	r3, [r4, #0]
 8007c8c:	bd38      	pop	{r3, r4, r5, pc}
 8007c8e:	bf00      	nop
 8007c90:	20001c64 	.word	0x20001c64

08007c94 <_isatty_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4d06      	ldr	r5, [pc, #24]	@ (8007cb0 <_isatty_r+0x1c>)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	602b      	str	r3, [r5, #0]
 8007ca0:	f7f9 f82f 	bl	8000d02 <_isatty>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_isatty_r+0x1a>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_isatty_r+0x1a>
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	20001c64 	.word	0x20001c64

08007cb4 <_init>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	bf00      	nop
 8007cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cba:	bc08      	pop	{r3}
 8007cbc:	469e      	mov	lr, r3
 8007cbe:	4770      	bx	lr

08007cc0 <_fini>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr
